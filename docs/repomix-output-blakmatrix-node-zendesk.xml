This file is a merged representation of the entire codebase, combined into a single document by Repomix.
The content has been processed where content has been compressed (code blocks are separated by ⋮---- delimiter), security check has been disabled.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Content has been compressed - code blocks are separated by ⋮---- delimiter
- Security check has been disabled - content may contain sensitive information
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.github/
  ISSUE_TEMPLATE/
    bug_report.md
    feature_request.md
  workflows/
    ci-cd.yml
    deploy.yml
    release-drafter.yml
  FUNDING.yml
  pull_request_template.md
  release-drafter.yml
docs/
  .vitepress/
    config.mts
  guide/
    Guide/
      Advanced/
        custom-headers.md
        custom-logging.md
        custom-transport.md
        debugging.md
        endpoint-override.md
        index.md
        manage-apis.md
        pagination.md
        sideload.md
        throttling.md
      authentication.md
      final.md
      installation.md
    index.md
  old/
    meetings/
      2015-05-09.md
    api-coverage.md
    future-features.md
    side-loading.md
  public/
    Node_Zendesk_logo.svg
  index.md
examples/
  activities-list.js
  automations-list.js
  check-auth-promise.js
  check-auth-token.js
  check-auth.js
  check-oauth-token.js
  create-oauth-token.js
  delete-many-organizations.js
  endpoint.js
  example-config.js
  groupmemberships-list-group.js
  groupmemberships-list-user.js
  groupmemberships-list.js
  groups-list-assignable.js
  groups-list.js
  macros-active-list.js
  optional-axios-transport.js
  optional-deprecated-request-transport.js
  organization-fields-list.js
  organization-memberships-list.js
  organization-upsert.js
  organizations-delete-bulk.js
  organizations-delete.js
  organizations-list.js
  search-query.js
  suspended-tickets-list.js
  tags-list.js
  ticket-create-promise.js
  ticket-create.js
  ticket-delete.js
  ticket-list-observer.js
  ticket-list.js
  ticketaudits-list.js
  ticketmetric-list.js
  triggers-list.js
  upload-attachment.js
  user-create-many.js
  user-create-promise.js
  user-create.js
  user-fields-list.js
  users-list.js
  users-listbygroup.js
  usertags-list.js
  views-list.js
src/
  clients/
    core/
      accountsettings.js
      activitystream.js
      attachments.js
      automations.js
      brand.js
      customagentroles.js
      dynamiccontent.js
      dynamiccontentvariants.js
      groupmemberships.js
      groups.js
      imports.js
      installations.js
      jobstatuses.js
      locales.js
      macros.js
      oauthclients.js
      oauthtokens.js
      organizationfields.js
      organizationmemberships.js
      organizations.js
      permissiongroups.js
      policies.js
      requests.js
      satisfactionratings.js
      search.js
      sessions.js
      sharingagreement.js
      sideconversations.js
      suspendedtickets.js
      tags.js
      targetfailures.js
      targets.js
      ticketaudits.js
      ticketevents.js
      ticketexport.js
      ticketfields.js
      ticketforms.js
      ticketimport.js
      ticketmetrics.js
      tickets.js
      triggers.js
      userfields.js
      useridentities.js
      users.js
      views.js
      webhooks.js
    helpcenter/
      accesspolicies.js
      articleattachments.js
      articlecomments.js
      articlelabels.js
      articles.js
      categories.js
      index.js
      search.js
      sections.js
      subscriptions.js
      translations.js
      usersegments.js
      votes.js
    services/
      index.js
      links.js
    voice/
      agentactivity.js
      availabilities.js
      currentqueueactivity.js
      greetingcategories.js
      greetings.js
      historicalqueueactivity.js
      index.js
      phonenumbers.js
    authorization-handler.js
    client.js
    custom-event-target.js
    endpoint-checker.js
    helpers.js
    job-monitor.js
    throttle.js
    transporter.js
  constants.js
  index.js
  logger.js
test/
  fixtures/
    authentication_test_correct_oauthtoken.json
    authentication_test_correct_u_token.json
    authentication_test_endpoint_uri.json
    authentication_test_incorrect_sans_token.json
    authentication_test_incorrect_subdomain.json
    authentication_test_incorrect_token.json
    authentication_test_incorrect_u_p.json
    authentication_test_no_creds.json
    authentication_test_user_pass.json
    organizations_many_test_bulk_delete.json
    organizations_many_test_create_multiple.json
    organizations_many_test_update_multiple.json
    organizations_test_autocomplete_organization.json
    organizations_test_create.json
    organizations_test_delete_not_found_organization.json
    organizations_test_delete_organization.json
    organizations_test_list_all.json
    organizations_test_search_organization.json
    organizations_test_show_single.json
    organizations_test_update_organization.json
    pagination_test_cleanup.json
    pagination_test_execute.json
    pagination_test_setup.json
    webhooks_endpoint.json
  authentication.test.js
  endpoint-checker.test.js
  exceptionshandling.test.js
  job-runner.js
  node-zendesk-tests.js
  organizations.many.test.js
  organizations.test.js
  pagination.test.js
  setup.js
  webhooks.test.js
.env.test
.gitignore
.npmignore
.travis.yml
.xo-config.json
CODE_OF_CONDUCT.md
CONTRIBUTING.md
LICENSE
package.json
ReadMe.md
SECURITY.md
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".github/ISSUE_TEMPLATE/bug_report.md">
---
name: Bug report
about: Create a report to help us improve
title: ''
labels: bug
assignees: ''

---

**Describe the Bug**
A clear and concise description of what the bug is.

**Example Code**
```javascript
// Your example code that produces the issue goes here
```

**Expected Behavior**
A clear and concise description of what you expected to happen.

**Actual Behavior**
What actually happened. If applicable, add screenshots or error messages to help explain the problem.

**Environment Information**
- `node-zendesk` version:
- Node.js version:
- Operating System:
- Any other relevant software versions?

**Additional Context**
Add any other context about the problem here.
</file>

<file path=".github/ISSUE_TEMPLATE/feature_request.md">
---
name: Feature request
about: Suggest an idea or enhancement for this project
title: ''
labels: enhancement
assignees: ''

---

**Feature Description**
Briefly describe the feature you'd like to see implemented.

**Example Use Case**
Provide an example or context where this feature would be beneficial.

**Additional Information**
Any other details or ideas related to the feature.
</file>

<file path=".github/workflows/ci-cd.yml">
name: Continuous Integration and Deployment

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  # Combined CI and CD Jobs to reduce redundancy
  build-and-deploy:
    runs-on: ubuntu-latest
    
    # Sets permissions for the GITHUB_TOKEN
    permissions:
      contents: read
      pages: write
      id-token: write

    steps:
      # Checkout code just once
      - uses: actions/checkout@v3

      # Setup Node.js only once
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22
          cache: 'npm'

      # Install dependencies only once
      - name: Install Dependencies
        run: npm ci

      # Lint, Test, Build, and Generate Documentation
      - name: Lint
        run: npm run lint

      - name: Test
        run: npm run test

      - name: Build
        run: npm run build

      - name: Generate Documentation
        run: npm run docs:code
        env:
          NODE_OPTIONS: --max-old-space-size=4096
          NO_COLOR: true

      # Conditional Deployment steps
      - name: Setup Pages
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        uses: actions/configure-pages@v3
      
      - name: Build with VitePress
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        run: npm run docs:deploy-github-pages 

      - name: Upload artifact
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        uses: actions/upload-pages-artifact@v2
        with:
            path: docs/.vitepress/dist 

      - name: Deploy to GitHub Pages
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        uses: actions/deploy-pages@v2
</file>

<file path=".github/workflows/deploy.yml">
# Sample workflow for building and deploying a VitePress site to GitHub Pages
#
name: Deploy VitePress site to Pages

on:
  # Runs on pushes targeting the `main` branch. Change this to `master` if you're
  # using the `master` branch as the default branch.
  # push:
  #  branches: [master]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: pages
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Not needed if lastUpdated is not enabled
      # - uses: pnpm/action-setup@v2 # Uncomment this if you're using pnpm
      # - uses: oven-sh/setup-bun@v1 # Uncomment this if you're using Bun
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 22
          cache: npm # or pnpm / yarn
      - name: Setup Pages
        uses: actions/configure-pages@v3
      - name: Install dependencies
        run: npm ci # or pnpm install / yarn install / bun install
      - name: Build with VitePress
        run: |
          npm run docs:deploy-github-pages
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v2
        with:
          path: docs/.vitepress/dist

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    needs: build
    runs-on: ubuntu-latest
    name: Deploy
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2
</file>

<file path=".github/workflows/release-drafter.yml">
name: Release Drafter

on:
  push:
    branches:
      - main
jobs:
  release-drafter:
    runs-on: ubuntu-latest
    steps:
      - uses: release-drafter/release-drafter@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
</file>

<file path=".github/FUNDING.yml">
# These are supported funding model platforms

github: blakmatrix
open_collective: node-zendesk
</file>

<file path=".github/pull_request_template.md">
## Pull Request Description

Please provide a brief description of your changes.

---

## Related Issue(s)

- [ ] This PR fixes/closes issue #...
- [ ] This is a new feature and does not have an associated issue.

---

## Additional Information

- [ ] This change is a breaking change (may require a major version update)
- [ ] This change is a new feature (non-breaking change which adds functionality)
- [ ] This change improves the code (e.g., refactoring, etc.)
- [ ] This change includes dependency updates

---

## Test Cases

Include any test cases or steps you took to test your changes. If you have added new functionality, please include relevant unit tests.

---

## Documentation

- [ ] I have updated the documentation accordingly.
- [ ] No updates are required.

---

## Checklist

- [ ] I have read the [CONTRIBUTING](./CONTRIBUTING.md) documentation.
- [ ] My code follows the coding standards of this project.
- [ ] All new and existing tests passed.
</file>

<file path=".github/release-drafter.yml">
name-template: 'v$NEXT_PATCH_VERSION 🌈'
tag-template: 'v$NEXT_PATCH_VERSION'
categories:
  - title: '🚀 Features'
    labels:
      - 'feature'
      - 'enhancement'
  - title: '🐛 Bug Fixes'
    labels:
      - 'fix'
      - 'bugfix'
      - 'bug'
  - title: '🧰 Maintenance'
    label: 'chore'
change-template: '- $TITLE @$AUTHOR (#$NUMBER)'
exclude-labels:
  - 'skip-changelog'
template: |
  ## Changes

  $CHANGES
</file>

<file path="docs/.vitepress/config.mts">
import { defineConfig } from 'vitepress'
import { generateSidebar } from "vitepress-sidebar";
⋮----
const getSideBar = (): any =>
⋮----
// https://vitepress.dev/reference/site-config
⋮----
// https://vitepress.dev/reference/default-theme-config
</file>

<file path="docs/guide/Guide/Advanced/custom-headers.md">
# Custom Headers

You can provide additional custom headers for your requests:

```js
const clientOptions = {
  customHeaders: {
    'X-Custom-Header': 'CustomValue'
  }
};
```
</file>

<file path="docs/guide/Guide/Advanced/custom-logging.md">
# Custom Logging

`node-zendesk` provides an option to log to your own logger object. By default, it uses its own `ConsoleLogger`. To use a custom logger:

```js
const clientOptions = {
  username: 'your_username',
  token: 'your_token',
  subdomain: 'your_subdomain',
  logger: yourCustomLogger,
  debug: true
};
const client = zendesk.createClient(clientOptions);
```
</file>

<file path="docs/guide/Guide/Advanced/custom-transport.md">
# Custom Transport Configuration

If you prefer not to use the default `cross-fetch`, you can configure a custom transport. Here's an example using `axios`:

```js
const transportConfigUsingAxios = {
  async transportFn(uri, options) {
    // Convert the options to be compatible with axios
    const requestOptions = {
      ...options,
      url: uri,
      method: options.method || 'GET',
      data: options.body,
    };

    try {
      const response = await axios(requestOptions);
      return response;
    } catch (error) {
      if (error.response) {
        return error.response;
      }
      throw error;
    }
  },

  responseAdapter(response) {
    return {
      json: () => Promise.resolve(response.data),
      status: response.status,
      headers: {
        get: (headerName) => response.headers[headerName.toLowerCase()],
      },
      statusText: response.statusText,
    };
  },
};

const setupClient = (config) => {
  return zd.createClient({
    username: ZENDESK_USERNAME,
    subdomain: ZENDESK_SUBDOMAIN,
    token: ZENDESK_TOKEN,
    transportConfig: transportConfigUsingAxios,
    ...config,
  });
};

async function foo() {
  try {
    const client = setupClient({debug: false});
    const result = await client.users.list();
    console.dir(result);
  } catch (error) {
    console.error(`Failed: ${error.message}`);
  }
}

foo();
```

This example demonstrates how to set up a client using `axios` as the transport mechanism instead of the default `cross-fetch`.
</file>

<file path="docs/guide/Guide/Advanced/debugging.md">
# Debug Logging

Enable or disable debug logging using the `debug` property:

```js
const clientOptions = {
  debug: true
};
```
</file>

<file path="docs/guide/Guide/Advanced/endpoint-override.md">
# Endpoint URI Override

If you have a middleware service or a proxy in front of the Zendesk API, you can override the default `endpointUri`. This can be useful for custom routing or handling of requests. Note that using this override will disable the `subdomain` option.

## Throttling

Enable request throttling by setting the `throttle` flag:

```js
const clientOptions = {
  throttle: true
};
```
</file>

<file path="docs/guide/Guide/Advanced/index.md">
---
order:5
---
</file>

<file path="docs/guide/Guide/Advanced/manage-apis.md">
# API Types

`node-zendesk` supports different types of Zendesk APIs. By default, it uses the 'core' API. If you want to access the helpdesk API, you need to call it explicitly:

```js
client.helpdesk.categories.list();
```

Currently, there are only `helpdesk`, `services`, and `voice` and you can use them all by including the upon client instantiation as follows:

```js
const clientOptions = {
  username: 'your_username',
  token: 'your_token',
  subdomain: 'your_subdomain',
  apiType: ['core', 'helpdesk', 'services', 'voice'],
};
const client = zendesk.createClient(clientOptions);
```
</file>

<file path="docs/guide/Guide/Advanced/pagination.md">
# Pagination

`node-zendesk` optimizes pagination by default, ensuring efficient retrieval of large datasets. However, if you wish to override the default pagination mechanism, you can do so during client instantiation:

```js
const clientOptions = {
  username: 'your_username',
  token: 'your_token',
  subdomain: 'your_subdomain',
  query: { page: { size: 1 } }
};
const client = zendesk.createClient(clientOptions);
```

::: danger **Warning**
Overriding the default pagination mechanism is not recommended. Additionally, cursor-based pagination in the Zendesk API does not support more than 100 items for most cursor-based endpoints.
:::
</file>

<file path="docs/guide/Guide/Advanced/sideload.md">
# Side-Loading

Side-loading allows you to retrieve related records along with the primary records you're querying. To set side-loading, use the `setSideLoad` method:

```js
client.users.setSideLoad(['group', 'role']);
```
</file>

<file path="docs/guide/Guide/Advanced/throttling.md">
# Throttling

Enable request throttling by setting the `throttle` flag:

```js
const clientOptions = {
  throttle: true
};
</file>

<file path="docs/guide/Guide/authentication.md">
---
order: 2
---

# Authentication

To interact with the Zendesk API using `node-zendesk`, you'll need to authenticate your requests. This section will guide you through the different authentication methods supported by the library.

## Basic Authentication

Using a combination of your username, token, and subdomain, you can quickly set up basic authentication:

::: code-group

```js
var zendesk = require('node-zendesk');

var client = zendesk.createClient({
  username:  'your_username',
  token:     'your_token',
  subdomain: 'your_subdomain'
});
```

```ts
import {createClient} from 'node-zendesk'

var client = createClient({
  username:  'your_username',
  token:     'your_token',
  subdomain: 'your_subdomain'
});
```
:::

## OAuth Authentication

If you prefer to use an OAuth token for authentication, set the oauth key to true when creating the client. You can learn more about obtaining OAuth tokens from Zendesk's developer site.

::: code-group
```js
var zendesk = require('node-zendesk');

var client = zendesk.createClient({
  token:     'your_oauth_token',
  oauth: true
});
```

```ts
import {createClient} from 'node-zendesk'

var client = zendesk.createClient({
  token:     'your_oauth_token',
  oauth: true
});
```
:::

## Impersonation

To make API requests on behalf of end users, you can use the impersonation feature. Ensure you've granted the impersonate scope and then pass the end-user's email when creating the client:

::: code-group
```js
var zendesk = require('node-zendesk');

var client = createClient({
  username:  'your_username',
  token:     'your_oauth_token',
  subdomain: 'your_subdomain',
  oauth: true,
  asUser: 'end-user@example.com'
});
```

```ts
import {createClient} from 'node-zendesk'

var client = createClient({
  username:  'your_username',
  token:     'your_oauth_token',
  subdomain: 'your_subdomain',
  oauth: true,
  asUser: 'end-user@example.com'
});
```
:::

With authentication set up, you're ready to start making requests to the Zendesk API. In the following sections, we'll delve into more advanced features and usage patterns of node-zendesk.
</file>

<file path="docs/guide/Guide/final.md">
---
order: 4
---

<script setup>
import GithubButton from 'vue-github-button'
</script>
    
# Facing Issues or Want to Contribute?

🌟 **Love `node-zendesk`?** Please consider [starring the project on GitHub](https://github.com/blakmatrix/node-zendesk)!

<github-button href="https://github.com/blakmatrix/node-zendesk" data-color-scheme="no-preference: light; light: light; dark: dark;" data-icon="octicon-star" data-show-count="true" aria-label="Star blakmatrix/node-zendesk on GitHub">Star</github-button>

 It's a quick way to show your appreciation and helps us reach more users.

`node-zendesk` is a community-driven project, and we highly value your feedback and contributions. If you encounter any challenges, have suggestions for improvements, or want to be a part of its growth, here's how you can participate:

## Reporting Issues

If you stumble upon a bug, experience unexpected behavior, or have questions about `node-zendesk`, please [open an issue](https://github.com/blakmatrix/node-zendesk/issues) on our GitHub repository. When reporting an issue:

- **Be Specific**: Clearly describe the problem you're encountering. Detail the steps to reproduce it, if possible.
- **Include Version Info**: Specify the version of `node-zendesk` you're using, and any other pertinent details about your environment.
- **Screenshots & Logs**: Attach screenshots or logs when relevant to provide a clearer picture of the issue.

## Contributing via Pull Requests

Have you enhanced `node-zendesk` or fixed an existing bug? We'd be thrilled to review your contributions! Here's how you can submit a pull request:

- Fork the [`node-zendesk` repository](https://github.com/blakmatrix/node-zendesk).
- Create a new branch dedicated to your modifications.
- Commit your changes with a comprehensive description of your updates.
- Initiate a pull request against the main branch of the `node-zendesk` repository.

Before finalizing your submission, ensure your code aligns with our coding standards and has undergone testing.

## Support the Project

Your feedback and contributions significantly influence the development and success of `node-zendesk`. If you find this project beneficial and wish to offer further support, consider [sponsoring](https://github.com/blakmatrix/node-zendesk/sponsors) or starring our repository.

We're grateful for your involvement in our community and your efforts to enhance `node-zendesk` for all users!
</file>

<file path="docs/guide/Guide/installation.md">
---
order: 1
---

# Installation

Setting up `node-zendesk` is straightforward. Follow the steps below to get it up and running in your project.

## Installing via npm

To install `node-zendesk`, use the npm command:

```shell
npm install --save node-zendesk
```
This command installs `node-zendesk` as a dependency in your project, making it available for you to import and use.

## TypeScript Support

Starting from version `v5.0.0`, `node-zendesk` automatically generates TypeScript types. This means you no longer need to seek out third-party type definitions from DefinitelyTyped or elsewhere. Just install the library, and you'll have access to accurate and up-to-date TypeScript definitions out of the box.

In the next sections, we'll guide you through basic usage and authentication to get you started with interacting with the Zendesk API.
</file>

<file path="docs/guide/index.md">
# Getting Started with `node-zendesk`

Welcome to the `node-zendesk` guide! This guide is designed to help you seamlessly integrate `node-zendesk` into your projects, ensuring efficient interactions with the Zendesk API using Node.js.

## Prerequisites

- A JavaScript/TypeScript project setup.
- Familiarity with asynchronous programming in JavaScript.

In the subsequent sections, we'll guide you through the installation process, basic usage, advanced features, and more. Dive in to get started!
</file>

<file path="docs/old/meetings/2015-05-09.md">
# node-zendesk WG 2015-05-09

### Present
- Farin
- Xiaochen
- Eriks

### Discussion Notes
- Intro of working group
- Divvy up responsibilities
	- Eriks: WG Doc and API Coverage Roadmap
	- Xiaochen: Assess use of nconf (as it relates to [issue #80](https://github.com/blakmatrix/node-zendesk/issues/80))
	- Farin: Assess Core API coverage

### Next Meeting
~ May 23
</file>

<file path="docs/old/api-coverage.md">
API Coverage Doc
=====================

This document specifies the endpoints that are not yet included in the node-zendesk library. Its contents will change as Zendesk updates its documentation and as PRs are merged.

## Core API

```
PUT /api/v2/dynamic_content/items/{id}/variants/update_many.json
```

## Help Center API



## Zopim API

Client authentication and all APIs need some love.

## Reseller API

All APIs need some love. However, the Reseller API is only accessible to Zendesk partners and resellers. Contact  channel@zendesk.com if you're interested in gaining access.
</file>

<file path="docs/old/future-features.md">
### Future Features

* provide option to disable auto-paging https://github.com/blakmatrix/node-zendesk/issues/46
* better memory managment for users that request all tickets ever https://github.com/blakmatrix/node-zendesk/issues/93
* query sorting https://github.com/blakmatrix/node-zendesk/issues/111
* rate-limiting zendesk API confusion https://github.com/blakmatrix/node-zendesk/issues/126
* expose `.client.request` https://github.com/blakmatrix/node-zendesk/issues/129
* Missing locale support for help-center category list https://github.com/blakmatrix/node-zendesk/issues/149
* Implement `tickets.createMany()` https://github.com/blakmatrix/node-zendesk/issues/153
* Promise support? https://github.com/blakmatrix/node-zendesk/issues/156
* Create user with default password https://github.com/blakmatrix/node-zendesk/issues/157
* Support URL source for file upload
</file>

<file path="docs/old/side-loading.md">
###For Users

#####Supported

client.users.list(function(err, code, res){ console.log(res)}); // This returns result without side-loading

client.users.sideLoad = ['organizations', 'roles'];

client.users.list(function(err, code, res){ console.log(res)}); // This returns result with side-loading

Sample:

`client.users.show` without side-loading

       {
          "user":{
             "id":1472782708,
             "url":"https://node-zendesk.zendesk.com/api/v2/users/1472782708.json",
             "name":"Xiaochen Nie",
             "email":"zjsnxc@gmail.com",
             "created_at":"2015-09-14T05:35:41Z",
             "updated_at":"2015-10-02T06:21:49Z",
             "time_zone":"Arizona",
             "phone":null,
             "photo":null,
             "locale_id":1,
             "locale":"en-US",
             "organization_id":786072488,
             "role":"admin",
             "verified":true,
             "external_id":null,
             "tags":[

             ],
             "alias":null,
             "active":true,
             "shared":false,
             "shared_agent":false,
             "last_login_at":"2015-10-02T06:21:49Z",
             "two_factor_auth_enabled":null,
             "signature":null,
             "details":null,
             "notes":null,
             "custom_role_id":null,
             "moderator":true,
             "ticket_restriction":null,
             "only_private_comments":false,
             "restricted_agent":false,
             "suspended":false,
             "chat_only":false,
             "user_fields":{

             }
          }
       }

`client.users.show` with side-loading

       {
          "user":{
             "id":1472782708,
             "url":"https://node-zendesk.zendesk.com/api/v2/users/1472782708.json",
             "name":"Xiaochen Nie",
             "email":"zjsnxc@gmail.com",
             "created_at":"2015-09-14T05:35:41Z",
             "updated_at":"2015-10-02T06:21:49Z",
             "time_zone":"Arizona",
             "phone":null,
             "photo":null,
             "locale_id":1,
             "locale":"en-US",
             "organization_id":786072488,
             "role":"admin",
             "verified":true,
             "external_id":null,
             "tags":[

             ],
             "alias":null,
             "active":true,
             "shared":false,
             "shared_agent":false,
             "last_login_at":"2015-10-02T06:21:49Z",
             "two_factor_auth_enabled":null,
             "signature":null,
             "details":null,
             "notes":null,
             "custom_role_id":null,
             "moderator":true,
             "ticket_restriction":null,
             "only_private_comments":false,
             "restricted_agent":false,
             "suspended":false,
             "chat_only":false,
             "user_fields":{

             }
          },
          "organizations":[
             {
                "url":"https://node-zendesk.zendesk.com/api/v2/organizations/786072488.json",
                "id":786072488,
                "name":"node-zendesk",
                "shared_tickets":false,
                "shared_comments":false,
                "external_id":null,
                "created_at":"2015-09-14T05:35:41Z",
                "updated_at":"2015-09-14T05:35:53Z",
                "domain_names":[

                ],
                "details":null,
                "notes":null,
                "group_id":null,
                "tags":[

                ],
                "organization_fields":{

                }
             }
          ],
          "roles":[
             {
                "id":null,
                "description":null,
                "created_at":null,
                "updated_at":null,
                "name":"admin",
                "configuration":{
                   "chat_access":true,
                   "manage_business_rules":true,
                   "manage_dynamic_content":true,
                   "manage_extensions_and_channels":true,
                   "manage_facebook":true,
                   "organization_editing":true,
                   "organization_notes_editing":true,
                   "ticket_deletion":true,
                   "ticket_tag_editing":true,
                   "twitter_search_access":true,
                   "forum_access_restricted_content":true,
                   "end_user_list_access":"full",
                   "ticket_access":"all",
                   "ticket_comment_access":"public",
                   "voice_access":true,
                   "moderate_forums":false,
                   "group_access":true,
                   "light_agent":false,
                   "end_user_profile_access":"full",
                   "forum_access":"full",
                   "macro_access":"full",
                   "report_access":"full",
                   "ticket_editing":true,
                   "ticket_merge":true,
                   "view_access":"full",
                   "user_view_access":"full"
                }
             }
          ]
       }

### For Contributors

How to add side-loading support for new endpoint?

There are 5 field used in sideLoadMap, take `users` for example:

        this.sideLoadMap = [
            { field: 'id',              name: 'group',        dataset: 'groups',      all: true },
            { field: 'id',              name: 'identity',     dataset: 'identities',  array: true,    dataKey: 'user_id' },
            { field: 'custom_role_id',  name: 'role',         dataset: 'roles'},
            { field: 'organization_id', name: 'organization', dataset: 'organizations'}
          ];

1. If the response just handle the side-loading result as a filed of each record, then no `this.sideLoadMap` item is required. For example, endpoint `users` has a side-loading support for `abilities`, but it is not specified in `this.sideLoadMap`.

2. If the response attaches side-loading result at the end, then:

   2.1 If all the side-loading result need to be set into record, then use `all`. For example:

      `{ field: 'id', name: 'group', dataset: 'groups', all: true }`

   means to add side-loading result `groups` into all the records that has field `id`. In the record, the new added side-loading filed's name is `group`.

   2.2 If the side-loading result need to correlate with the records, then

    2.2.1 If the side-loading result is an array, specify `array: true`

    2.2.2 Else set side-loading map item like

         `{ field: 'organization_id', name: 'organization', dataset: 'organizations'}`

    It will look into `organizations` and correlate field `id` (the default because we do not specify `dataKey`) with record field `organization_id` and add corresponding field `organization` for the record.

    2.2.3 If the side-loading result does not use the default field `id` for correlation, then we need to specify `dataKey`. Then the side-loading items that match `sideLoadingItem[dataKey] == record[field]` will be added.
</file>

<file path="docs/public/Node_Zendesk_logo.svg">
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<svg
   xmlns:osb="http://www.openswatchbook.org/uri/2009/osb"
   xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmlns:cc="http://creativecommons.org/ns#"
   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
   xmlns:svg="http://www.w3.org/2000/svg"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:xlink="http://www.w3.org/1999/xlink"
   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
   width="282.58737"
   height="153.36"
   fill="#03363d"
   version="1.1"
   id="svg4"
   sodipodi:docname="Node_Zendesk_logo.svg"
   inkscape:version="1.0.1 (3bc2e813f5, 2020-09-07)">
  <metadata
     id="metadata10">
    <rdf:RDF>
      <cc:Work
         rdf:about="">
        <dc:format>image/svg+xml</dc:format>
        <dc:type
           rdf:resource="http://purl.org/dc/dcmitype/StillImage" />
        <dc:title></dc:title>
      </cc:Work>
    </rdf:RDF>
  </metadata>
  <defs
     id="defs8">
    <linearGradient
       id="linearGradient2854"
       osb:paint="solid">
      <stop
         style="stop-color:#00b50d;stop-opacity:1;"
         offset="0"
         id="stop2852" />
    </linearGradient>
    <linearGradient
       inkscape:collect="always"
       xlink:href="#linearGradient2854"
       id="linearGradient2856"
       x1="251.12692"
       y1="73.995331"
       x2="361.60468"
       y2="73.995331"
       gradientUnits="userSpaceOnUse" />
    <clipPath
       clipPathUnits="userSpaceOnUse"
       id="clipPath848">
      <rect
         style="stroke-width:0.244"
         id="rect850"
         width="362.92868"
         height="187.24634"
         x="-0.0013194986"
         y="-0.096042767" />
    </clipPath>
    <clipPath
       clipPathUnits="userSpaceOnUse"
       id="clipPath867">
      <rect
         style="stroke-width:0.244"
         id="rect869"
         width="282.61887"
         height="187.12366"
         x="80.339996"
         y="0" />
    </clipPath>
    <clipPath
       clipPathUnits="userSpaceOnUse"
       id="clipPath888">
      <rect
         style="stroke-width:0.244"
         id="rect890"
         width="286.57745"
         height="155.25352"
         x="80.339996"
         y="-1.89352" />
    </clipPath>
  </defs>
  <sodipodi:namedview
     pagecolor="#ffffff"
     bordercolor="#666666"
     borderopacity="1"
     objecttolerance="10"
     gridtolerance="10"
     guidetolerance="10"
     inkscape:pageopacity="0"
     inkscape:pageshadow="2"
     inkscape:window-width="1990"
     inkscape:window-height="1120"
     id="namedview6"
     showgrid="false"
     inkscape:zoom="3.0991736"
     inkscape:cx="133.12"
     inkscape:cy="81.586977"
     inkscape:window-x="541"
     inkscape:window-y="91"
     inkscape:window-maximized="0"
     inkscape:current-layer="svg4"
     inkscape:document-rotation="0"
     fit-margin-top="0"
     fit-margin-left="0"
     fit-margin-right="0"
     fit-margin-bottom="0" />
  <g
     id="g882"
     clip-path="url(#clipPath888)"
     transform="translate(-80.339996)">
    <g
       id="g875">
      <g
         id="g857"
         clip-path="url(#clipPath867)">
        <g
           id="g844"
           clip-path="url(#clipPath848)">
          <path
             d="M 173.82,40.5 V 153.36 H 80.34 Z m 0,-40.5 A 46.74,46.74 0 1 1 80.34,0 Z m 15.4,153.37 a 46.74,46.74 0 0 1 93.48,0 z m 0,-40.5 V 0 h 93.5 l -93.5,112.86 z m 52.28,137.06 a 18.22,18.22 0 0 0 12.95,-5 l 6.42,6.93 c -4.24,4.36 -10.12,7.6 -19.26,7.6 -15.67,0 -25.8,-10.4 -25.8,-24.46 a 24,24 0 0 1 24.37,-24.47 c 15.56,0 24.38,11.84 23.6,28.26 H 227 c 1.3,6.82 6.1,11.17 14.47,11.17 m 11.2,-19 c -1,-6.37 -4.8,-11.06 -12.4,-11.06 -7.07,0 -12,4 -13.27,11.06 h 25.68 z M 0,249.4 28.3,220.64 H 0.67 v -9.02 h 40.76 v 9.2 l -28.3,28.75 h 28.7 v 9.03 H 0 Z m 73.6,0.52 a 18.22,18.22 0 0 0 12.95,-5 l 6.42,6.93 c -4.24,4.36 -10.12,7.6 -19.26,7.6 -15.67,0 -25.8,-10.4 -25.8,-24.46 a 24,24 0 0 1 24.37,-24.47 c 15.56,0 24.38,11.84 23.6,28.26 H 59.12 c 1.3,6.82 6.1,11.17 14.47,11.17 m 11.2,-19 c -1,-6.37 -4.8,-11.06 -12.4,-11.06 -7.07,0 -12,4 -13.27,11.06 H 84.8 Z m 72.23,4.03 c 0,-15 11.23,-24.44 23.6,-24.44 a 20.34,20.34 0 0 1 15.67,7.05 v -27.72 h 10 v 68.6 h -10 V 252 a 20.1,20.1 0 0 1 -15.76,7.42 c -12,0 -23.5,-9.5 -23.5,-24.43 m 39.82,-0.1 a 14.92,14.92 0 1 0 -14.91,15.32 c 8.6,0 14.9,-6.86 14.9,-15.32 m 73.48,13.6 9.06,-4.7 a 13.44,13.44 0 0 0 12.08,6.86 c 5.66,0 8.6,-2.9 8.6,-6.2 0,-3.76 -5.47,-4.6 -11.42,-5.83 -8,-1.7 -16.33,-4.33 -16.33,-14 0,-7.43 7.07,-14.3 18.2,-14.2 8.77,0 15.3,3.48 19,9.1 l -8.4,4.6 a 12.19,12.19 0 0 0 -10.57,-5.36 c -5.38,0 -8.12,2.63 -8.12,5.64 0,3.38 4.34,4.32 11.14,5.83 7.74,1.7 16.5,4.23 16.5,14 0,6.48 -5.66,15.22 -19.06,15.13 -9.8,0 -16.7,-3.95 -20.67,-10.9 m 66.9,-10.87 -7.93,8.65 v 12.2 h -10 v -68.6 h 10 v 44.93 l 21.23,-23.3 h 12.18 l -18.4,20.1 18.88,26.88 H 351.87 L 337.24,237.59 Z M 126.8,210.53 c -11.9,0 -21.85,7.7 -21.85,20.5 v 27.45 h 10.2 V 232.3 c 0,-7.7 4.43,-12.32 12,-12.32 7.57,0 11.33,4.6 11.33,12.32 v 26.18 h 10.14 v -27.45 c 0,-12.78 -10,-20.5 -21.85,-20.5"
             id="path2" />
          <path
             d="m 306.34108,134.70522 c -1.65667,0 -3.33807,-0.43368 -4.79692,-1.25287 l -15.25623,-8.79417 c -2.27483,-1.25287 -1.16214,-1.68655 -0.42035,-1.92749 3.04136,-1.03602 3.65951,-1.25286 6.89868,-3.05989 0.34618,-0.19274 0.79124,-0.12045 1.13743,0.0963 l 11.72033,6.77031 c 0.42035,0.24093 1.01378,0.24093 1.40941,0 l 45.66974,-25.6838 c 0.42035,-0.24094 0.69235,-0.7228 0.69235,-1.204688 V 48.281363 c 0,-0.505977 -0.272,-0.963749 -0.71708,-1.228776 L 307.03343,21.392945 c -0.42036,-0.240936 -0.98906,-0.240936 -1.40941,0 l -45.6203,25.683798 c -0.44507,0.240938 -0.71707,0.722799 -0.71707,1.228777 v 51.343478 c 0,0.481892 0.272,0.963752 0.71707,1.180602 l 12.51159,7.03533 c 6.79976,3.30082 10.9538,-0.57825 10.9538,-4.5055 V 52.666467 c 0,-0.722812 0.59344,-1.276969 1.33524,-1.276969 h 5.78599 c 0.71706,0 1.33523,0.554157 1.33523,1.276969 v 50.717053 c 0,8.81827 -4.9453,13.87792 -13.52538,13.87792 -2.64573,0 -4.72275,0 -10.50874,-2.79486 l -11.9676,-6.72211 c -2.96717,-1.66246 -4.79693,-4.77054 -4.79693,-8.119562 V 48.28143 c 0,-3.32493 1.82976,-6.457101 4.79693,-8.119559 l 45.62031,-25.683795 c 2.89298,-1.590179 6.72558,-1.590179 9.59385,0 l 45.66976,25.707885 c 2.96717,1.662458 4.79692,4.770539 4.79692,8.119559 v 51.343478 c 0,3.324932 -1.82975,6.433012 -4.79692,8.119562 l -45.66976,25.68379 c -1.45885,0.81919 -3.11553,1.25287 -4.79693,1.25287 z m 36.86714,-50.620679 c 0,-9.613362 -6.67614,-12.167287 -20.69604,-13.974296 -14.19298,-1.831126 -15.62712,-2.770773 -15.62712,-5.999316 0,-2.674387 1.2116,-6.240254 11.72034,-6.240254 9.37132,0 12.83303,1.975678 14.26716,8.143649 0.12361,0.578247 0.66761,1.011929 1.28577,1.011929 h 5.93436 c 0.37089,0 0.71705,-0.144552 0.96433,-0.409592 0.24726,-0.265028 0.37089,-0.626427 0.34616,-0.987839 C 340.4883,55.003531 333.24345,50.06435 318.6054,50.06435 c -13.03084,0 -20.79494,5.348773 -20.79494,14.335695 0,9.733824 7.73938,12.432301 20.22623,13.636987 14.9595,1.421521 16.12164,3.565854 16.12164,6.432998 0,4.963284 -4.10459,7.083527 -13.72318,7.083527 -12.09123,0 -14.73696,-2.963517 -15.62712,-8.818268 -0.0988,-0.626439 -0.64287,-1.084211 -1.31049,-1.084211 h -5.90962 c -0.7418,0 -1.31051,0.578247 -1.31051,1.276956 0,7.493119 4.17878,16.431847 24.18248,16.431847 14.44024,-0.02414 22.74833,-5.589722 22.74833,-15.27534 z"
             id="path60"
             style="fill:url(#linearGradient2856);fill-opacity:1;stroke-width:0.244;stroke-miterlimit:4;stroke-dasharray:none" />
        </g>
      </g>
    </g>
  </g>
</svg>
</file>

<file path="docs/index.md">
---
# https://vitepress.dev/reference/default-theme-home-page
layout: home

hero:
  name: "node-zendesk"
  text: "A Zendesk API client wrapper"
  tagline: <strong>Power Up Zendesk:</strong> A robust wrapper for seamless API interactions.
  actions:
    - theme: brand
      text: Guide
      link: /guide/
    - theme: alt
      text: API Examples
      link: /code/README
  image:
    src: /Node_Zendesk_logo.svg
    alt: node-zendesk logo

features:
  - icon: 🌍
    title: Seamless Integration with Zendesk
    details: Elevate your apps with <code>node-zendesk</code>. Seamlessly and efficiently connect your applications with Zendesk's vast suite of customer service and engagement products. Our library is purpose-built to tap into Zendesk's APIs without a hiccup.
    link: "https://developer.zendesk.com/rest_api/docs/core/introduction"
    linkText: "Zendesk's documentation"
  - icon: ⚡️
    title: Modern and Lightweight
    details: Built with the modern developer in mind, <code>node-zendesk</code> is lightweight and optimized for performance. Experience rapid setup and minimal overhead, with top-notch support for both JavaScript and TypeScript.
  - icon: <svg xmlns="http://www.w3.org/2000/svg" viewBox="-178.3 659.6 1000 700"><path fill="#E271A5" d="M-16.2 828L124 1004l140.2-176H277l-146.8 184.2L273 1191.3h-12.8L124 1020.4l-136.1 170.9h-13.3l142.8-179.1L-29.5 828h13.3z"/><path fill="#64D8C7" d="M334.8 1009.6c0-96.7 73.7-184.2 169.4-184.2 100.3 0 168.9 93.6 168.9 184.2 0 97.2-73.7 182.7-168.9 184.2-100.3-3-169.4-91-169.4-184.2zm169.4 174c94.7 0 158.6-88.5 158.6-174 0-90.6-68.6-174-158.6-174-94.7 0-159.1 88-159.1 174 2.5 90.6 67 174 159.1 174z"/><path fill="#D5EFEA" d="M533.5 970.6c6.8 0 14.1 4.8 18.1 11.9 4.5 7.9 4.5 17.5-.2 27-8.4 17.1-39.6 34.4-47.6 38.6-8-4.2-39.2-21.5-47.6-38.6-4.7-9.5-4.7-19.1-.2-27 4.1-7.1 11.4-11.9 18.1-11.9 15 0 26 14.7 26.1 14.9l3.5 4.8 3.5-4.8c.3-.2 11.2-14.9 26.3-14.9m0-4.7c-17.5 0-29.6 16.7-29.6 16.7s-12.2-16.7-29.7-16.7c-15.8 0-34.3 20.6-21.9 45.9 10.4 21.2 51.5 41.7 51.5 41.7s41.1-20.5 51.5-41.7c12.5-25.3-6-45.9-21.8-45.9z"><animate attributeName="opacity" values="0.3;1;0.3" dur="2s" repeatCount="indefinite"/></path></svg>
    title: "Extensive Linting with <code>xo</code>"
    details: "No more bikeshedding about code styles. <code>node-zendesk</code> adopts the <code>xo</code> package, ensuring code is always in its best shape. Benefit from built-in linting that covers almost all coding scenarios and integrates seamlessly with many editors."
    link: https://github.com/xojs/xo/tree/main#editor-plugins
    linkText: "Learn about xo's editor plugins"
  - icon: 🤝
    title: "Active Community and Transparent Development"
    details: "With <code>node-zendesk</code>, you're never coding alone. Join an active community of developers, get swift answers to queries, and enjoy the benefits of open and transparent development. We value every contributor, and our maintenance is a labor of love."
    link: https://github.com/blakmatrix/node-zendesk/blob/master/CONTRIBUTING.md
    linkText: "Contribute to node-zendesk"


---
<style>
:root {
  --vp-home-hero-name-color: transparent;
  --vp-home-hero-name-background: -webkit-linear-gradient(120deg, #bd34fe 30%, #41d1ff);

  --vp-home-hero-image-background-image: linear-gradient(-45deg, #bd34fe 50%, #47caff 50%);
  --vp-home-hero-image-filter: blur(40px);
}

@media (min-width: 640px) {
  :root {
    --vp-home-hero-image-filter: blur(56px);
  }
}

@media (min-width: 960px) {
  :root {
    --vp-home-hero-image-filter: blur(72px);
  }
}
</style>
</file>

<file path="examples/activities-list.js">
const client = zd.createClient({
⋮----
client.activitystream.list(function (error, request, result) {
⋮----
console.log(error);
⋮----
console.log(JSON.stringify(result));
console.log('Total activities: ' + result.length);
</file>

<file path="examples/automations-list.js">
const client = zd.createClient({
⋮----
client.automations.list(function (error, request, result) {
⋮----
console.log(error);
⋮----
console.log(JSON.stringify(result));
console.log('Total automations: ' + result.length);
</file>

<file path="examples/check-auth-promise.js">
const client = zd.createClient({
⋮----
.auth()
.then(function (response) {
⋮----
console.dir(result.verified);
⋮----
.catch(function (error) {
console.log(error);
</file>

<file path="examples/check-auth-token.js">
const client = zd.createClient({
⋮----
client.users.auth(function (error, request, result) {
⋮----
console.log(error);
⋮----
console.log(JSON.stringify(result.verified, null, 2, true));
</file>

<file path="examples/check-auth.js">
const client = zd.createClient({
⋮----
client.users.auth(function (error, request, result) {
⋮----
// Console.log(err);
⋮----
console.log(JSON.stringify(result.verified, null, 2, true));
</file>

<file path="examples/check-oauth-token.js">
dotenv.config();
⋮----
const setupClient = () => {
return zd.createClient({
⋮----
const client = setupClient();
⋮----
/**
 * Checks the OAuth authentication for the Zendesk client and logs the verification status.
 * @returns {Promise<void>} A promise that resolves when the check is complete.
 */
async function checkOAuth() {
⋮----
const {result: user} = await client.users.auth();
console.log(user.verified);
⋮----
console.error(`Failed to check OAuth: ${error.message}`);
⋮----
checkOAuth();
</file>

<file path="examples/create-oauth-token.js">
// Load environment variables from .env file
dotenv.config();
⋮----
/**
 * Set up and return a Zendesk client with the given configuration.
 * @param {object} config - Additional configuration for the Zendesk client.
 * @returns {object} Zendesk client instance.
 */
const setupClient = (config) => {
return zd.createClient({
⋮----
/**
 * Retrieves the numeric ID of an OAuth client based on its unique identifier.
 * @param {string} identifier - The unique identifier of the OAuth client.
 * @returns {Promise<number|null>} The numeric ID of the OAuth client or null if not found.
 * @throws {Error} If there's an error in retrieving the OAuth client list.
 */
async function getClientId(identifier) {
⋮----
const client = setupClient({debug: false});
const result = await client.oauthclients.list();
const oauthClient = result.find((c) => c.identifier === identifier);
⋮----
console.error('Error retrieving OAuth client ID:', error.message);
⋮----
/**
 * Creates a read-only OAuth token for accessing users and tickets.
 * This function first retrieves the OAuth client ID using its unique identifier,
 * and then uses this ID to create a token with the specified scopes.
 * @throws {Error} If the OAuth client ID is not found or if there's an error in creating the OAuth token.
 */
async function createReadOnlyOAuthToken() {
⋮----
const oauthClientId = await getClientId(
⋮----
throw new Error('OAuth client ID not found for the given identifier.');
⋮----
// Create an OAuth token with read-only access to users and tickets
const {result} = await client.oauthtokens.create({
⋮----
client_id: oauthClientId, // Numeric OAuth client ID
scopes: ['users:read', 'tickets:read'], // Scopes for read-only access
⋮----
console.log('OAuth Token Created:', result);
⋮----
console.error('Error creating OAuth token:', error.message);
⋮----
createReadOnlyOAuthToken();
</file>

<file path="examples/delete-many-organizations.js">
/* eslint-disable no-await-in-loop */
⋮----
dotenv.config();
⋮----
const setupClient = (config) => {
return zd.createClient({
⋮----
// Placeholder organization ID for development/testing.
// IMPORTANT: Replace with a valid organization ID before running in production.
⋮----
/**
 *
 */
async function organizationsDelete() {
⋮----
const client = setupClient({debug: false});
const allOrgs = await client.organizations.list();
⋮----
if (element.name.startsWith('testOrganization')) {
collector.push(element);
⋮----
const ids = collector.map(function (i) {
⋮----
await client.organizations.bulkDelete(ids);
⋮----
console.error(`Failed to delete organization: ${error.message}`);
⋮----
organizationsDelete();
</file>

<file path="examples/endpoint.js">
dotenv.config();
⋮----
const setupClient = (config) => {
return zd.createClient({
⋮----
/**
 *
 */
async function usersList() {
⋮----
const client = setupClient({debug: false});
const result = await client.users.list();
console.log(
JSON.stringify(
result.map(function (user) {
⋮----
); // Gets the first page
console.log('Total Users: ' + result.length);
⋮----
console.error(`Failed to get list of users: ${error.message}`);
⋮----
usersList();
</file>

<file path="examples/example-config.js">

</file>

<file path="examples/groupmemberships-list-group.js">
const client = zd.createClient({
⋮----
/**
 *
 */
async function listGroupMemberships() {
⋮----
const groups = await client.groups.list();
⋮----
console.log('No groups found.');
⋮----
const memberships = await client.groupmemberships.listByGroup(group.id);
console.log(JSON.stringify(memberships));
⋮----
console.error('Error fetching group memberships:', error);
⋮----
listGroupMemberships();
</file>

<file path="examples/groupmemberships-list-user.js">
const client = zd.createClient({
⋮----
/**
 *
 */
async function listUserMemberships() {
⋮----
const users = await client.users.list();
⋮----
console.log('No users found.');
⋮----
const memberships = await client.groupmemberships.listByUser(user.id);
console.log(JSON.stringify(memberships));
⋮----
console.error('Error fetching user memberships:', error);
⋮----
listUserMemberships();
</file>

<file path="examples/groupmemberships-list.js">
const client = zd.createClient({
⋮----
client.groupmemberships.list(function (error, request, result) {
⋮----
console.log(error);
⋮----
console.log(JSON.stringify(result));
console.log('Total Memberships: ' + result.length);
</file>

<file path="examples/groups-list-assignable.js">
const client = zd.createClient({
⋮----
client.groups.assignable(function (error, request, result) {
⋮----
console.log(error);
⋮----
console.log(
JSON.stringify(
result.map(function (grp) {
⋮----
); // Gets the first page
console.log('Total Groups: ' + result.length);
</file>

<file path="examples/groups-list.js">
const client = zd.createClient({
⋮----
client.groups.list(function (error, request, result) {
⋮----
console.log(error);
⋮----
console.log(
JSON.stringify(
result.map(function (grp) {
⋮----
); // Gets the first page
console.log('Total Groups: ' + result.length);
</file>

<file path="examples/macros-active-list.js">
const client = zd.createClient({
⋮----
client.macros.listByParams(['?active=true'], function (error, request, result) {
⋮----
console.log(error);
⋮----
console.log(JSON.stringify(result));
console.log('Total Groups: ' + result.length);
</file>

<file path="examples/optional-axios-transport.js">
dotenv.config();
⋮----
async transportFn(uri, options) {
// Convert the options to be compatible with axios
⋮----
method: options.method || 'GET', // Axios uses 'method', not just 'GET' or 'POST' as direct options
data: options.body, // Axios uses 'data' instead of 'body'
⋮----
const response = await axios(requestOptions);
⋮----
// If axios throws an error, it usually encapsulates the actual server response within error.response.
// This is to ensure that even for error HTTP statuses, the response can be adapted consistently.
⋮----
throw error; // If there's no error.response, then throw the error as is.
⋮----
responseAdapter(response) {
⋮----
json: () => Promise.resolve(response.data),
⋮----
get: (headerName) => response.headers[headerName.toLowerCase()],
⋮----
const setupClient = (config) => {
return zd.createClient({
⋮----
/**
 *
 */
async function foo() {
⋮----
const client = setupClient({debug: false});
const result = await client.users.list();
⋮----
console.dir(result);
⋮----
console.error(`Failed: ${error.message}`);
⋮----
foo();
</file>

<file path="examples/optional-deprecated-request-transport.js">
dotenv.config();
⋮----
transportFn(uri, options) {
// Convert the options to be compatible with the request library
⋮----
return new Promise((resolve, reject) => {
request(requestOptions, (error, response, body) => {
⋮----
reject(error);
⋮----
// Include the body in the response object for the adapter to handle
⋮----
resolve(response);
⋮----
responseAdapter(response) {
⋮----
json() {
⋮----
return Promise.resolve(JSON.parse(response.body));
⋮----
return Promise.reject(
new Error(`Failed to parse JSON: ${error.message}`),
⋮----
get: (headerName) => response.headers[headerName.toLowerCase()],
⋮----
const setupClient = (config) => {
return zd.createClient({
⋮----
/**
 *
 */
async function foo() {
⋮----
const client = setupClient({debug: false});
const result = await client.users.list();
⋮----
console.dir(result);
⋮----
console.error(`Failed: ${error.message}`);
⋮----
foo();
</file>

<file path="examples/organization-fields-list.js">
const client = zd.createClient({
⋮----
client.organizationfields.list(function (error, statusList, body) {
⋮----
console.log(error);
⋮----
console.log(JSON.stringify(body, null, 2, true));
</file>

<file path="examples/organization-memberships-list.js">
const client = zd.createClient({
⋮----
client.organizationmemberships.list(function (error, request, result) {
⋮----
console.log(error);
⋮----
console.log(JSON.stringify(result)); // Gets the first page
console.log('Total memberships: ' + result.length);
</file>

<file path="examples/organization-upsert.js">
const client = zd.createClient({
⋮----
client.organizations.upsert(organization, function (error, request, result) {
if (error) return handleError(error);
console.log(JSON.stringify(result, null, 2, true));
⋮----
/**
 * Handles errors by logging them and exiting the process.
 * @param {Error} error - The error object to be handled.
 */
function handleError(error) {
console.log(error);
process.exit(-1);
</file>

<file path="examples/organizations-delete-bulk.js">
/* eslint-disable no-await-in-loop */
⋮----
dotenv.config();
⋮----
/**
 * Initializes and returns a Zendesk client.
 * @returns {object} Zendesk client instance.
 */
function initializeZendeskClient() {
return zd.createClient({
⋮----
/**
 * Filters and returns organization IDs that start with "test" or "Test".
 * @param {Array} organizations - List of organizations.
 * @returns {Array} List of organization IDs.
 */
function getTestOrganizationIds(organizations) {
⋮----
.filter((org) => org.name.startsWith('test') || org.name.startsWith('Test'))
.map((org) => org.id);
⋮----
/**
 * Splits an array into chunks of a specified size.
 * @param {Array} array - The array to split.
 * @param {number} chunkSize - The size of each chunk.
 * @returns {Array} An array of chunks.
 */
function chunkArray(array, chunkSize) {
⋮----
chunks.push(array.slice(i, i + chunkSize));
⋮----
/**
 * Monitors the completion of a job.
 * @param {object} client - The Zendesk client instance.
 * @param {string} jobID - The ID of the job to monitor.
 * @returns {Promise<void>} Resolves when the job is complete.
 */
async function monitorJobCompletion(client, jobID) {
⋮----
await client.jobstatuses.watch(jobID, 1000, 30);
⋮----
console.error('Error watching job status:', error);
⋮----
/**
 * Performs a bulk deletion of test organizations.
 * @returns {Promise<void>} Resolves when all organizations are deleted.
 */
async function bulkDeleteTestOrganizations() {
const client = initializeZendeskClient();
⋮----
const organizations = await client.organizations.list();
const orgIdsToDelete = getTestOrganizationIds(organizations);
const chunks = chunkArray(orgIdsToDelete, 30);
⋮----
const {result} = await client.organizations.bulkDelete(chunk);
⋮----
await monitorJobCompletion(client, job_status.id);
⋮----
console.log(
⋮----
console.dir(job_status);
⋮----
console.log('All organizations deleted successfully.');
⋮----
if (error.message.includes('TooManyJobs')) {
console.error(
⋮----
bulkDeleteTestOrganizations();
</file>

<file path="examples/organizations-delete.js">
dotenv.config();
⋮----
const setupClient = (config) => {
return zd.createClient({
⋮----
// Placeholder organization ID for development/testing.
// IMPORTANT: Replace with a valid organization ID before running in production.
⋮----
/**
 *
 */
async function organizationsDelete() {
⋮----
const client = setupClient({debug: false});
const {result} = await client.organizations.delete(organizationID);
⋮----
console.log('Organization deleted');
⋮----
console.dir(result);
⋮----
console.error(`Failed to delete organization: ${error.message}`);
⋮----
organizationsDelete();
</file>

<file path="examples/organizations-list.js">
const client = zd.createClient({
⋮----
client.organizations.list(function (error, request, result) {
⋮----
console.log(error);
⋮----
console.log(
JSON.stringify(
result.map(function (org) {
⋮----
); // Gets the first page
console.log('Total Orgs: ' + result.length);
</file>

<file path="examples/search-query.js">
const client = zd.createClient({
⋮----
client.search.query(query, function (error, request, result) {
⋮----
console.log(error);
⋮----
console.log(JSON.stringify(result, null, 2, true));
</file>

<file path="examples/suspended-tickets-list.js">
const client = zd.createClient({
⋮----
client.suspendedtickets.list(function (error, request, result) {
⋮----
console.log(error);
⋮----
console.log(JSON.stringify(result));
console.log('Total suspended: ' + result.length);
</file>

<file path="examples/tags-list.js">
const client = zd.createClient({
⋮----
client.tags.list(function (error, request, result) {
⋮----
console.log(error);
⋮----
console.log(JSON.stringify(result));
console.log('Total objects: ' + result.length);
</file>

<file path="examples/ticket-create-promise.js">
const client = zd.createClient({
⋮----
const result = await client.tickets.create(ticket);
console.log(JSON.stringify(result, null, 2, true));
⋮----
handleError(error);
⋮----
/**
 * Handles errors by logging them and exiting the process.
 * @param {Error} error - The error object to be handled.
 */
function handleError(error) {
console.log(error);
process.exit(-1);
</file>

<file path="examples/ticket-create.js">
const client = zd.createClient({
⋮----
client.tickets.create(ticket, function (error, request, result) {
if (error) return handleError(error);
console.log(JSON.stringify(result, null, 2, true));
⋮----
/**
 * Handles errors by logging them and exiting the process.
 * @param {Error} error - The error object to be handled.
 */
function handleError(error) {
console.log(error);
process.exit(-1);
</file>

<file path="examples/ticket-delete.js">
const client = zd.createClient({
⋮----
client.tickets.delete(ticketId, function (error) {
if (error) return handleError(error);
⋮----
/**
 * Handles errors by logging them and exiting the process.
 * @param {Error} error - The error object to be handled.
 */
function handleError(error) {
console.log(error);
process.exit(-1);
</file>

<file path="examples/ticket-list-observer.js">
const client = zd.createClient({
⋮----
// eslint-disable-next-line max-params
next(status, body, response, result, nextPage) {
console.log(JSON.stringify(body, null, 2, true));
console.log('Next page:', nextPage);
⋮----
complete(statusList, body /* , responseList, resultList */) {
console.log('Pagination complete.');
console.log(body); // Will display all tickets
⋮----
client.tickets.list(observer);
</file>

<file path="examples/ticket-list.js">
const client = zd.createClient({
⋮----
client.tickets.list(
function (error, statusList, body /* , responseList, resultList */) {
⋮----
console.log(error);
⋮----
console.log(JSON.stringify(body, null, 2, true)); // Will display all tickets
</file>

<file path="examples/ticketaudits-list.js">
const client = zd.createClient({
⋮----
/**
 *
 */
async function listTicketAudits() {
⋮----
const tickets = await client.tickets.list();
⋮----
console.log('No tickets found.');
⋮----
const audits = await client.ticketaudits.list(ticket.id);
console.log(JSON.stringify(audits));
⋮----
console.error('Error fetching ticket audits:', error);
⋮----
listTicketAudits();
</file>

<file path="examples/ticketmetric-list.js">
const client = zd.createClient({
⋮----
client.ticketmetrics.listAll(
function (error, statusList, body /* , responseList, resultList */) {
⋮----
console.log(error);
⋮----
console.log(JSON.stringify(body));
</file>

<file path="examples/triggers-list.js">
const client = zd.createClient({
⋮----
client.triggers.list(
function (error, statusList, body /* , responseList, resultList */) {
⋮----
console.log(error);
⋮----
console.log(JSON.stringify(body)); // Will display all triggers
</file>

<file path="examples/upload-attachment.js">
const ATTACHMENT_PATH = path.resolve('./examples/busey.gif');
⋮----
/**
 * Initializes and returns a Zendesk client.
 * @returns {object} Zendesk client instance.
 */
function getZendeskConfig() {
⋮----
const client = zd.createClient(getZendeskConfig());
⋮----
/**
 * Uploads an attachment to Zendesk.
 * @param {string} filePath - The path to the file to be uploaded.
 * @param {string} fileName - The name of the file to be uploaded.
 */
async function uploadAttachment(filePath, fileName) {
⋮----
const result = await client.attachments.upload(filePath, {
⋮----
console.log(JSON.stringify(result, null, 2));
⋮----
console.error(`Failed to upload attachment: ${error.message}`);
⋮----
uploadAttachment(ATTACHMENT_PATH, FILENAME);
</file>

<file path="examples/user-create-many.js">
const client = zd.createClient({
⋮----
client.users.createMany(users, function (error, request, result) {
⋮----
console.log(error);
⋮----
client.jobstatuses.watch(
⋮----
console.log(JSON.stringify(result, null, 2, true));
</file>

<file path="examples/user-create-promise.js">
const client = zd.createClient({
⋮----
const result = await client.users.create(user);
console.log(JSON.stringify(result, null, 2, true));
⋮----
console.log(error);
</file>

<file path="examples/user-create.js">
const client = zd.createClient({
⋮----
client.users.create(user, function (error, request, result) {
⋮----
console.log(error);
⋮----
console.log(JSON.stringify(result, null, 2, true));
</file>

<file path="examples/user-fields-list.js">
const client = zd.createClient({
⋮----
client.userfields.list(function (error, request, result) {
⋮----
console.log(error);
⋮----
console.log(
JSON.stringify(
result.map(function (userField) {
⋮----
); // Gets the first page
console.log('Total User Fields: ' + result.length);
</file>

<file path="examples/users-list.js">
dotenv.config();
⋮----
const setupClient = (config) => {
return zd.createClient({
⋮----
/**
 *
 */
async function usersList() {
⋮----
const client = setupClient({debug: false});
const result = await client.users.list();
console.log(
JSON.stringify(
result.map(function (user) {
⋮----
); // Gets the first page
console.log('Total Users: ' + result.length);
⋮----
console.error(`Failed to get list of users: ${error.message}`);
⋮----
usersList();
</file>

<file path="examples/users-listbygroup.js">
const client = zd.createClient({
⋮----
/**
 *
 */
async function listUsersByFirstGroup() {
⋮----
const groups = await client.groups.list();
⋮----
console.log('No groups found.');
⋮----
const users = await client.users.listByGroup(firstGroup.id);
console.log(users);
⋮----
console.error(error);
⋮----
listUsersByFirstGroup();
</file>

<file path="examples/usertags-list.js">
const client = zd.createClient({
⋮----
/**
 *
 */
async function listTagsForFirstUser() {
⋮----
const users = await client.users.list();
⋮----
console.log('No users found.');
⋮----
const tags = await client.users.listTags(firstUser.id);
console.log(tags);
⋮----
console.error(error);
⋮----
listTagsForFirstUser();
</file>

<file path="examples/views-list.js">
const client = zd.createClient({
⋮----
client.views.list(function (error, request, result) {
⋮----
console.log(error);
⋮----
console.log(JSON.stringify(result));
console.log('Total Users: ' + result.length);
</file>

<file path="src/clients/core/accountsettings.js">
// AccountSettings.js: Client for the zendesk API.
⋮----
/**
 * The AccountSettings class provides methods for interacting with account settings in the Zendesk JSON API.
 * {@link https://developer.zendesk.com/api-reference/ticketing/account-configuration/account_settings/ | See the Zendesk API documentation for more details}.
 */
class AccountSettings extends Client {
⋮----
/**
   * Retrieves the account settings.
   * @returns {Promise<{response: object, result: object}>} A promise that resolves to the account settings.
   * {@link https://developer.zendesk.com/api-reference/ticketing/account-configuration/account_settings/#show-settings | See the Zendesk API documentation for more details}.
   * @example
   * const settings = await client.accountsettings.show();
   */
async show() {
return this.get(['account', 'settings']);
⋮----
/**
   * Updates the account settings.
   * @param {object} settings - The settings to update.
   * @returns {Promise<{response: object, result: object}>} A promise that resolves to the updated account settings.
   * {@link https://developer.zendesk.com/api-reference/ticketing/account-configuration/account_settings/#update-account-settings | See the Zendesk API documentation for more details}.
   * @example
   * const settings = await client.accountsettings.update({ "settings": { "active_features": { "customer_satisfaction": false }}});
   */
async update(settings) {
return this.put(['account', 'settings'], settings);
</file>

<file path="src/clients/core/activitystream.js">
// File: activitystream.js
⋮----
/**
 * `ActivityStream` provides methods to interact with Zendesk ticket activities.
 * This class extends the base Client class and is tailored to fetch activity data.
 * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/activity_stream/ | Zendesk Activity Stream API}
 * @example
 * const client = new Client({ /* ...options... * / });
 * const activities = await client.activitystream.list();
 */
class ActivityStream extends Client {
/**
   * Creates an instance of the ActivityStream client.
   * @param {object} options - Configuration options for the client.
   */
⋮----
/**
   * Lists all ticket activities from the Zendesk API.
   * @returns {Array<object>} An array of activity objects.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/activity_stream/#list-activities | Zendesk API - List Activities}
   * @example
   * const activities = await client.activitystream.list();
   */
async list() {
return this.getAll('GET', ['activities']);
⋮----
/**
   * Retrieves a specific ticket activity by its ID.
   * @param {number} activityID - The unique ID of the activity to fetch.
   * @returns {Promise<{response: object, result: object}>} A promise that resolves to the activity object corresponding to the provided activityID.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/activity_stream/#show-activity | Zendesk API - Show Activity}
   * @example
   * const activity = await client.activitystream.show(12345);  // Where 12345 is an activity ID.
   */
async show(activityID) {
return this.get(['activities', activityID]);
⋮----
/**
   * Returns an approximate count of ticket activities in the last 30 days affecting the agent making the request.
   * If the count exceeds 100,000, the count will return a cached result which updates every 24 hours.
   *
   * The count[refreshed_at] property is a timestamp that indicates when the count was last updated.
   * Note: When the count exceeds 100,000, count[refreshed_at] may occasionally be null. This indicates
   * that the count is being updated in the background, and count[value] is limited to 100,000 until the update is complete.
   * @returns {Promise<{response: object, result: object}>} A promise that resolves to an object containing the activity count and the refreshed_at timestamp.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/activity_stream/#count-activities | Zendesk API - Count Activities}
   * @example
   * const activityCount = await client.activitystream.count();
   * console.log(activityCount); // { count: { refreshed_at: "2020-04-06T02:18:17Z", value: 102 } }
   */
async count() {
return this.get(['activities', 'count']);
</file>

<file path="src/clients/core/attachments.js">
// File: attachments.js
⋮----
/**
 * Represents the Attachments functionality of the Zendesk API.
 * @see [Zendesk Attachments API]{@link https://developer.zendesk.com/api-reference/ticketing/tickets/ticket-attachments/}
 */
class Attachments extends Client {
// Constructor(options) {
// super(options);
// }
⋮----
/**
   * Upload a file to be attached to a ticket comment.
   * @param {Buffer} file - The file data.
   * @param {object} fileOptions - Options for the file.
   * @param {string} fileOptions.filename - Name of the file when attached to the ticket comment.
   * @param {boolean} fileOptions.binary - If the file is binary or not.
   * @param {string} [fileOptions.token] - Token received from previous uploads (if multiple files are being attached).
   * @returns {Promise<object>} Returns the server's response.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/ticket-attachments/#upload-files}
   * @example
   * const response = await client.attachments.upload(fileBuffer, { filename: "example.png", binary: true });
   */
async upload(file, fileOptions) {
⋮----
/**
     * When attaching multiple files, a token is returned in
     * the successful 201 response.
     * This token can be used in subsequent requests in order
     * to associate other attachments with a previous upload.
     * This token expires after 3 days.
     */
⋮----
if (Object.hasOwn(fileOptions, 'token')) {
⋮----
return this.requestUpload(['uploads', fileOption], file);
⋮----
/**
   * Delete an uploaded file.
   * @param {string} token - The token of the uploaded attachment.
   * @returns {Promise<object>} Returns the server's response.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/ticket-attachments/#delete-upload}
   * @example
   * const response = await client.attachments.deleteUpload("exampleToken");
   */
async deleteUpload(token) {
return super.delete(['uploads', token]);
⋮----
/**
   * Retrieve details of a specific attachment.
   * @param {number} attachmentID - The ID of the attachment.
   * @returns {Promise<{response: object, result: object}>} Returns the details of the attachment.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/ticket-attachments/#show-attachment}
   * @example
   * const attachmentDetails = await client.attachments.show(12345);
   */
async show(attachmentID) {
return this.get(['attachments', attachmentID]);
⋮----
/**
   * Redact an attachment from an existing comment on a ticket.
   * @param {number} ticketID - The ID of the ticket.
   * @param {number} commentID - The ID of the comment.
   * @param {number} attachmentID - The ID of the attachment.
   * @returns {Promise<object>} Returns the server's response.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/ticket-attachments/#redact-comment-attachment}
   * @example
   * const response = await client.attachments.redactAttachmentComment(1, 2, 3);
   */
async redactAttachmentComment(ticketID, commentID, attachmentID) {
return super.delete(
⋮----
/**
   * Toggles enabling or restricting agent access to attachments with detected malware.
   * @param {number} attachmentID - The ID of the attachment.
   * @param {boolean} malwareAccessOverride - Whether to override malware access. If true, agent can access attachment flagged as malware.
   * @returns {Promise<{response: object, result: object}>} The response from the Zendesk API.
   * @throws {Error} Throws an error if the request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/ticket-attachments/#update-attachment-for-malware}
   * @example
   * const result = await client.attachments.updateAttachmentForMalware(928374, true);
   * console.log(result);
   */
async updateAttachmentForMalware(attachmentID, malwareAccessOverride) {
⋮----
return this.put(['attachments', attachmentID], payload);
</file>

<file path="src/clients/core/automations.js">
// Automations.js: Client for the zendesk API.
⋮----
/**
 * Client for interacting with the Zendesk Automation API.
 */
/**
 * The Automations class provides methods for interacting with the Zendesk Automation API.
 * {@link https://developer.zendesk.com/api-reference/ticketing/business-rules/automations/| See the Zendesk API documentation for more details}.
 */
class Automations extends Client {
⋮----
/**
   * List all automations.
   * @returns {Promise<Array>} Returns a list of automations.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/business-rules/automations/#list-automations}
   * @example const automations = await client.automations.list();
   */
async list() {
return this.getAll(['automations']);
⋮----
/**
   * List all active automations.
   * @returns {Promise<Array>} Returns a list of active automations.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/business-rules/automations/#list-active-automations}
   * @example const activeAutomations = await client.automations.listActive();
   */
async listActive() {
return this.getAll(['automations', 'active']);
⋮----
/**
   * Get details of a specific automation by ID.
   * @param {number} automationID - The ID of the automation.
   * @returns {Promise<{response: object, result: object}>} Returns details of the automation.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/business-rules/automations/#show-automation}
   * @example const automationDetails = await client.automations.show(123456);
   */
async show(automationID) {
return this.get(['automations', automationID]);
⋮----
/**
   * Create a new automation.
   * @param {object} automationData - Data for the new automation.
   * @returns {Promise<{response: object, result: object}>} Returns the created automation.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/business-rules/automations/#create-automation}
   * @example
   * const automation = await client.automations.create({
   *   title: "Roger Wilco",
   *   conditions: { ... },
   *   actions: { ... }
   * });
   */
async create(automationData) {
return this.post(['automations'], automationData);
⋮----
/**
   * Update an existing automation.
   * @param {number} automationID - ID of the automation to update.
   * @param {object} updatedData - Updated data for the automation.
   * @returns {Promise<{response: object, result: object}>} Returns the updated automation.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/business-rules/automations/#update-automation}
   * @example
   * const updatedAutomation = await client.automations.update(12345, {
   *   title: "Updated Automation"
   * });
   */
async update(automationID, updatedData) {
return this.put(['automations', automationID], updatedData);
⋮----
/**
   * Update many automations in bulk.
   * @param {Array<object>} automations - Array of automation data with their IDs to be updated.
   * @returns {Promise<{response: object, result: object}>} Returns the status of the bulk update.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/business-rules/automations/#update-many-automation}
   * @example
   * const status = await client.automations.updateMany([{id: 123, position: 1}, {id: 124, position: 2}]);
   */
async updateMany(automations) {
return this.put(['automations', 'update_many'], {automations});
⋮----
/**
   * Delete an automation.
   * @param {number} automationID - ID of the automation to be deleted.
   * @returns {Promise<void>}
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/business-rules/automations/#delete-automation}
   * @example
   * await client.automations.delete(12345);
   */
async delete(automationID) {
return super.delete(['automations', automationID]);
⋮----
/**
   * Bulk delete automations.
   * @param {Array<number>} ids - Array of automation IDs to be deleted.
   * @returns {Promise<void>}
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/business-rules/automations/#bulk-delete-automation}
   * @example
   * await client.automations.bulkDelete([12345, 67890]);
   */
async bulkDelete(ids) {
return super.delete(['automations', 'destroy_many', {ids}]);
⋮----
/**
   * Search automations by with query.
   * @param {object} searchQuery - The parameters to search for ['active', 'include', 'query', 'sort_by', 'sort_order'].
   * @returns {Promise<Array>} Returns automations matching the search query.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/business-rules/automations/#search-automation}
   * @example const foundAutomations = await client.automations.search('close');
   */
async search(searchQuery) {
return this.getAll(['automations', 'search', searchQuery]);
⋮----
/**
   * Reorder the list of automations.
   * @param {Array<number>} automationIDs - Array of automation IDs in the desired order.
   * @returns {Promise<object>} Returns the status of the reorder.
   * @example
   * const status = await client.automations.reorder([67890, 12345]);
   * @deprecated This may now be deprecated, please notify developers if you find this to be the case.
   */
async reorder(automationIDs) {
return this.requestAll('PUT', ['automations', 'reorder'], {
</file>

<file path="src/clients/core/brand.js">
// File: brands.js
⋮----
/**
 * Class representing the Brand API endpoints.
 * @see {@link https://developer.zendesk.com/api-reference/ticketing/account-configuration/brands/}
 */
class Brand extends Client {
⋮----
/**
   * List all brands.
   * @returns {Promise<{response: object, result: Array<object>}>} The list of brands.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/account-configuration/brands/#list-brands}
   * @example const brands = await client.brands.list();
   */
async list() {
return this.get(['brands']);
⋮----
/**
   * Show a specific brand by ID.
   * @param {number} brandId - The ID of the brand.
   * @returns {Promise<{response: object, result: object}>} The brand details.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/account-configuration/brands/#show-a-brand}
   * @example const brand = await client.brands.show(47);
   */
async show(brandId) {
return this.get(['brands', brandId]);
⋮----
/**
   * Create a new brand.
   * @param {object} brand - The brand data.
   * @returns {Promise<{response: object, result: object}>} The created brand details.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/account-configuration/brands/#create-brand}
   * @example const newBrand = await client.brands.create({name: "Brand 1", subdomain: "Brand1"});
   */
async create(brand) {
return this.post(['brands'], brand);
⋮----
/**
   * Update an existing brand.
   * @param {object} brand - The updated brand data.
   * @param {number} brandId - The ID of the brand to update.
   * @returns {Promise<{response: object, result: object}>} The updated brand details.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/account-configuration/brands/#update-a-brand}
   * @example const updatedBrand = await client.brands.update({name: "Updated Brand"}, 47);
   */
async update(brand, brandId) {
return this.put(['brands', brandId], brand);
⋮----
/**
   * Delete a brand.
   * @param {number} brandId - The ID of the brand to delete.
   * @returns {Promise<object>} The deletion status.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/account-configuration/brands/#delete-a-brand}
   * @example await client.brands.delete(47);
   */
async delete(brandId) {
return super.delete(['brands', brandId]);
⋮----
/**
   * Check host mapping validity for a given subdomain and host mapping.
   * @param {string} hostMapping - The host mapping to check.
   * @param {string} subdomain - The subdomain to check.
   * @returns {Promise<{response: object, result: object}>} The check result.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/account-configuration/brands/#check-host-mapping-validity}
   * @example await client.brands.checkHostMapping("brand1.com", "brand1");
   */
async checkHostMapping(hostMapping, subdomain) {
return this.get([
⋮----
/**
   * Check host mapping validity for an existing brand.
   * @param {number} brandId - The ID of the brand to check.
   * @returns {Promise<{response: object, result: object}>} The check result.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/account-configuration/brands/#check-host-mapping-validity-for-an-existing-brand}
   * @example await client.brands.checkHostMappingForExistingBrand(47);
   */
async checkHostMappingForExistingBrand(brandId) {
return this.get(['brands', brandId, 'check_host_mapping']);
</file>

<file path="src/clients/core/customagentroles.js">
// File: customAgentRoles.js
⋮----
/**
 * Client for Zendesk's Custom Agent Roles API.
 * @see {@link https://developer.zendesk.com/api-reference/ticketing/account-configuration/custom_roles/}
 */
class CustomAgentRoles extends Client {
⋮----
/**
   * List all Custom Agent Roles.
   * @returns {Promise<object[]>} Returns a promise that resolves with the list of custom agent roles.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/account-configuration/custom_roles/#list-custom-roles}
   * @example
   * const client = createClient({...});
   * const roles = await client.customagentroles.list();
   */
list() {
return this.getAll(['custom_roles']);
⋮----
/**
   * Retrieve a specific Custom Agent Role by its ID.
   * @param {number} roleId The ID of the custom agent role to retrieve.
   * @returns {Promise<{response: object, result: object}>} Returns a promise that resolves with the specified custom agent role.
   * @throws Will throw an error if unable to retrieve the role.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/account-configuration/custom_roles/#show-custom-role}
   * @example
   * const client = createClient({...});
   * const role = await client.customagentroles.show(12345);
   */
show(roleId) {
return this.get(['custom_roles', roleId]);
⋮----
/**
   * Creates a new custom agent role.
   * @param {object} roleData - The data for the new custom agent role.
   * @returns {Promise<{response: object, result: object}>} The created custom agent role.
   * @throws Will throw an error if creation fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/account-configuration/custom_roles/#create-custom-role}
   * @example
   * const newRole = {
   *   name: "Sample Role",
   *   description: "Description here",
   *   configuration: { chat_access: true }
   * };
   * const role = await client.customagentroles.create(newRole);
   */
create(roleData) {
return this.post(['custom_roles'], {custom_role: roleData});
⋮----
/**
   * Updates an existing custom agent role.
   * @param {number} customRoleId - The ID of the custom agent role to update.
   * @param {object} updatedData - The updated data for the custom agent role.
   * @returns {Promise<{response: object, result: object}>} The updated custom agent role.
   * @throws Will throw an error if the update fails or custom agent role ID is not found.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/account-configuration/custom_roles/#update-custom-role}
   * @example
   * const updatedData = { name: "Updated Role", description: "Updated Description" };
   * const updatedRole = await client.customagentroles.update(12345, updatedData);
   */
update(customRoleId, updatedData) {
return this.put(['custom_roles', customRoleId], {custom_role: updatedData});
⋮----
/**
   * Delete a specific Custom Agent Role by its ID.
   * @param {number} roleId The ID of the custom agent role to delete.
   * @returns {Promise<void>} Returns a promise that resolves when the role is deleted.
   * @throws Will throw an error if unable to delete the role.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/account-configuration/custom_roles/#delete-custom-role}
   * @example
   * const client = createClient({...});
   * await client.customagentroles.delete(12345);
   */
delete(roleId) {
return super.delete(['custom_roles', roleId]);
</file>

<file path="src/clients/core/dynamiccontent.js">
/**
 * Represents the Dynamic Content section of the Zendesk API.
 * Provides methods to interact with the Dynamic Content Items.
 * @see {@link https://developer.zendesk.com/api-reference/ticketing/ticket-management/dynamic_content/}
 */
class DynamicContent extends Client {
/**
   * Creates an instance of the DynamicContent.
   * @param {object} options - The options for the client.
   */
⋮----
/**
   * Lists the dynamic content items.
   * @returns {Promise<{response: object, result: Array<object>}>} The dynamic content items.
   * @throws {Error} Throws an error if the request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/ticket-management/dynamic_content/#list-items}
   * @example const items = await client.dynamiccontent.listItems();
   */
async listItems() {
return this.get(['dynamic_content', 'items']);
⋮----
/**
   * Lists all dynamic content items.
   * @returns {Promise<object>} All the dynamic content items.
   * @throws {Error} Throws an error if the request fails.
   * @example const allItems = await client.dynamiccontent.listAllItems();
   */
async listAllItems() {
return this.getAll(['dynamic_content', 'items']);
⋮----
/**
   * Shows a specific dynamic content item.
   * @param {number} itemID - The ID of the dynamic content item.
   * @returns {Promise<{response: object, result: object}>} The specified dynamic content item.
   * @throws {Error} Throws an error if the request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/ticket-management/dynamic_content/#show-item}
   * @example const item = await client.dynamiccontent.showItem(12345);
   */
async showItem(itemID) {
return this.get(['dynamic_content', 'items', itemID]);
⋮----
/**
   * Retrieves multiple dynamic content items using their identifiers.
   * @param {string[]} identifiers - An array of identifiers for the dynamic content items.
   * @returns {Promise<{response: object, result: Array<object>}>} Returns the fetched dynamic content items.
   * @throws {Error} Throws an error if the provided identifiers parameter is not a valid array or is empty.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/ticket-management/dynamic_content/#show-many-items}
   * @example
   * const items = await client.dynamiccontent.showManyItems(['item_one', 'item_two']);
   */
async showManyItems(identifiers) {
if (!Array.isArray(identifiers) || identifiers.length === 0) {
throw new Error('A valid array of identifiers is required.');
⋮----
return this.get(['dynamic_content', 'items', 'show_many', {identifiers}]);
⋮----
/**
   * Creates a new dynamic content item.
   * @param {object} item - The item to create.
   * @returns {Promise<{response: object, result: object}>} The created dynamic content item.
   * @throws {Error} Throws an error if the request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/ticket-management/dynamic_content/#create-item}
   * @example const newItem = await client.dynamiccontent.createItem({name: "Sample Item", default_locale_id: 1, variants: [...]});
   */
async createItem(item) {
return this.post(['dynamic_content', 'items'], item);
⋮----
/**
   * Updates a specific dynamic content item.
   * @param {number} itemID - The ID of the dynamic content item.
   * @param {object} item - The updated item details.
   * @returns {Promise<{response: object, result: object}>} The updated dynamic content item.
   * @throws {Error} Throws an error if the request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/ticket-management/dynamic_content/#update-item}
   * @example const updatedItem = await client.dynamiccontent.updateItem(12345, {name: "Updated Name"});
   */
async updateItem(itemID, item) {
return this.put(['dynamic_content', 'items', itemID], item);
⋮----
/**
   * Deletes a specific dynamic content item.
   * @param {number} itemID - The ID of the dynamic content item.
   * @returns {Promise<object>} The response after deletion.
   * @throws {Error} Throws an error if the request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/ticket-management/dynamic_content/#delete-item}
   * @example await client.dynamiccontent.deleteItem(12345);
   */
async deleteItem(itemID) {
return super.delete(['dynamic_content', 'items', itemID]);
</file>

<file path="src/clients/core/dynamiccontentvariants.js">
/**
 * Dynamic Content Variants client for the Zendesk REST API.
 * @see {@link https://developer.zendesk.com/api-reference/ticketing/ticket-management/dynamic_content_item_variants/}
 */
class DynamicContentVariants extends Client {
⋮----
/**
   * Lists all variants of a specified dynamic content item.
   * @param {number} itemID - The ID of the dynamic content item.
   * @returns {Promise<{response: object, result: Array<object>}>} The variants of the specified content item.
   * @throws {Error} Throws an error if request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/ticket-management/dynamic_content_item_variants/#list-variants}
   * @example
   * const variants = await client.dynamiccontentvariants.list(1234);
   */
async list(itemID) {
return this.get(['dynamic_content', 'items', itemID, 'variants']);
⋮----
/**
   * Fetches the details of a specified dynamic content variant.
   * @param {number} itemID - The ID of the dynamic content item.
   * @param {number} variantID - The ID of the variant to fetch.
   * @returns {Promise<{response: object, result: object}>} Returns the dynamic content variant details.
   * @throws {Error} Throws an error if the API call fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/ticket-management/dynamic_content_item_variants/#show-variant}
   * @example
   * const client = createClient({...});
   * const variant = await client.dynamiccontentvariants.show(12345, 67890);
   */
async show(itemID, variantID) {
return this.get([
⋮----
/**
   * Creates a new dynamic content variant.
   * @param {number} itemID - The ID of the dynamic content item.
   * @param {object} variant - The details of the variant to create.
   * @returns {Promise<{response: object, result: object}>} Returns the details of the created variant.
   * @throws {Error} Throws an error if the API call fails or if a locale variant already exists.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/ticket-management/dynamic_content_item_variants/#create-variant}
   * @example
   * const client = createClient({...});
   * const newVariant = {
   *   locale_id: 127,
   *   active: true,
   *   default: false,
   *   content: "Some dynamic content"
   * };
   * const createdVariant = await client.dynamiccontentvariants.create(12345, newVariant);
   */
async create(itemID, variant) {
return this.post(['dynamic_content', 'items', itemID, 'variants'], variant);
⋮----
/**
   * Updates a specified dynamic content variant.
   * @param {number} itemID - The ID of the dynamic content item.
   * @param {number} variantID - The ID of the variant to update.
   * @param {object} variant - The updated details of the variant.
   * @returns {Promise<{response: object, result: object}>} Returns the details of the updated variant.
   * @throws {Error} Throws an error if the API call fails or if you try to switch the active state of the default variant.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/ticket-management/dynamic_content_item_variants/#update-variant}
   * @example
   * const client = createClient({...});
   * const updatedVariant = {
   *   active: false,
   *   default: false,
   *   content: "Updated dynamic content"
   * };
   * const variant = await client.dynamiccontentvariants.update(12345, 67890, updatedVariant);
   */
async update(itemID, variantID, variant) {
return this.put(
⋮----
/**
   * Deletes a specific variant of a dynamic content item.
   * @param {number} itemID - The ID of the dynamic content item.
   * @param {number} variantID - The ID of the variant to delete.
   * @returns {Promise<object>} A confirmation of the deletion.
   * @throws {Error} Throws an error if request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/ticket-management/dynamic_content_item_variants/#delete-variant}
   * @example
   * await client.dynamiccontentvariants.delete(1234, 5678);
   */
async delete(itemID, variantID) {
return super.delete([
⋮----
/**
   * Creates multiple variants for a dynamic content item.
   * @param {number} itemID - The ID of the dynamic content item.
   * @param {object[]} variants - Array of variant objects to be created.
   * @returns {Promise<{response: object, result: object}>} A confirmation of the creation.
   * @throws {Error} Throws an error if request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/ticket-management/dynamic_content_item_variants/#create-many-variants}
   * @example
   * const newVariants = await client.dynamiccontentvariants.createMany(1234, [...variantsData]);
   */
async createMany(itemID, variants) {
return this.post(
⋮----
/**
   * Updates multiple variants of a dynamic content item.
   * @param {number} itemID - The ID of the dynamic content item.
   * @param {object[]} variants - Array of variant objects to be updated.
   * @returns {Promise<{response: object, result: object}>} A confirmation of the update.
   * @throws {Error} Throws an error if request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/ticket-management/dynamic_content_item_variants/#update-many-variants}
   * @example
   * const updatedVariants = await client.dynamiccontentvariants.updateMany(1234, [...variantsData]);
   */
async updateMany(itemID, variants) {
</file>

<file path="src/clients/core/groupmemberships.js">
// File: groupMemberships.js
⋮----
/**
 * Represents a GroupMembership in Zendesk.
 * @see {@link https://developer.zendesk.com/api-reference/ticketing/groups/group_memberships/ }
 */
class GroupMemberships extends Client {
⋮----
/**
   * List all group memberships.
   * @returns {Promise<object[]>} Array of group memberships.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/groups/group_memberships/#list-memberships}
   * @example
   * const memberships = await client.groupmemberships.list();
   */
async list() {
return this.getAll(['group_memberships']);
⋮----
/**
   * List group memberships by user ID.
   * @param {number} userID - The ID of the user.
   * @returns {Promise<object[]>} Array of group memberships.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/groups/group_memberships/#list-memberships}
   * @example
   * const memberships = await client.groupmemberships.listByUser(123);
   */
async listByUser(userID) {
return this.getAll(['users', userID, 'group_memberships']);
⋮----
/**
   * List group memberships by group ID.
   * @param {number} groupID - The ID of the group.
   * @returns {Promise<object[]>} Array of group memberships.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/groups/group_memberships/#list-memberships}
   * @example
   * const memberships = await client.groupmemberships.listByGroup(123);
   */
async listByGroup(groupID) {
return this.getAll(['groups', groupID, 'memberships']);
⋮----
// Viewing GroupMemberships
⋮----
/**
   * Show details of a specific group membership.
   * @param {number} groupMembershipID - The ID of the group membership.
   * @returns {Promise<{response: object, result: object}>} Details of the group membership.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/groups/group_memberships/#show-membership}
   * @example
   * const membershipDetails = await client.groupmemberships.show(123);
   */
async show(groupMembershipID) {
return this.get(['group_memberships', groupMembershipID]);
⋮----
/**
   * Show details of a group membership by user ID.
   * @param {number} userID - The ID of the user.
   * @param {number} groupMembershipID - The ID of the group membership.
   * @returns {Promise<{response: object, result: object}>} Details of the group membership.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/groups/group_memberships/#show-membership}
   * @example
   * const membershipDetails = await client.groupmemberships.showByUser(123, 456);
   */
async showByUser(userID, groupMembershipID) {
return this.get(['users', userID, 'group_memberships', groupMembershipID]);
⋮----
/**
   * Create a new group membership.
   * @param {object} groupMembership - The group membership details.
   * @returns {Promise<{response: object, result: object}>} The created group membership.
   * @throws {Error} Throws an error if the creation fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/groups/group_memberships/#create-membership}
   * @example
   * const newMembership = await client.groupmemberships.create({user_id: 72, group_id: 88});
   */
async create(groupMembership) {
return this.post(['group_memberships'], groupMembership);
⋮----
/**
   * Create a new group membership by user ID.
   * @param {number} userID - The ID of the user.
   * @param {object} groupMembership - The group membership details.
   * @returns {Promise<{response: object, result: object}>} The created group membership.
   * @throws {Error} Throws an error if the creation fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/groups/group_memberships/#create-membership}
   * @example
   * const newMembership = await client.groupmemberships.createByUser(123, {group_id: 88});
   */
async createByUser(userID, groupMembership) {
return this.post(['users', userID, 'group_memberships'], groupMembership);
⋮----
/**
   * Delete a group membership.
   * @param {number} groupMembershipID - The ID of the group membership.
   * @returns {Promise<void>}
   * @throws {Error} Throws an error if the deletion fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/groups/group_memberships/#delete-membership}
   * @example
   * await client.groupmemberships.delete(123);
   */
async delete(groupMembershipID) {
return super.delete(['group_memberships', groupMembershipID]);
⋮----
/**
   * Delete a group membership by user ID.
   * @param {number} userID - The ID of the user.
   * @param {number} groupMembershipID - The ID of the group membership.
   * @returns {Promise<void>}
   * @throws {Error} Throws an error if the deletion fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/groups/group_memberships/#delete-membership}
   * @example
   * await client.groupmemberships.deleteByUser(123, 456);
   */
async deleteByUser(userID, groupMembershipID) {
return super.delete([
⋮----
/**
   * Set a group membership as default.
   * @param {number} userID - The ID of the user.
   * @param {number} groupMembershipID - The ID of the group membership.
   * @returns {Promise<{response: object, result: object}>} Updated group membership.
   * @throws {Error} Throws an error if the operation fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/groups/group_memberships/#set-membership-as-default}
   * @example
   * const updatedMembership = await client.groupmemberships.makeDefault(123, 456);
   */
async makeDefault(userID, groupMembershipID) {
return this.put([
⋮----
/**
   * List all assignable group memberships.
   * @returns {Promise<Array>} List of assignable group memberships.
   * @throws {Error} Throws an error if the request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/groups/group_memberships/#list-assignable-memberships}
   * @example
   * const memberships = await client.groupmemberships.listAssignable();
   */
async listAssignable() {
return this.getAll(['group_memberships', 'assignable']);
⋮----
/**
   * List all assignable group memberships by group.
   * @param {number} groupID - The ID of the group.
   * @returns {Promise<Array>} List of assignable group memberships for the specified group.
   * @throws {Error} Throws an error if the request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/groups/group_memberships/#list-assignable-memberships}
   * @example
   * const memberships = await client.groupmemberships.listAssignableByGroup(12345);
   */
async listAssignableByGroup(groupID) {
return this.getAll(['groups', groupID, 'memberships', 'assignable']);
⋮----
/**
   * Bulk create group memberships.
   * @param {Array} groupMemberships - Array of group memberships to be created.
   * @returns {Promise<{response: object, result: object}>} Job status indicating the progress of the bulk create operation.
   * @throws {Error} Throws an error if the request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/groups/group_memberships/#bulk-create-memberships}
   * @example
   * const jobStatus = await client.groupmemberships.bulkCreate([{ user_id: 72, group_id: 88 }, { user_id: 73, group_id: 88 }]);
   */
async bulkCreate(groupMemberships) {
return this.post(['group_memberships', 'create_many'], {
⋮----
/**
   * Bulk delete group memberships.
   * @param {Array<number>} ids - Array of group membership IDs to be deleted.
   * @returns {Promise<object>} Response object indicating the result of the bulk delete operation.
   * @throws {Error} Throws an error if the request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/groups/group_memberships/#bulk-delete-memberships}
   * @example
   * const response = await client.groupmemberships.bulkDelete([1, 2, 3]);
   */
async bulkDelete(ids) {
⋮----
ids: ids.join(','),
</file>

<file path="src/clients/core/groups.js">
// Groups.js: Client for the zendesk API.
⋮----
/**
 * A recursive type that makes all properties of an object optional, including nested objects.
 * @template T
 * @typedef {Partial<{[K in keyof T]: RecursivePartial<T[K]>}>} RecursivePartial
 */
⋮----
/**
 * Represents a group within Zendesk.
 * @typedef {object} Group
 * @property {string} created_at - The time the group was created.
 * @property {boolean} default - If the group is the default one for the account.
 * @property {boolean} deleted - Deleted groups get marked as such.
 * @property {string} [description] - The description of the group.
 * @property {number} id - Automatically assigned when creating groups.
 * @property {boolean} [is_public] - If true, the group is public. If false, the group is private. You can't change a private group to a public group.
 * @property {string} name - The name of the group.
 * @property {string} updated_at - The time of the last update of the group.
 * @property {string} url - The API URL of the group.
 */
⋮----
/**
 * Represents the data structure to create or update a group.
 * @typedef {object} CreateOrUpdateGroup
 * @property {RecursivePartial<Group>} group - The group to create or update.
 */
⋮----
/**
 * A client for interfacing with the Zendesk Groups API.
 * @see {@link https://developer.zendesk.com/api-reference/ticketing/groups/groups/}
 */
class Groups extends Client {
⋮----
/**
   * Retrieves a list of all groups.
   * @returns {Promise<Array<Group>>} A promise that resolves to the list of groups.
   * @throws {Error} Throws an error if the request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/groups/groups/#list-groups}
   * @example
   * const allGroups = await client.groups.list();
   */
async list() {
return this.getAll(['groups']);
⋮----
/**
   * Retrieves an approximate count of groups.
   * If the count exceeds 100,000, it is updated every 24 hours.
   * @returns {Promise<{response: object, result: object}>} A promise that resolves to the group count data.
   * @throws {Error} Throws an error if the request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/groups/groups/#count-groups}
   * @example
   * const count = await client.groups.count();
   */
async count() {
return this.get(['groups', 'count']);
⋮----
/**
   * Retrieves the approximate count of groups for a specified user.
   * @param {number} userID - The ID of the user for whom to count the groups.
   * @returns {Promise<{response: object, result: object}>} A promise that resolves to the approximate count of groups for the user.
   * @throws {Error} Throws an error if the request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/groups/groups/#count-groups}
   * @example
   * const groupCount = await client.groups.countByUser(12345);
   */
async countByUser(userID) {
return this.get(['users', userID, 'groups', 'count']);
⋮----
/**
   * Retrieves a list of all assignable groups.
   * @returns {Promise<object>} A promise that resolves to the list of assignable groups.
   * @throws {Error} Throws an error if the request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/groups/groups/#list-assignable-groups}
   * @example
   * const assignableGroups = await client.groups.assignable();
   */
async assignable() {
return this.getAll(['groups', 'assignable']);
⋮----
/**
   * Retrieves details of a specific group by its ID.
   * @param {number} groupID - The ID of the group.
   * @returns {Promise<{response: object, result: object}>} A promise that resolves to the group's details.
   * @throws {Error} Throws an error if the request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/groups/groups/#show-group}
   * @example
   * const groupDetails = await client.groups.show(12345);
   */
async show(groupID) {
return this.get(['groups', groupID]);
⋮----
/**
   * Creates a new group.
   * @param {CreateOrUpdateGroup} group - The group details to create.
   * @returns {Promise<{response: object, result: object}>} A promise that resolves to the details of the created group.
   * @throws {Error} Throws an error if the request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/groups/groups/#create-group}
   * @example
   * const newGroup = {
   *   name: "Support Team",
   *   description: "Handles support tickets"
   * };
   * const createdGroup = await client.groups.create(newGroup);
   */
async create(group) {
return this.post(['groups'], group);
⋮----
/**
   * Updates a specified group.
   * @param {number} groupID - The ID of the group to update.
   * @param {CreateOrUpdateGroup} group - The updated group details.
   * @returns {Promise<{response: object, result: object}>} A promise that resolves to the details of the updated group.
   * @throws {Error} Throws an error if the request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/groups/groups/#update-group}
   * @example
   * const updatedInfo = {
   *   name: "Updated Support Team"
   * };
   * const updatedGroup = await client.groups.update(12345, updatedInfo);
   */
async update(groupID, group) {
return this.put(['groups', groupID], group);
⋮----
/**
   * Deletes a specified group by its ID.
   * @param {number} groupID - The ID of the group to delete.
   * @returns {Promise<object>} A promise that resolves to the response data (might be empty or a confirmation).
   * @throws {Error} Throws an error if the request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/groups/groups/#delete-group}
   * @example
   * await client.groups.delete(12345);
   */
async delete(groupID) {
return super.delete(['groups', groupID]);
</file>

<file path="src/clients/core/imports.js">
// File: imports.js
⋮----
/**
 * Client for the Zendesk Ticket Import API.
 * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/ticket_import/}
 */
class Imports extends Client {
⋮----
/**
   * Imports a single ticket to Zendesk.
   * @param {object} ticket - The ticket data to be imported.
   * @returns {Promise<{response: object, result: object}>} The response from the Zendesk API.
   * @throws {Error} Throws an error if the request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/ticket_import/#ticket-import}
   * @example
   * const ticketData = {
   *   ticket: {
   *     assignee_id: 19,
   *     comments: [{
   *       author_id: 827,
   *       created_at: "2009-06-25T10:15:18Z",
   *       value: "This is a comment"
   *     }],
   *     description: "A description",
   *     requester_id: 827,
   *     subject: "Help"
   *   }
   * };
   * const response = await client.imports.ticket(ticketData);
   */
async ticket(ticket) {
return this.post(['imports', 'tickets'], ticket);
⋮----
/**
   * Imports multiple tickets to Zendesk in bulk.
   * @param {object[]} tickets - An array of ticket data to be imported.
   * @returns {Promise<object>} The response from the Zendesk API.
   * @throws {Error} Throws an error if the request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/ticket_import/#ticket-bulk-import}
   * @example
   * const ticketsData = [{
   *   assignee_id: 19,
   *   comments: [{
   *     author_id: 827,
   *     created_at: "2009-06-25T10:15:18Z",
   *     value: "This is a comment"
   *   }],
   *   description: "A description",
   *   requester_id: 827,
   *   subject: "Help"
   * }];
   * const response = await client.imports.ticketMany(ticketsData);
   */
async ticketMany(tickets) {
return this.requestAll(
</file>

<file path="src/clients/core/installations.js">
// Installations.js: Client for the zendesk API.
⋮----
class Installations extends Client {
⋮----
/**
   * List all app installations in the account.
   * @returns {Promise<Array<object>>} An array of app installation objects.
   * @throws {Error} Throws an error if the API call is unsuccessful.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/apps/apps/#list-app-installations}
   * @example
   * const client = createClient({...});
   * const appInstallations = await client.apps.list();
   */
async list() {
return this.getAll(['apps', 'installations']);
⋮----
/**
   * Retrieve details of a specific app installation by its ID.
   * @param {number|string} installationID - The unique identifier for the app installation.
   * @returns {Promise<{response: object, result: object}>} The app installation details as an object.
   * @throws {Error} Throws an error if the API call is unsuccessful or the installationID is invalid.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/apps/apps/#show-app-installation}
   * @example
   * const client = createClient({...});
   * const appInstallationDetails = await client.apps.show(12345); // Replace 12345 with a valid installation ID
   */
async show(installationID) {
return this.get(['apps', 'installations', installationID]);
⋮----
/**
   * Create a new app installation.
   * @param {object} installation - The app installation data to be created.
   * @returns {Promise<{response: object, result: object}>} The response data from creating the app installation.
   * @throws {Error} Throws an error if the API call is unsuccessful or if the installation data is invalid.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/apps/apps/#install-app} For more details about creating an installation.
   * @example
   * const client = createClient({...});
   * const installationData = {
   *   name: 'My App Installation',
   *   config: {...},
   *   // ... other installation properties ...
   * };
   * const response = await client.installations.create(installationData);
   */
async create(installation) {
return this.post(['apps', 'installations'], installation);
⋮----
/**
   * Updates a specific app installation.
   * @param {number} installationID - The ID of the app installation.
   * @param {object} installation - The updated installation data.
   * @returns {Promise<{response: object, result: object}>} Returns the response from Zendesk API.
   * @throws {Error} Throws an error if the API call is unsuccessful.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/apps/apps/#update-app-installation}
   * @example
   * const client = createClient({...});
   * const updatedInstallationData = {
   *   settings: {
   *     name: "Helpful App - Updated",
   *     api_token: "659323ngt4ut9an"
   *   }
   * };
   * const response = await client.installations.update(12345, updatedInstallationData);
   */
async update(installationID, installation) {
return this.put(['apps', 'installations', installationID], installation);
⋮----
/**
   * Removes a specific app installation.
   * @param {number} installationID - The ID of the app installation.
   * @returns {Promise<void>} Returns the response from Zendesk API.
   * @throws {Error} Throws an error if the API call is unsuccessful.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/apps/apps/#remove-app-installation}
   * @example
   * const client = createClient({...});
   * await client.installations.delete(12345);
   */
async delete(installationID) {
return super.delete(['apps', 'installations', installationID]);
</file>

<file path="src/clients/core/jobstatuses.js">
// JobStatuses.js: Client for the zendesk API.
⋮----
/**
 * Represents the Job Statuses in Zendesk. A status record is created when somebody kicks off a job
 * such as updating multiple tickets.
 * @see {@link https://developer.zendesk.com/api-reference/ticketing/ticket-management/job_statuses/} for the API documentation.
 */
class JobStatuses extends Client {
⋮----
/**
   * Retrieves a list of job statuses.
   * @returns {Promise<{response: object, result: Array<object>}>} - A promise that resolves to a list of job statuses.
   * @throws {Error} If there's an error in the request.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/ticket-management/job_statuses/#list-job-statuses} for the API endpoint documentation.
   * @example
   * const jobStatusList = await client.jobstatuses.list();
   */
async list() {
return this.get('job_statuses');
⋮----
/**
   * Retrieves the status of a background job.
   * @param {string} jobStatusID - The ID of the Job status.
   * @returns {Promise<{response: object, result: object}>} - A promise that resolves to the job status data.
   * @throws {Error} If the job status ID is not provided or if there's an error in the request.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/ticket-management/job_statuses/#show-job-status} for the API endpoint documentation.
   * @example
   * const jobStatus = await client.jobstatuses.show("dd9321f29967688b27bc9499ebb4ae8d");
   */
async show(jobStatusID) {
return this.get(['job_statuses', jobStatusID]);
⋮----
/**
   * Retrieves the statuses of multiple background jobs.
   * @param {Array<string>} jobStatusIDs - An array of job status IDs.
   * @returns {Promise<{response: object, result: Array<object>}>} - A promise that resolves to a list of job statuses.
   * @throws {Error} If the job status IDs are not provided or if there's an error in the request.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/ticket-management/job_statuses/#show-many-job-statuses} for the API endpoint documentation.
   * @example
   * const jobStatuses = await client.jobstatuses.showMany(["dd9321f29967688b27bc9499ebb4ae8d", "82de0b044094f0c67893ac9fe64f1a99"]);
   */
async showMany(jobStatusIDs) {
if (!Array.isArray(jobStatusIDs) || jobStatusIDs.length === 0) {
throw new Error('Expected jobStatusIDs to be a non-empty array.');
⋮----
return this.get([
⋮----
ids: jobStatusIDs.join(','),
⋮----
/**
   * Monitors a specific job until it's completed, based on a provided interval and maximum number of attempts.
   * @param {string} jobID - The ID of the job to watch.
   * @param {number} interval - The time (in milliseconds) to wait between each check.
   * @param {number} maxAttempts - The maximum number of attempts to check the job status.
   * @returns {Promise<object>} - A promise that resolves with the job status when the job is completed or the maximum attempts are reached.
   * @throws {Error} If there's an error in the request or if the maximum attempts are reached without the job completing.
   * @example
   * await client.jobstatuses.watch("dd9321f29967688b27bc9499ebb4ae8d", 1000, 5);
   */
async watch(jobID, interval, maxAttempts) {
const jobMonitor = new JobMonitor(this.options);
⋮----
const jobStatus = await jobMonitor.monitorJobStatus(
⋮----
super.emit('debug::result', jobStatus);
⋮----
super.emit('debug::result', `Error watching job status: ${error}`);
</file>

<file path="src/clients/core/locales.js">
// Locales.js: Client for the zendesk API.
⋮----
/**
 * Represents the Locales endpoint of the Zendesk REST API wrapper.
 * @see {@link https://developer.zendesk.com/api-reference/ticketing/account-configuration/locales/}
 */
class Locales extends Client {
⋮----
/**
   * Lists all the translation locales available for the account.
   * @returns {Promise<object[]>} List of locales.
   * @throws {Error} Throws an error if the API request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/account-configuration/locales/#list-locales}
   * @example
   * const client = createClient({...});
   * const locales = await client.locales.list();
   */
async list() {
return this.getAll(['locales']);
⋮----
/**
   * Retrieves information about a specific locale based on the localeID.
   * @param {number|string} localeID - The ID or the BCP-47 code of the locale (e.g., 'en-US', 'es-419').
   * @returns {Promise<{response: object, result: object}>} Details of the specified locale.
   * @throws {Error} Throws an error if the API request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/account-configuration/locales/#show-locale}
   * @example
   * const client = createClient({...});
   * const locale = await client.locales.show('en-US');
   */
async show(localeID) {
return this.get(['locales', localeID]);
⋮----
/**
   * Retrieves the locale information of the currently logged-in user.
   * @returns {Promise<{response: object, result: object}>} Details of the current user's locale.
   * @throws {Error} Throws an error if the API request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/account-configuration/locales/#show-current-locale}
   * @example
   * const client = createClient({...});
   * const currentLocale = await client.locales.showCurrent();
   */
async showCurrent() {
return this.get(['locales', 'current']);
⋮----
/**
   * Alias for showCurrent. Retrieves the locale information of the currently logged-in user.
   * @returns {Promise<{response: object, result: object}>} Details of the current user's locale.
   * @throws {Error} Throws an error if the API request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/account-configuration/locales/#show-current-locale}
   * @example
   * const client = createClient({...});
   * const currentLocale = await client.locales.current();
   */
async current() {
⋮----
/**
   * Lists the translation locales that have been localized for agents on a specific account.
   * @returns {Promise<object[]>} List of locales available for agents.
   * @throws {Error} Throws an error if the API request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/account-configuration/locales/#list-locales-for-agent}
   * @example
   * const client = createClient({...});
   * const agentLocales = await client.locales.listForAgent();
   */
async listForAgent() {
return this.getAll(['locales', 'agent']);
⋮----
/**
   * Lists the translation locales that are available to all accounts.
   * @returns {Promise<object[]>} List of public locales available to all accounts.
   * @throws {Error} Throws an error if the API request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/account-configuration/locales/#list-available-public-locales}
   * @example
   * const client = createClient({...});
   * const publicLocales = await client.locales.listPublicLocales();
   */
async listPublicLocales() {
return this.getAll(['locales', 'public']);
⋮----
/**
   * Detects the best language/locale for the user based on provided available locales.
   * @param {string[]} availableLocales - Array of available locales e.g., ['es', 'ja', 'en-uk'].
   * @returns {Promise<{response: object, result: object}>} Best detected locale for the user.
   * @throws {Error} Throws an error if the API request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/account-configuration/locales/#detect-best-language-for-user}
   * @example
   * const client = createClient({...});
   * const bestLocale = await client.locales.detectBestLocale(['es', 'ja', 'en-uk']);
   */
async detectBestLocale(availableLocales) {
return this.put(['locales', 'detect_best_locale'], {
</file>

<file path="src/clients/core/macros.js">
// Macros.js: Client for the zendesk API.
⋮----
/**
 * The Macros class provides methods for interacting with the Zendesk Macros API.
 * @see {@link https://developer.zendesk.com/api-reference/ticketing/business-rules/macros/} Zendesk Macros API
 */
class Macros extends Client {
⋮----
/**
   * Lists all shared and personal macros available to the current user.
   * @returns {Promise<Array>} Returns a promise that resolves to an array of macros.
   * @throws {Error} Throws an error if the request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/business-rules/macros/#list-macros} Zendesk List Macros API
   * @example
   * const macros = await client.macros.list();
   */
async list() {
return this.getAll(['macros', 'active']);
⋮----
/**
   * Retrieves details of a specific macro.
   * @param {number} macroID - The ID of the macro to retrieve.
   * @returns {Promise<{response: object, result: object}>} Returns a promise that resolves to the macro's details.
   * @throws {Error} Throws an error if the request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/business-rules/macros/#show-macro} Zendesk Show Macro API
   * @example
   * const macroDetails = await client.macros.show(123);
   */
async show(macroID) {
return this.get(['macros', macroID]);
⋮----
/**
   * Searches for macros based on provided query.
   * @param {string} query - The search query string.
   * @returns {Promise<{response: object, result: Array<object>}>} - A promise that resolves to a list of matched macros.
   * @throws {Error} Throws an error if the request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/business-rules/macros/#search-macros}
   * @example
   * const matchedMacros = await client.macros.search("priority:urgent");
   */
async search(query) {
return this.get(['macros', 'search', {query}]);
⋮----
/**
   * Lists all active macros.
   * @returns {Promise<{response: object, result: Array<object>}>} - A promise that resolves to a list of active macros.
   * @throws {Error} Throws an error if the request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/business-rules/macros/#list-active-macros}
   * @example
   * const activeMacros = await client.macros.listActive();
   */
async listActive() {
return this.get(['macros', 'active']);
⋮----
/**
   * Lists macros based on provided parameters.
   * @param {object} parameters - The filtering parameters.
   * @returns {Promise<object>} - A promise that resolves to a list of macros.
   * @throws {Error} Throws an error if the request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/business-rules/macros/#list-macros}
   * @example
   * const macros = await client.macros.listByParams({ active: true });
   */
async listByParams(parameters) {
return this.getAll(['macros', parameters]);
⋮----
/**
   * Applies a macro to a ticket.
   * @param {number} macroID - The ID of the macro.
   * @returns {Promise<{response: object, result: object}>} - A promise that resolves to the applied macro's result.
   * @throws {Error} Throws an error if the request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/business-rules/macros/#show-macro-replica}
   * @example
   * const result = await client.macros.apply(12345);
   */
async apply(macroID) {
return this.get(['macros', macroID, 'apply']);
⋮----
/**
   * Creates a macro representation derived from a ticket.
   * @param {number} ticketID - The ID of the ticket from which to build a macro replica.
   * @param {number} macroID - The ID of the macro.
   * @returns {Promise<{response: object, result: object}>} - A promise that resolves to the macro replica.
   * @throws {Error} Throws an error if the request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/business-rules/macros/#show-macro-replica}
   * @example
   * const replica = await client.macros.applyTicket(12345, 67890);
   */
async applyTicket(ticketID, macroID) {
return this.get(['tickets', ticketID, 'macros', macroID, 'apply']);
⋮----
/**
   * Creates a new macro.
   * @param {object} macro - The macro object containing necessary values.
   * @param {Array<object>} macro.actions - List of actions that the macro will perform.
   * @param {string} macro.title - The title of the macro.
   * @param {boolean} [macro.active] - Whether the macro is active.
   * @param {string} [macro.description] - The description of the macro.
   * @returns {Promise<{response: object, result: object}>} - A promise that resolves to the created macro.
   * @throws {Error} Throws an error if the request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/business-rules/macros/#create-macro}
   * @example
   * const newMacro = await client.macros.create({
   *   title: "Test Macro",
   *   actions: [{ field: "status", value: "solved" }]
   * });
   */
async create(macro) {
return this.post(['macros'], macro);
⋮----
/**
   * Lists all macro categories available to the current user.
   * @returns {Promise<object>} - A promise that resolves to a list of macro categories.
   * @throws {Error} Throws an error if the request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/business-rules/macros/#list-macro-categories}
   * @example
   * const macroCategories = await client.macros.categories();
   */
async categories() {
return this.getAll(['macros', 'categories']);
⋮----
/**
   * Updates an existing macro.
   * @param {number} macroID - The ID of the macro to update.
   * @param {object} macro - The updates to apply to the macro.
   * @returns {Promise<{response: object, result: object}>} - A promise that resolves to the updated macro.
   * @throws {Error} Throws an error if the request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/business-rules/macros/#update-macro}
   * @example
   * const updatedMacro = await client.macros.update(12345, {
   *   title: "Updated Macro Title"
   * });
   */
async update(macroID, macro) {
return this.put(['macros', macroID], macro);
⋮----
/**
   * Deletes a specified macro.
   * @param {number} macroID - The ID of the macro to delete.
   * @returns {Promise<void>} - A promise indicating successful deletion.
   * @throws {Error} Throws an error if the request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/business-rules/macros/#delete-macro}
   * @example
   * await client.macros.delete(12345);
   */
async delete(macroID) {
return super.delete(['macros', macroID]);
⋮----
/**
   * Updates multiple macros.
   * @param {Array<object>} macrosUpdates - An array of macro update objects.
   * @returns {Promise<{response: object, result: Array<object>}>} - A promise that resolves to an array of updated macros.
   * @throws {Error} Throws an error if the request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/business-rules/macros/#update-many-macros}
   * @example
   * const updatedMacros = await client.macros.updateMany([
   *   { id: 12345, title: "Updated Macro One" },
   *   { id: 67890, title: "Updated Macro Two" }
   * ]);
   */
async updateMany(macrosUpdates) {
return this.put(['macros', 'update_many'], {macros: macrosUpdates});
</file>

<file path="src/clients/core/oauthclients.js">
// File: oauthclients.js
⋮----
/**
 * Represents a client for Zendesk OAuth Clients API.
 * @see {@link https://developer.zendesk.com/api-reference/ticketing/oauth/oauth_clients/}
 */
class OAuthClients extends Client {
⋮----
/**
   * Lists all OAuth clients.
   * @returns {Promise<Array>} A list of OAuth clients.
   * @throws {Error} Throws an error if the request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/oauth/oauth_clients/#list-clients}
   * @example const clientsList = await client.oauthclients.list();
   */
async list() {
return this.getAll(['oauth', 'clients']);
⋮----
/**
   * Retrieves a specific OAuth client by ID.
   * @param {number} id - The ID of the OAuth client.
   * @returns {Promise<{response: object, result: object}>} The OAuth client details.
   * @throws {Error} Throws an error if the request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/oauth/oauth_clients/#show-client}
   * @example const clientDetails = await client.oauthclients.show(1234);
   */
async show(id) {
return this.get(['oauth', 'clients', id]);
⋮----
/**
   * Creates a new OAuth client with the provided details.
   * @param {object} client - The details of the client to be created.
   * @returns {Promise<{response: object, result: object}>} The details of the created OAuth client.
   * @throws {Error} Throws an error if the request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/oauth/oauth_clients/#create-client}
   * @example
   * const newClient = {
   *   name: "Test Client",
   *   identifier: "unique_id"
   * };
   * const createdClient = await client.oauthclients.create(newClient);
   */
async create(client) {
return this.post(['oauth', 'clients'], {client});
⋮----
/**
   * Updates a specific OAuth client by ID.
   * @param {number} id - The ID of the OAuth client.
   * @param {object} client - The new details of the client.
   * @returns {Promise<{response: object, result: object}>} The updated OAuth client details.
   * @throws {Error} Throws an error if the request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/oauth/oauth_clients/#update-client}
   * @example
   * const updatedClient = {
   *   name: "My New OAuth2 Client"
   * };
   * const updatedDetails = await client.oauthclients.update(1234, updatedClient);
   */
async update(id, client) {
return this.put(['oauth', 'clients', id], {client});
⋮----
/**
   * Deletes a specific OAuth client by ID.
   * @param {number} id - The ID of the OAuth client.
   * @returns {Promise<void>}
   * @throws {Error} Throws an error if the request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/oauth/oauth_clients/#delete-client}
   * @example await client.oauthclients.delete(1234);
   */
async delete(id) {
return super.delete(['oauth', 'clients', id]);
⋮----
/**
   * Generates a new client secret for a specific OAuth client by ID.
   * @param {number} id - The ID of the OAuth client.
   * @returns {Promise<{response: object, result: object}>} The new client secret.
   * @throws {Error} Throws an error if the request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/oauth/oauth_clients/#generate-secret}
   * @example const newSecret = await client.oauthclients.generateSecret(1234);
   */
async generateSecret(id) {
return this.put(['oauth', 'clients', id, 'generate_secret']);
</file>

<file path="src/clients/core/oauthtokens.js">
// File: oauthtokens.js
⋮----
/**
 * Represents a client for Zendesk OAuth Tokens API.
 * @see {@link https://developer.zendesk.com/api-reference/ticketing/oauth/oauth_tokens/}
 */
class OAuthTokens extends Client {
⋮----
/**
   * Retrieves a specific OAuth token by ID.
   * @param {number|string} id - The ID of the OAuth token or "current" for the currently authenticated token.
   * @returns {Promise<{response: object, result: object}>} The OAuth token details.
   * @throws {Error} Throws an error if the request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/oauth/oauth_tokens/#show-token}
   * @example const tokenDetails = await client.oauthtokens.show(1234);
   */
async show(id) {
return this.get(['oauth', 'tokens', id]);
⋮----
/**
   * Retrieves the details of the currently authenticated OAuth token.
   * @returns {Promise<{response: object, result: object}>} The details of the currently authenticated OAuth token.
   * @throws {Error} Throws an error if the request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/oauth/oauth_tokens/#show-token}
   * @example const currentTokenDetails = await client.oauthtokens.current();
   */
async current() {
return this.show('current');
⋮----
/**
   * Lists all available OAuth tokens.
   * @returns {Promise<Array>} A list of OAuth tokens.
   * @throws {Error} Throws an error if the request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/oauth/oauth_tokens/#list-tokens}
   * @example const tokensList = await client.oauthtokens.list();
   */
async list() {
return this.getAll(['oauth', 'tokens']);
⋮----
/**
   * Revokes a specific OAuth token by ID.
   * @param {number} id - The ID of the OAuth token.
   * @returns {Promise<void>}
   * @throws {Error} Throws an error if the request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/oauth/oauth_tokens/#revoke-token}
   * @example await client.oauthtokens.revoke(1234);
   */
async revoke(id) {
return super.delete(['oauth', 'tokens', id]);
⋮----
/**
   * Creates a new OAuth token with the provided details.
   * @param {object} token - The details of the token to be created. Must include client_id and scopes.
   * @returns {Promise<{response: object, result: object}>} The details of the created OAuth token.
   * @throws {Error} Throws an error if the request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/oauth/oauth_tokens/#create-token}
   * @example const createdToken = await client.oauthtokens.create({client_id: 1234, scopes: ["read", "write"]});
   */
async create(token) {
return this.post(['oauth', 'tokens'], token);
</file>

<file path="src/clients/core/organizationfields.js">
// Organizationfields.js: Client for the zendesk API.
⋮----
/**
 * Class representing the OrganizationFields API endpoints.
 * @see {@link https://developer.zendesk.com/api-reference/ticketing/organizations/organization_fields/}
 */
class OrganizationFields extends Client {
⋮----
/**
   * List all organization fields.
   * @returns {Promise<object>} The organization fields.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/organizations/organization_fields/#list-organization-fields}
   * @example const orgFields = await client.organizationfields.list();
   */
async list() {
return this.getAll(['organization_fields']);
⋮----
/**
   * Show a specific organization field.
   * @param {number} organizationFieldID - The ID of the organization field.
   * @returns {Promise<{response: object, result: object}>} The organization field details.
   * @throws {Error} Throws an error if the organization field is not found.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/organizations/organization_fields/#show-organization-field}
   * @example const orgField = await client.organizationfields.show(12345);
   */
async show(organizationFieldID) {
return this.get(['organization_fields', organizationFieldID]);
⋮----
/**
   * Create a new organization field.
   * @param {object} organizationField - The organization field object.
   * @returns {Promise<{response: object, result: object}>} The newly created organization field.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/organizations/organization_fields/#create-organization-field}
   * @example const newOrgField = await client.organizationfields.create({ type: 'text', title: 'Support description' });
   */
async create(organizationField) {
return this.post(['organization_fields'], organizationField);
⋮----
/**
   * Update an existing organization field.
   * @param {number} organizationFieldID - The ID of the organization field to update.
   * @param {object} organizationField - The updated organization field object.
   * @returns {Promise<{response: object, result: object}>} The updated organization field.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/organizations/organization_fields/#update-organization-field}
   * @example const updatedOrgField = await client.organizationfields.update(12345, { title: 'New title' });
   */
async update(organizationFieldID, organizationField) {
return this.put(
⋮----
/**
   * Delete an organization field.
   * @param {number} organizationFieldID - The ID of the organization field to delete.
   * @returns {Promise<object>} Response indicating the deletion status.
   * @throws {Error} Throws an error if the deletion fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/organizations/organization_fields/#delete-organization-field}
   * @example await client.organizationfields.delete(12345);
   */
async delete(organizationFieldID) {
return super.delete(['organization_fields', organizationFieldID]);
⋮----
/**
   * Reorder the organization fields.
   * @param {Array<number>} organizationFieldIds - An array of organization field IDs in the desired order.
   * @returns {Promise<{response: object, result: object}>} The reordered organization fields.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/organizations/organization_fields/#reorder-organization-field}
   * @example await client.organizationfields.reorder([3, 4]);
   */
async reorder(organizationFieldIds) {
return this.put(['organization_fields', 'reorder'], {
</file>

<file path="src/clients/core/organizationmemberships.js">
// Organizations.js: Client for the zendesk API.
⋮----
/**
 * Client class for interacting with the Zendesk Organization Memberships API.
 * @see {@link https://developer.zendesk.com/api-reference/ticketing/organizations/organization_memberships/}
 */
class OrganizationMemberships extends Client {
⋮----
/**
   * List all organization memberships.
   * @returns {Promise<Array<OrganizationMembership>>} A promise resolving to an array of organization memberships.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/organizations/organization_memberships/#list-memberships}
   * @example
   * const memberships = await client.organizationmemberships.list();
   */
async list() {
return this.getAll(['organization_memberships']);
⋮----
/**
   * List organization memberships by a specific user ID.
   * @param {number} userID - The user ID.
   * @returns {Promise<Array<OrganizationMembership>>} A promise resolving to an array of organization memberships for the user.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/organizations/organization_memberships/#list-memberships}
   * @example
   * const memberships = await client.organizationmemberships.listByUser(123);
   */
async listByUser(userID) {
return this.getAll(['users', userID, 'organization_memberships']);
⋮----
/**
   * List organization memberships by a specific organization ID.
   * @param {number} organiationID - The organization ID.
   * @returns {Promise<Array<OrganizationMembership>>} A promise resolving to an array of organization memberships for the organization.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/organizations/organization_memberships/#list-memberships}
   * @example
   * const memberships = await client.organizationmemberships.listByOrganization(456);
   */
async listByOrganization(organiationID) {
return this.getAll([
⋮----
/**
   * Retrieve a specific organization membership by its ID.
   * @param {number} organizationMembershipID - The organization membership ID.
   * @returns {Promise<{response: object, result: OrganizationMembership}>} A promise resolving to the organization membership.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/organizations/organization_memberships/#show-membership}
   * @example
   * const membership = await client.organizationmemberships.show(789);
   */
async show(organizationMembershipID) {
return this.get(['organization_memberships', organizationMembershipID]);
⋮----
/**
   * Retrieve a specific organization membership by user ID and membership ID.
   * @param {number} userID - The user ID.
   * @param {number} organizationMembershipID - The organization membership ID.
   * @returns {Promise<{response: object, result: OrganizationMembership}>} A promise resolving to the organization membership.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/organizations/organization_memberships/#show-membership}
   * @example
   * const membership = await client.organizationmemberships.showByUser(123, 789);
   */
async showByUser(userID, organizationMembershipID) {
return this.get([
⋮----
/**
   * Create a new organization membership.
   * @param {OrganizationMembership} organizationMembership - The organization membership data.
   * @returns {Promise<{response: object, result: OrganizationMembership}>} A promise resolving to the created organization membership.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/organizations/organization_memberships/#create-membership}
   * @example
   * const newMembership = await client.organizationmemberships.create({ user_id: 123, organization_id: 456 });
   */
async create(organizationMembership) {
return this.post(['organization_memberships'], {
⋮----
/**
   * Create a new organization membership for a specific user.
   * @param {number} userID - The user ID.
   * @param {object} organizationMembership - The organization membership data.
   * @param {number} organizationMembership.organization_id - The organization id of the membership.
   * @returns {Promise<{response: object, result: OrganizationMembership}>} A promise resolving to the created organization membership.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/organizations/organization_memberships/#create-membership}
   * @example
   * const newMembership = await client.organizationmemberships.createByUser(123, { organization_id: 456 });
   */
async createByUser(userID, organizationMembership) {
return this.post(['users', userID, 'organization_memberships'], {
⋮----
/**
   * An object that relates a Zendesk user to a Zendesk organization.
   * @typedef {object} OrganizationMembership
   * @property {number} user_id The Zendesk identifier of the user.
   * @property {number} organization_id The Zendesk identifier of the
   *   organization.
   */
⋮----
/**
   * Create multiple organization memberships at once.
   * @param {OrganizationMembership[]} organizationMemberships - An array of organization membership data.
   * @returns {Promise<{response: object, result: object}>} A promise resolving to a job status.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/organizations/organization_memberships/#create-many-memberships}
   * @example
   * const jobStatus = await client.organizationmemberships.createMany([{ user_id: 123, organization_id: 456 }, ...]);
   */
async createMany(organizationMemberships) {
return this.post(['organization_memberships', 'create_many'], {
⋮----
/**
   * Delete a specific organization membership by its ID.
   * @param {number} organizationMembershipID - The organization membership ID.
   * @returns {Promise<void>} A promise indicating the completion of the delete operation.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/organizations/organization_memberships/#delete-membership}
   * @example
   * await client.organizationmemberships.delete(789);
   */
async delete(organizationMembershipID) {
return super.delete(['organization_memberships', organizationMembershipID]);
⋮----
/**
   * Delete a specific organization membership by user ID and membership ID.
   * @param {number} userID - The user ID.
   * @param {number} organizationMembershipID - The organization membership ID.
   * @returns {Promise<void>} A promise indicating the completion of the delete operation.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/organizations/organization_memberships/#delete-membership}
   * @example
   * await client.organizationmemberships.deleteByUser(123, 789);
   */
async deleteByUser(userID, organizationMembershipID) {
return super.delete([
⋮----
/**
   * Delete multiple organization memberships by their IDs.
   * @param {number[]} organizationMembershipIDs - An array of organization membership IDs.
   * @returns {Promise<object>} A promise resolving to a job status.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/organizations/organization_memberships/#bulk-delete-memberships}
   * @example
   * const jobStatus = await client.organizationmemberships.deleteMany([789, 790, 791]);
   */
async deleteMany(organizationMembershipIDs) {
⋮----
{ids: organizationMembershipIDs.join(',')},
⋮----
/**
   * Set a specific organization membership as the default for a user.
   * @param {number} userID - The user ID.
   * @param {number} organizationMembershipID - The organization membership ID.
   * @returns {Promise<{response: object, result: OrganizationMembership}>} A promise resolving to the updated organization membership.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/organizations/organization_memberships/#set-membership-as-default}
   * @example
   * const updatedMembership = await client.organizationmemberships.setDefault(123, 789);
   */
async makeDefault(userID, organizationMembershipID) {
return this.put([
</file>

<file path="src/clients/core/organizations.js">
// File: organizations.js
⋮----
/**
 * @class
 * Client for interacting with the Zendesk Organizations API.
 * @see {@link https://developer.zendesk.com/api-reference/ticketing/organizations/organizations/}
 */
class Organizations extends Client {
⋮----
/**
   * Lists all organizations.
   * @returns {Promise<object>} The list of organizations.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/organizations/organizations/#list-organizations}
   * @example const organizations = await client.organizations.list();
   */
async list() {
return this.getAll(['organizations']);
⋮----
/**
   * Lists organizations associated with a specific user.
   * @param {number} userID - The ID of the user.
   * @returns {Promise<object[]>} List of organizations associated with the user.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/organizations/organizations/#list-organizations}
   * @example const userOrgs = await client.organizations.listByUser(12345);
   */
async listByUser(userID) {
return this.getAll(['users', userID, 'organizations']);
⋮----
/**
   * Counts the number of organizations.
   * @returns {Promise<number>} Number of organizations.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/organizations/organizations/#count-organizations}
   * @example const orgCount = await client.organizations.count();
   */
async count() {
const result = await this.getAll(['organizations', 'count']);
⋮----
/**
   * Counts the number of organizations associated with a specific user.
   * @param {number} userID - The ID of the user.
   * @returns {Promise<number>} Number of organizations associated with the user.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/organizations/organizations/#count-organizations}
   * @example const userOrgCount = await client.organizations.countByUser(12345);
   */
async countByUser(userID) {
const result = await this.getAll([
⋮----
/**
   * Retrieves related information for a specific organization.
   * @param {number} organizationID - The ID of the organization.
   * @returns {Promise<{response: object, result: object}>} Object containing related information of the organization.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/organizations/organizations/#show-organizations-related-information}
   * @example const relatedInfo = await client.organizations.related(12345);
   */
async related(organizationID) {
return this.get(['organizations', organizationID, 'related']);
⋮----
/**
   * Views a specific organization by its ID.
   * @param {number} organizationID - The ID of the organization.
   * @returns {Promise<{response: object, result: object}>} The organization's details.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/organizations/organizations/#show-organization}
   * @example const organization = await client.organizations.show(12345);
   */
async show(organizationID) {
return this.get(['organizations', organizationID]);
⋮----
/**
   * Retrieves details of multiple organizations based on their IDs.
   * @param {number[]} organizationIDs - Array of organization IDs.
   * @returns {Promise<object[]>} List of organizations' details.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/organizations/organizations/#show-many-organizations}
   * @example const orgDetails = await client.organizations.showMany([12345, 67890]);
   */
async showMany(organizationIDs) {
return this.getAll([
⋮----
/**
   * Retrieves details of multiple organizations based on their External IDs.
   * @param {string[]} externalOrganizationIds - Array of organization IDs.
   * @returns {Promise<object[]>} List of organizations' details.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/organizations/organizations/#show-many-organizations}
   * @example const orgDetails = await client.organizations.showMany(['12345', '67890']);
   */
async showManyByExternalIds(externalOrganizationIds) {
⋮----
/**
   * Creates a new organization.
   * @param {object} organization - The organization object to create.
   * @returns {Promise<{response: object, result: object}>} The created organization's details.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/organizations/organizations/#create-organization}
   * @example const newOrganization = await client.organizations.create({ name: 'New Org' });
   */
async create(organization) {
return this.post(['organizations'], organization);
⋮----
/**
   * Creates multiple organizations.
   * @param {object[]} organizations - An array of organization objects to create.
   * @returns {Promise<{response: object, result: object[]}>} Details of the created organizations.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/organizations/organizations/#create-many-organizations}
   * @example const newOrganizations = await client.organizations.createMany([{ name: 'Org1' }, { name: 'Org2' }]);
   */
async createMany(organizations) {
return this.post(['organizations', 'create_many'], organizations);
⋮----
/**
   * Creates or updates an organization.
   * @param {object} organization - The organization object to create or update.
   * @returns {Promise<{response: object, result: object}>} The created or updated organization's details.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/organizations/organizations/#create-or-update-organization}
   * @example const org = await client.organizations.createOrUpdate({ id: 12345, name: 'Updated Name' });
   */
async createOrUpdate(organization) {
return this.post(['organizations', 'create_or_update'], organization);
⋮----
/**
   * Updates a specific organization by its ID.
   * @param {number} organizationID - The ID of the organization.
   * @param {object} organization - The updated organization object.
   * @returns {Promise<{response: object, result: object}>} The updated organization's details.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/organizations/organizations/#update-organization}
   * @example const updatedOrganization = await client.organizations.update(12345, { name: 'New Name' });
   */
async update(organizationID, organization) {
return this.put(['organizations', organizationID], organization);
⋮----
/**
   * Updates multiple organizations.
   * @param {object[]} organizations - An array of organization objects to update.
   * @returns {Promise<{response: object, result: object[]}>} Details of the updated organizations.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/organizations/organizations/#update-many-organizations}
   * @example const updatedOrganizations = await client.organizations.updateMany([{ id: 1, name: 'Updated Org1' }, { id: 2, name: 'Updated Org2' }]);
   */
async updateMany(organizations) {
return this.put(['organizations', 'update_many'], organizations);
⋮----
/**
   * Creates or updates an organization, similar to `createOrUpdate` method.
   * @param {object} organization - The organization object to upsert.
   * @returns {Promise<{response: object, result: object}>} The created or updated organization's details.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/organizations/organizations/#create-or-update-organization}
   * @example const org = await client.organizations.upsert({ id: 12345, name: 'Upserted Name' });
   */
async upsert(organization) {
⋮----
/**
   * Deletes a specific organization by its ID.
   * @param {number} organizationID - The ID of the organization to delete.
   * @returns {Promise<void>}
   * @throws {Error} Throws an error if deletion fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/organizations/organizations/#delete-organization}
   * @example await client.organizations.delete(12345);
   */
async delete(organizationID) {
return super.delete(['organizations', organizationID]);
⋮----
/**
   * Deletes multiple organizations based on their IDs.
   * @param {number[]} organizationIds - Array of organization IDs.
   * @returns {Promise<object>} Returns a job status JSON object.
   * @throws {Error} Throws an error if deletion fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/organizations/organizations/#bulk-delete-organizations}
   * @example await client.organizations.bulkDelete([12345, 67890]);
   */
async bulkDelete(organizationIds) {
return super.delete([
⋮----
/**
   * Deletes multiple organizations based on their external IDs.
   * @param {string[]} organizationExternalIds - Array of organization external IDs.
   * @returns {Promise<object>} Returns a job status JSON object.
   * @throws {Error} Throws an error if deletion fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/organizations/organizations/#bulk-delete-organizations}
   * @example await client.organizations.bulkDeleteByExternalId(['ext-12345', 'ext-67890']);
   */
async bulkDeleteByExternalId(organizationExternalIds) {
⋮----
/**
   * Searches organizations based on external ID.
   * @param {number} externalID - Search by externalID.
   * @returns {Promise<object[]>} List of organizations matching the search.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/organizations/organizations/#search-organizations-by-external-id}
   * @example const foundOrganizations = await client.organizations.search(1234);
   */
async search(externalID) {
return this.getAll(['organizations', 'search', {external_id: externalID}]);
⋮----
/**
   * Autocompletes organization names based on provided parameters.
   * @param {object} parameters - Parameters for autocomplete.
   * @returns {Promise<object[]>} List of organizations matching the autocomplete.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/organizations/organizations/#autocomplete-organizations}
   * @example const autocompleteResults = await client.organizations.autocomplete({ name: 'Test' });
   */
async autocomplete(parameters) {
return this.getAll(['organizations', 'autocomplete', parameters]);
⋮----
/**
   * Incrementally exports organizations with an include parameter.
   * @param {string|Date} startTime - Start time for incremental export.
   * @param {string} include - Data to include in the export.
   * @returns {Promise<object[]>} List of organizations in the incremental export.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/ticket-management/incremental_exports/#incremental-organization-export}
   * @example const exportedOrganizations = await client.organizations.incrementalInclude('2023-01-01T12:00:00Z', 'users');
   */
async incrementalInclude(startTime, include) {
⋮----
/**
   * Incrementally exports organizations.
   * @param {string|Date} startTime - Start time for incremental export.
   * @returns {Promise<object[]>} List of organizations in the incremental export.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/ticket-management/incremental_exports/#incremental-organization-export}
   * @example const exportedOrganizations = await client.organizations.incremental('2023-01-01T12:00:00Z');
   */
async incremental(startTime) {
⋮----
/**
   * Fetches a sample of incremental organization exports.
   * @param {string|Date} startTime - Start time for the sample.
   * @returns {Promise<{response: object, result: object[]}>} Sample list of organizations in the incremental export.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/ticket-management/incremental_exports/#incremental-sample-export}
   * @example const sampleExportedOrganizations = await client.organizations.incrementalSample('2023-01-01T12:00:00Z');
   */
async incrementalSample(startTime) {
return this.get([
</file>

<file path="src/clients/core/permissiongroups.js">
// File: permissiongroups.js
⋮----
/**
 * Client for the Zendesk Permission Groups API.
 * @see {@link https://developer.zendesk.com/api-reference/help_center/help-center-api/permission_groups/}
 */
class PermissionGroups extends Client {
⋮----
/**
   * List all permission groups.
   * @returns {Promise<object[]>} Array of permission group objects.
   * @throws {Error} Throws an error if the API call fails.
   * @see {@link https://developer.zendesk.com/api-reference/help_center/help-center-api/permission_groups/#list-permission-groups}
   * @example
   * const groups = await client.permissiongroups.list();
   */
async list() {
return this.getAll(['guide', 'permission_groups']);
⋮----
/**
   * Retrieve details of a specific permission group.
   * @param {number} groupID - The ID of the permission group.
   * @returns {Promise<{response: object, result: object}>} Permission group object.
   * @throws {Error} Throws an error if the API call fails.
   * @see {@link https://developer.zendesk.com/api-reference/help_center/help-center-api/permission_groups/#show-permission-group}
   * @example
   * const group = await client.permissiongroups.show(42);
   */
async show(groupID) {
return this.get(['guide', 'permission_groups', groupID]);
⋮----
/**
   * Create a new permission group.
   * @param {object} group - The permission group details.
   * @param {string} group.name - Name of the permission group.
   * @param {number[]} [group.edit] - Array of user segments that have edit privileges.
   * @param {number[]} [group.publish] - Array of user segments that have publish privileges.
   * @returns {Promise<{response: object, result: object}>} Newly created permission group object.
   * @throws {Error} Throws an error if the API call fails.
   * @see {@link https://developer.zendesk.com/api-reference/help_center/help-center-api/permission_groups/#create-permission-group}
   * @example
   * const newGroup = await client.permissiongroups.create({
   *   name: "Printer Experts",
   *   edit: [12],
   *   publish: [34]
   * });
   */
async create(group) {
return this.post(['guide', 'permission_groups'], group);
⋮----
/**
   * Update an existing permission group.
   * @param {number} groupID - The ID of the permission group.
   * @param {object} group - The permission group details to update.
   * @param {string} [group.name] - Name of the permission group.
   * @param {number[]} [group.edit] - Array of user segments that have edit privileges.
   * @param {number[]} [group.publish] - Array of user segments that have publish privileges.
   * @returns {Promise<{response: object, result: object}>} Updated permission group object.
   * @throws {Error} Throws an error if the API call fails.
   * @see {@link https://developer.zendesk.com/api-reference/help_center/help-center-api/permission_groups/#update-permission-group}
   * @example
   * const updatedGroup = await client.permissiongroups.update(42, {
   *   name: "Super Printer Experts"
   * });
   */
async update(groupID, group) {
return this.put(['guide', 'permission_groups', groupID], group);
⋮----
/**
   * Delete a permission group.
   * @param {number} groupID - The ID of the permission group.
   * @returns {Promise<void>}
   * @throws {Error} Throws an error if the API call fails.
   * @see {@link https://developer.zendesk.com/api-reference/help_center/help-center-api/permission_groups/#delete-permission-group}
   * @example
   * await client.permissiongroups.delete(42);
   */
async delete(groupID) {
return super.delete(['guide', 'permission_groups', groupID]);
</file>

<file path="src/clients/core/policies.js">
// File: policies.js
⋮----
/**
 * Represents the SLA Policies functionality of Zendesk.
 * @see {@link https://developer.zendesk.com/api-reference/ticketing/business-rules/sla_policies/}
 */
class Policies extends Client {
/**
   * Constructs a new Policies instance.
   * @param {object} options - Options to configure the client.
   */
⋮----
/**
   * List all the SLA Policies.
   * @returns {Promise<object>} - A promise that resolves to the list of policies.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/business-rules/sla_policies/#list-sla-policies}
   * @example const policiesList = await client.policies.list();
   */
async list() {
return this.getAll(['slas/policies']);
⋮----
/**
   * Show details of a specific SLA Policy.
   * @param {number} policyID - The ID of the SLA Policy.
   * @returns {Promise<{response: object, result: object}>} - A promise that resolves to the policy details.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/business-rules/sla_policies/#show-sla-policy}
   * @example const policyDetails = await client.policies.show(25);
   */
async show(policyID) {
return this.get(['slas/policies', policyID]);
⋮----
/**
   * Create a new SLA Policy.
   * @param {object} policy - The SLA Policy object to be created.
   * @returns {Promise<{response: object, result: object}>} - A promise that resolves to the newly created policy details.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/business-rules/sla_policies/#create-sla-policy}
   * @example
   * const newPolicy = {
   *   title: "Incidents",
   *   description: "For urgent incidents, we will respond to tickets in 10 minutes",
   *   //... other policy properties
   * };
   * const createdPolicy = await client.policies.create(newPolicy);
   */
async create(policy) {
return this.post(['slas/policies'], policy);
⋮----
/**
   * Update an existing SLA Policy.
   * @param {number} policyID - The ID of the SLA Policy to be updated.
   * @param {object} policy - The updated SLA Policy object.
   * @returns {Promise<{response: object, result: object}>} - A promise that resolves to the updated policy details.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/business-rules/sla_policies/#update-sla-policy}
   * @example
   * const updatedPolicy = {
   *   title: "Urgent Incidents",
   *   //... other updated policy properties
   * };
   * const result = await client.policies.update(25, updatedPolicy);
   */
async update(policyID, policy) {
return this.put(['slas/policies', policyID], policy);
⋮----
/**
   * Delete a specific SLA Policy.
   * @param {number} policyID - The ID of the SLA Policy to be deleted.
   * @returns {Promise<void>} - A promise that resolves when the policy has been deleted.
   * @throws Will throw an error if the deletion is unsuccessful.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/business-rules/sla_policies/#delete-sla-policy}
   * @example await client.policies.delete(25);
   */
async delete(policyID) {
return super.delete(['slas/policies', policyID]);
⋮----
/**
   * Reorder SLA Policies based on provided IDs.
   * @param {number[]} slaPolicyIds - Array of SLA policy IDs in the desired order.
   * @returns {Promise<{response: object, result: object}>} The response from the Zendesk API.
   * @throws {Error} Throws an error if there's an issue with the request.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/business-rules/sla_policies/#reorder-sla-policies}
   * @example
   * const reorderedResponse = await client.policies.reorder([55, 12]);
   */
async reorder(slaPolicyIds) {
return this.put(['slas/policies/reorder'], {sla_policy_ids: slaPolicyIds});
⋮----
/**
   * Retrieve a list of supported filter definition items.
   * @returns {Promise<{response: object, result: object}>} The response from the Zendesk API containing supported filter definitions.
   * @throws {Error} Throws an error if there's an issue with the request.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/business-rules/sla_policies/#retrieve-supported-filter-definition-items}
   * @example
   * const definitions = await client.policies.getDefinitions();
   */
async getDefinitions() {
return this.get(['slas/policies/definitions']);
</file>

<file path="src/clients/core/requests.js">
// File: requests.js: A Request is a Ticket object as seen by an end-user
⋮----
/**
 * Class representing Ticket Requests.
 * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/ticket-requests/ |Zendesk Requests}
 */
⋮----
class Requests extends Client {
⋮----
/**
   * List all ticket requests.
   * @param {object} [parameters] - Optional parameters.
   * @param {string} [parameters.sort_by] - Sort by "updated_at" or "created_at".
   * @param {string} [parameters.sort_order] - Sort order: "asc" or "desc".
   * @returns {Promise<object[]>} List of ticket requests.
   * @throws {Error} Throws an error if request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/ticket-requests/#list-requests}
   * @example const requests = await client.requests.list({ sort_by: 'updated_at', sort_order: 'desc' });
   */
async list(parameters) {
return this.getAll(['requests', parameters]);
⋮----
/**
   * List all ticket requests that are open.
   * @param {object} [parameters] - Optional parameters.
   * @param {string} [parameters.sort_by] - Sort by "updated_at" or "created_at".
   * @param {string} [parameters.sort_order] - Sort order: "asc" or "desc".
   * @returns {Promise<object[]>} List of open ticket requests.
   * @throws {Error} Throws an error if request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/ticket-requests/#list-requests}
   * @example const openRequests = await client.requests.listOpen();
   */
async listOpen(parameters) {
return this.getAll(['requests', 'open', parameters]);
⋮----
/**
   * List all ticket requests that are solved.
   * @param {object} [parameters] - Optional parameters.
   * @param {string} [parameters.sort_by] - Sort by "updated_at" or "created_at".
   * @param {string} [parameters.sort_order] - Sort order: "asc" or "desc".
   * @returns {Promise<object[]>} List of solved ticket requests.
   * @throws {Error} Throws an error if request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/ticket-requests/#list-requests}
   * @example const solvedRequests = await client.requests.listSolved();
   */
async listSolved(parameters) {
return this.getAll(['requests', 'solved', parameters]);
⋮----
/**
   * List all CCD ticket requests.
   * @param {object} [parameters] - Optional parameters.
   * @param {string} [parameters.sort_by] - Sort by "updated_at" or "created_at".
   * @param {string} [parameters.sort_order] - Sort order: "asc" or "desc".
   * @returns {Promise<object[]>} List of CCD ticket requests.
   * @throws {Error} Throws an error if request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/ticket-requests/#list-requests}
   * @example const ccdRequests = await client.requests.listCCD();
   */
async listCCD(parameters) {
return this.getAll(['requests', 'ccd', parameters]);
⋮----
/**
   * List all ticket requests by a specific user.
   * @param {number} userID - The ID of the user.
   * @param {object} [parameters] - Optional parameters.
   * @param {string} [parameters.sort_by] - Sort by "updated_at" or "created_at".
   * @param {string} [parameters.sort_order] - Sort order: "asc" or "desc".
   * @returns {Promise<object[]>} List of ticket requests for the specified user.
   * @throws {Error} Throws an error if request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/ticket-requests/#list-requests}
   * @example const userRequests = await client.requests.listByUser(12345);
   */
async listByUser(userID, parameters) {
return this.getAll(['users', userID, 'requests', parameters]);
⋮----
/**
   * List all ticket requests by a specific organization.
   * @param {number} orgID - The ID of the organization.
   * @param {object} [parameters] - Optional parameters.
   * @param {string} [parameters.sort_by] - Sort by "updated_at" or "created_at".
   * @param {string} [parameters.sort_order] - Sort order: "asc" or "desc".
   * @returns {Promise<object[]>} List of ticket requests for the specified organization.
   * @throws {Error} Throws an error if request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/ticket-requests/#list-requests}
   * @example const orgRequests = await client.requests.listByOrganization(6789);
   */
async listByOrganization(orgID, parameters) {
return this.getAll(['organizations', orgID, 'requests', parameters]);
⋮----
/**
   * Search for ticket requests.
   * @param {object} parameters - Search parameters.
   * @param {string} parameters.query - The query string.
   * @returns {Promise<{response: object, result: object[]}>} List of matching ticket requests.
   * @throws {Error} Throws an error if request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/ticket-requests/#search-requests}
   * @example const searchResults = await client.requests.search({ query: 'printer' });
   */
async search(parameters) {
return this.get(['requests', 'search', parameters]);
⋮----
/**
   * Retrieve a specific ticket request.
   * @param {number} requestId - The ID of the ticket request.
   * @returns {Promise<{response: object, result: object}>} The ticket request details.
   * @throws {Error} Throws an error if request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/ticket-requests/#show-request}
   * @example const requestDetails = await client.requests.show(1234);
   */
async show(requestId) {
return this.get(['requests', requestId]);
⋮----
/**
   * Retrieve a specific ticket request.
   * @param {number} requestId - The ID of the ticket request.
   * @returns {Promise<{response: object, result: object}>} The ticket request details.
   * @throws {Error} Throws an error if request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/ticket-requests/#show-request}
   * @example const requestDetails = await client.requests.show(1234);
   * @deprecated Use show instead
   */
async getRequest(requestId) {
return this.show(requestId);
⋮----
/**
   * Create a new ticket request.
   * @param {object} requestDetails - Details of the ticket request to be created.
   * @returns {Promise<{response: object, result: object}>} The created ticket request details.
   * @throws {Error} Throws an error if request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/ticket-requests/#create-request}
   * @example
   * const newRequest = {
   *   subject: 'Help!',
   *   comment: {
   *     body: 'My printer is on fire!'
   *   }
   * };
   * const createdRequest = await client.requests.create(newRequest);
   */
async create(requestDetails) {
return this.post(['requests'], requestDetails);
⋮----
/**
   * Update an existing ticket request.
   * @param {number} requestId - The ID of the ticket request.
   * @param {object} updateDetails - Details to update.
   * @returns {Promise<{response: object, result: object}>} The updated ticket request details.
   * @throws {Error} Throws an error if request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/ticket-requests/#update-request}
   * @example
   * const updatedInfo = {
   *   comment: {
   *     body: 'Thanks!'
   *   }
   * };
   * const updatedRequest = await client.requests.update(1234, updatedInfo);
   */
async update(requestId, updateDetails) {
return this.put(['requests', requestId], updateDetails);
⋮----
/**
   * List all comments for a specific ticket request.
   * @param {number} requestId - The ID of the ticket request.
   * @returns {Promise<object[]>} List of comments for the ticket request.
   * @throws {Error} Throws an error if request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/ticket-requests/#listing-comments}
   * @example const comments = await client.requests.listComments(1234);
   */
async listComments(requestId) {
return this.getAll(['requests', requestId, 'comments']);
⋮----
/**
   * Retrieve a specific comment from a ticket request.
   * @param {number} requestId - The ID of the ticket request.
   * @param {number} commentId - The ID of the comment to retrieve.
   * @returns {Promise<object>} The comment details for the specified ticket request.
   * @throws {Error} Throws an error if request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/ticket-requests/#listing-comments}
   * @example const comment = await client.requests.getComment(1234, 5678);
   */
async getComment(requestId, commentId) {
return this.getAll(['requests', requestId, 'comments', commentId]);
</file>

<file path="src/clients/core/satisfactionratings.js">
/**
 * Client for the Satisfaction Ratings section of the Zendesk API.
 * @see {@link https://developer.zendesk.com/api-reference/ticketing/ticket-management/satisfaction_ratings/}
 */
class SatisfactionRatings extends Client {
/**
   * Creates a new SatisfactionRatings instance.
   * @param {object} options - Options for initializing the client.
   */
⋮----
/**
   * Lists all satisfaction ratings.
   * @returns {Array} A list of satisfaction ratings.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/ticket-management/satisfaction_ratings/#list-satisfaction-ratings}
   * @example const ratings = await client.satisfactionratings.list();
   */
async list() {
return this.getAll(['satisfaction_ratings']);
⋮----
/**
   * Lists all received satisfaction ratings.
   * @returns {Array} A list of received satisfaction ratings.
   * @example const ratingsReceived = await client.satisfactionratings.received();
   */
async received() {
return this.getAll(['satisfaction_ratings', 'received']);
⋮----
/**
   * Retrieves details of a specific satisfaction rating.
   * @param {number} satisfactionRatingID - The ID of the satisfaction rating to retrieve.
   * @returns {Promise<{response: object, result: object}>} Details of the satisfaction rating.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/ticket-management/satisfaction_ratings/#show-satisfaction-rating}
   * @example const ratingDetails = await client.satisfactionratings.show(12345);
   */
async show(satisfactionRatingID) {
return this.get(['satisfaction_ratings', satisfactionRatingID]);
⋮----
/**
   * Creates a satisfaction rating for a ticket.
   * @param {number} ticketID - The ID of the ticket.
   * @param {object} satisfactionRating - The details of the satisfaction rating to create.
   * @returns {Promise<{response: object, result: object}>} The created satisfaction rating.
   * @throws Will throw an error if the requester is not an end user of the ticket or if the ticket is not solved.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/ticket-management/satisfaction_ratings/#create-a-satisfaction-rating}
   * @example
   * const rating = {
   *   satisfaction_rating: { score: "good", comment: "Awesome support." }
   * };
   * const newRating = await client.satisfactionratings.create(12345, rating);
   */
async create(ticketID, satisfactionRating) {
return this.post(
⋮----
/**
   * Incrementally exports satisfaction ratings based on a start time.
   * @param {number} startTime - The start time for the incremental export (Unix epoch time).
   * @returns {Promise<{response: object, result: object[]}>} A list of satisfaction ratings from the specified start time.
   * @see {@link https://developer.zendesk.com/api-reference/live-chat/chat-api/incremental_export/#start-time}
   * @example const ratingsExported = await client.satisfactionratings.incremental(1498151194);
   */
async incremental(startTime) {
this.get(['satisfaction_ratings', {start_time: startTime}]);
</file>

<file path="src/clients/core/search.js">
// Search.js: Client for the zendesk API.
⋮----
/**
 * Client for the Zendesk Search API.
 * @see {@link https://developer.zendesk.com/api-reference/ticketing/ticket-management/search/}
 */
class Search extends Client {
⋮----
/**
   * Search for the given term and retrieve results.
   * @param {string} searchTerm - The term to search for.
   * @returns {Promise<{response: object, result: object}>} A JSON object with the search results.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/ticket-management/search/#list-search-results}
   * @example
   * const results = await client.search.query('open tickets');
   */
async query(searchTerm) {
return this.get(['search', {query: searchTerm}]);
⋮----
/**
   * Search for the given term and retrieve all results.
   * @param {string} searchTerm - The term to search for.
   * @returns {Promise<Array>} An array of search results.
   * @example
   * const allResults = await client.search.queryAll('open tickets');
   */
async queryAll(searchTerm) {
return this.getAll(['search', {query: searchTerm}]);
⋮----
/**
   * Anonymous search for the given term and retrieve results.
   * @param {string} searchTerm - The term to search for.
   * @returns {Promise<{response: object, result: object}>} A JSON object with the search results.
   * @example
   * const anonResults = await client.search.queryAnonymous('open tickets');
   */
async queryAnonymous(searchTerm) {
return this.get(['portal', 'search', {query: searchTerm}]);
⋮----
/**
   * Anonymous search for the given term and retrieve all results.
   * @param {string} searchTerm - The term to search for.
   * @returns {Promise<Array>} An array of search results.
   * @example
   * const allAnonResults = await client.search.queryAnonymousAll('open tickets');
   */
async queryAnonymousAll(searchTerm) {
return this.getAll(['portal', 'search', {query: searchTerm}]);
⋮----
/**
   * Retrieve the count of search results for the given term.
   * @param {string} searchTerm - The term to search for.
   * @returns {Promise<{response: object, result: object}>} An Object with the number of items matching the query.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/ticket-management/search/#show-results-count}
   * @example
   * const { count } = await client.search.showResultsCount('open tickets');
   */
async showResultsCount(searchTerm) {
return this.get(['search', 'count', {query: searchTerm}]);
⋮----
/**
   * Export the search results for the given term.
   * @param {string} searchTerm - The term to search for.
   * @param {string} objectType - The type of object to return (ticket, organization, user, or group).
   * @param {number} [pageSize=100] - The number of results per page.
   * @returns {Promise<Array>} An array of search results.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/ticket-management/search/#export-search-results}
   * @example
   * const { results } = await client.search.exportResults('open tickets', 'ticket');
   */
async exportResults(searchTerm, objectType, pageSize = 100) {
return this.getAll([
</file>

<file path="src/clients/core/sessions.js">
// File: sessions.js
⋮----
/**
 * Client class for interacting with Zendesk's Sessions API.
 * @see {@link https://developer.zendesk.com/api-reference/ticketing/account-configuration/sessions/}
 */
class Sessions extends Client {
⋮----
/**
   * List all sessions.
   * @returns {Promise<object[]>} Array of sessions.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/account-configuration/sessions/#list-sessions}
   * @example
   * const sessions = await client.sessions.get();
   */
async list() {
return this.getAll(['sessions']);
⋮----
/**
   * List sessions by user ID.
   * @param {number} userId - The ID of the user.
   * @returns {Promise<object[]>} Array of sessions.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/account-configuration/sessions/#list-sessions}
   * @example
   * const sessions = await client.sessions.getByUserId(12345);
   */
async getByUserId(userId) {
return this.getAll(['users', userId, 'sessions']);
⋮----
/**
   * Retrieve a specific session by user ID and session ID.
   * @param {number} userId - The ID of the user.
   * @param {number} sessionId - The ID of the session.
   * @returns {Promise<{response: object, result: object}>} Session details.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/account-configuration/sessions/#show-session}
   * @example
   * const session = await client.sessions.getByUserIdBySessionId(12345, 67890);
   */
async getByUserIdBySessionId(userId, sessionId) {
return this.get(['users', userId, 'sessions', sessionId]);
⋮----
/**
   * Retrieve details of the currently authenticated session.
   * @returns {Promise<{response: object, result: object}>} Session details.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/account-configuration/sessions/#show-the-currently-authenticated-session}
   * @example
   * const session = await client.sessions.getMyAuthenticatedSession();
   */
async getMyAuthenticatedSession() {
return this.get(['users', 'me', 'session']);
⋮----
/**
   * Delete a specific session by user ID and session ID.
   * @param {number} userId - The ID of the user.
   * @param {number} sessionId - The ID of the session.
   * @returns {Promise<void>}
   * @throws Will throw an error if the request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/account-configuration/sessions/#delete-session}
   * @example
   * await client.sessions.deleteByUserIdBySessionId(12345, 67890);
   */
async deleteByUserIdBySessionId(userId, sessionId) {
return super.delete(['users', userId, 'sessions', sessionId]);
⋮----
/**
   * Delete all sessions for a specific user by user ID.
   * @param {number} userId - The ID of the user.
   * @returns {Promise<void>}
   * @throws Will throw an error if the request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/account-configuration/sessions/#bulk-delete-sessions}
   * @example
   * await client.sessions.bulkDeleteByUserId(12345);
   */
async bulkDeleteByUserId(userId) {
return super.delete(['users', userId, 'sessions']);
⋮----
/**
   * Logs out the current authenticated user.
   * @returns {Promise<void>}
   * @throws Will throw an error if the request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/account-configuration/sessions/#delete-the-authenticated-session}
   * @example
   * await client.sessions.logMeOut();
   */
async logMeOut() {
return super.delete(['users', 'me', 'sessions']);
</file>

<file path="src/clients/core/sharingagreement.js">
// SharingAgreement.js: Client for the zendesk API.
⋮----
/**
 * Class representing the SharingAgreement API methods.
 * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/sharing_agreements/}
 */
class SharingAgreement extends Client {
⋮----
/**
   * List all Sharing Agreements.
   * @returns {Promise<{response: object, result: object[]}>} An array of Sharing Agreement objects.
   * @throws {Error} Throws an error if the request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/sharing_agreements/#list-sharing-agreements}
   * @example
   * const sharingAgreements = await client.sharingagreement.show();
   */
async show() {
return this.get(['sharing_agreements']);
⋮----
/**
   * Show a specific Sharing Agreement by its ID.
   * @param {number} id The ID of the Sharing Agreement.
   * @returns {Promise<{response: object, result: object}>} The Sharing Agreement object.
   * @throws {Error} Throws an error if the request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/sharing_agreements/#show-a-sharing-agreement}
   * @example
   * const sharingAgreement = await client.sharingagreement.showById(12345);
   */
async showById(id) {
return this.get(['sharing_agreements', id]);
⋮----
/**
   * Create a new Sharing Agreement.
   * @param {object} data The data for the new Sharing Agreement.
   * @returns {Promise<{response: object, result: object}>} The created Sharing Agreement object.
   * @throws {Error} Throws an error if the request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/sharing_agreements/#create-sharing-agreement}
   * @example
   * const newSharingAgreement = {
   *   remote_subdomain: "Foo"
   * };
   * const createdAgreement = await client.sharingagreement.create(newSharingAgreement);
   */
async create(data) {
return this.post(['sharing_agreements'], {sharing_agreement: data});
⋮----
/**
   * Update an existing Sharing Agreement.
   * @param {number} id The ID of the Sharing Agreement to update.
   * @param {object} data The data to update the Sharing Agreement with. Only 'status' is allowed.
   * @returns {Promise<{response: object, result: object}>} The updated Sharing Agreement object.
   * @throws {Error} Throws an error if the request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/sharing_agreements/#update-a-sharing-agreement}
   * @example
   * const updatedData = {
   *   status: "accepted"
   * };
   * const updatedAgreement = await client.sharingagreement.update(12345, updatedData);
   */
async update(id, data) {
return this.put(['sharing_agreements', id], {sharing_agreement: data});
⋮----
/**
   * Delete a specific Sharing Agreement by its ID.
   * @param {number} id The ID of the Sharing Agreement.
   * @returns {Promise<void>}
   * @throws {Error} Throws an error if the request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/sharing_agreements/#delete-a-sharing-agreement}
   * @example
   * await client.sharingagreement.delete(12345);
   */
async delete(id) {
return super.delete(['sharing_agreements', id]);
</file>

<file path="src/clients/core/sideconversations.js">
// File: sideconversations.js
⋮----
/**
 * @typedef {object} Participant
 * @property {number} [user_id] - If the participant is an agent, the agent's user id
 * @property {string} [name] - The name of the participant
 * @property {string} [email] - The email address of the participant
 * @property {string} [slack_workspace_id] - If the participant is a Slack user or channel, the Slack workspace id
 * @property {string} [slack_channel_id] - If the participant is a Slack channel, the Slack channel id
 * @property {string} [support_group_id] - If the participant is a Support ticket, the support group id
 * @property {string} [support_agent_id] - If the participant is a Support ticket, the support agent id
 * @property {string} [msteams_channel_id] - If the participant is a Microsoft teams channel, the Teams channel id
 */
⋮----
/**
 * @typedef {object} Message
 * @property {string} [subject] - The subject of the message
 * @property {string} [preview_text] - A plain text string describing the message
 * @property {string} [body] - The plain text version of the body of the message
 * @property {string} [html_body] - The HTML version of the body of the message
 * @property {Participant} [from] - The participant who sent the message. See Participants
 * @property {Participant[]} to - The list of participants the message was sent to. See Participants
 * @property {string[]} [attachment_ids] - List of tokens received from uploading files for comment attachments. The files are attached by creating or updating tickets with the tokens. See Attaching files in Tickets
 * @property {{[key: string]: string}} [external_ids] - A key-value object where all values are strings. Used for message metadata
 */
⋮----
/**
 * @typedef {object} UpdateSideConversation
 * @property {string} [subject] - The subject of the side conversation
 * @property {'open' | 'closed'} [state] - A plain text string describing the side conversation
 */
⋮----
/**
 * @typedef {object} SideConversation
 * @property {string} created_at - The time the side conversation was created
 * @property {{[key: string]: string}} [external_ids] - A key-value store of metadata. All values must be strings
 * @property {string} id - Automatically assigned when the side conversation is created
 * @property {string} message_added_at - The time of the last message on the side conversation
 * @property {Participant[]} participants - An array of participants in the side conversation. See Participants
 * @property {string} preview_text - A plain text text describing the side conversation
 * @property {string} [state] - The state of the side conversation
 * @property {string} state_updated_at - The time of the update of the state of the side conversation
 * @property {string} [subject] - The subject of the side conversation
 * @property {number} ticket_id - The parent ticket id of the side conversation
 * @property {string} updated_at - The time of the last update of the side conversation
 * @property {string} url - The API url of the side conversation
 */
⋮----
/**
 * @typedef {object} SideConversationAttachment
 * @property {string} content_type - The content type of the attachment. This is read-only.
 * @property {number} height - The height of the attachment image. This is read-only.
 * @property {string} id - The id of the side conversation attachment. This is read-only.
 * @property {string} name - The name of the attachment.
 * @property {number} size - The size of the attachment. This is read-only.
 * @property {number} width - The width of the attachment image. This is read-only.
 */
⋮----
/**
 * @typedef {object} CreateSideConversation
 * @property {Message} message - The side conversation object.
 * @property {{[key: string]: string}} [external_ids] - A key-value object where all values are strings. Used for conversation metadata
 */
⋮----
/**
 * @typedef {object} SideConversationResponse
 * @property {SideConversation} side_conversation - The side conversation object.
 */
⋮----
class SideConversations extends Client {
/**
   * @param {import('../client').ClientOptions} options - The client options.
   */
⋮----
/**
   * Create a Side Conversation.
   * @param {number} ticketId - The ID of the ticket.
   * @param {CreateSideConversation} message - The side conversation object.
   * @returns {Promise<{response: object, result: SideConversationResponse}>} The created ticket details.
   * @throws {Error} If the details are not provided or invalid.
   * @see https://developer.zendesk.com/api-reference/ticketing/side_conversation/side_conversation/#create-side-conversation
   */
async create(ticketId, message) {
return this.post(['tickets', ticketId, 'side_conversations'], message);
⋮----
/**
   * Reply to a Side Conversation.
   * @param {number} ticketId - The ID of the ticket.
   * @param {string} sideConversationId - The ID of the side conversation.
   * @param {{message: Message}} message - The reply object.
   * @returns {Promise<{response: object, result: SideConversationResponse}>} The created ticket details.
   * @throws {Error} If the details are not provided or invalid.
   * @see https://developer.zendesk.com/api-reference/ticketing/side_conversation/side_conversation/#reply-to-side-conversation
   */
async reply(ticketId, sideConversationId, message) {
return this.post(
⋮----
/**
   * Update to a Side Conversation.
   * @param {number} ticketId - The ID of the ticket.
   * @param {string} sideConversationId - The ID of the side conversation.
   * @param {{side_conversation: Partial<UpdateSideConversation>}} update - The update object.
   * @returns {Promise<{response: object, result: SideConversationResponse}>} The updated ticket details.
   * @throws {Error} If the details are not provided or invalid.
   * @see https://developer.zendesk.com/api-reference/ticketing/side_conversation/side_conversation/#update-side-conversation
   */
async update(ticketId, sideConversationId, update) {
return this.put(
⋮----
/**
   * List all the Side Conversations tickets.
   * @param {number} ticketID - the Id of the ticket.
   * @returns {Promise<SideConversation[]>} An array of side conversation objects.
   * @see https://developer.zendesk.com/api-reference/ticketing/side_conversation/side_conversation/#list-side-conversations
   * @example
   * const tickets = await client.sideconversations.list(123);
   */
async list(ticketID) {
return this.getAll(['tickets', ticketID, 'side_conversations']);
⋮----
/**
   * Retrieve a specific ticket by its ID.
   * @param {number} ticketId - The ID of the ticket.
   * @param {string} sideConversationId - The ID of the side conversation.
   * @returns {Promise<{response: object, result: SideConversation}>} Details of the side conversation.
   * @throws {Error} If the ticket ID is not provided or invalid.
   * @see https://developer.zendesk.com/api-reference/ticketing/side_conversation/side_conversation/#show-side-conversation
   * @example
   * const ticket = await client.sideconversations.show(12345, 12333);
   */
async show(ticketId, sideConversationId) {
return this.get([
⋮----
/**
   * Upload a file to be attached to a ticket comment.
   * @param {ArrayBuffer} file - The file data.
   * @param {object} options - The file options.
   * @param {string} options.filename - The name of the file.
   * @returns {Promise<SideConversationAttachment>} The attachment details.
   */
async attachments(file, {filename}) {
const form = new FormData();
form.append('file', new Blob([file]), filename);
return this.requestUpload(
</file>

<file path="src/clients/core/suspendedtickets.js">
// SuspendedTickets.js: Client for the zendesk API.
⋮----
/**
 * A thin wrapper around the Zendesk Suspended Tickets API
 * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/suspended_tickets/}
 */
class SuspendedTickets extends Client {
⋮----
/**
   * List all suspended tickets
   * @returns {Promise} Returns a promise that resolves to a list of suspended tickets
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/suspended_tickets/#list-suspended-tickets}
   * @example const tickets = await client.suspendedtickets.list();
   */
async list() {
return this.getAll(['suspended_tickets']);
⋮----
/**
   * Get details of a specific suspended ticket by ID
   * @param {number} suspendedTicketID - ID of the suspended ticket
   * @returns {Promise<{response: object, result: object}>} Returns a promise that resolves to the details of the suspended ticket
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/suspended_tickets/#show-suspended-ticket}
   * @example const ticket = await client.suspendedtickets.show(12345);
   */
async show(suspendedTicketID) {
return this.get(['suspended_tickets', suspendedTicketID]);
⋮----
/**
   * Recover a specific suspended ticket by ID
   * @param {number} suspendedTicketID - ID of the suspended ticket to recover
   * @returns {Promise<{response: object, result: object}>} Returns a promise that resolves once the ticket has been recovered
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/suspended_tickets/#recover-suspended-ticket}
   * @example await client.suspendedtickets.recover(12345);
   */
async recover(suspendedTicketID) {
return this.put(['suspended_tickets', suspendedTicketID, 'recover']);
⋮----
/**
   * Recover multiple suspended tickets by their IDs
   * @param {Array<number>} suspendedTicketIDs - An array of suspended ticket IDs to recover
   * @returns {Promise<{response: object, result: object}>} Returns a promise that resolves once the tickets have been recovered
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/suspended_tickets/#recover-multiple-suspended-tickets}
   * @example await client.suspendedtickets.recoverMany([12345, 67890]);
   */
async recoverMany(suspendedTicketIDs) {
return this.put([
⋮----
/**
   * Delete a specific suspended ticket by ID
   * @param {number} suspendedTicketID - ID of the suspended ticket to delete
   * @returns {Promise} Returns a promise that resolves once the ticket has been deleted
   * @throws Will throw an error if the request fails
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/suspended_tickets/#delete-suspended-ticket}
   * @example await client.suspendedtickets.delete(12345);
   */
async delete(suspendedTicketID) {
return super.delete(['suspended_tickets', suspendedTicketID]);
⋮----
/**
   * Deletes multiple suspended tickets by their IDs
   * @param {Array<number>} suspendedTicketIDs - An array of suspended ticket IDs to delete
   * @returns {Promise} Returns a promise that resolves once the tickets have been deleted
   * @throws Will throw an error if the request fails
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/suspended_tickets/#delete-multiple-suspended-tickets}
   * @example await client.suspendedtickets.destroyMany([12345, 67890]);
   */
async destroyMany(suspendedTicketIDs) {
return super.delete([
⋮----
/**
   * @param {Array<number>} suspendedTicketIDs - An array of suspended ticket IDs to delete
   * @returns {Promise} Returns a promise that resolves once the tickets have been deleted
   * @throws Will throw an error if the request fails
   * @example await client.suspendedtickets.deleteMany([12345, 67890]);
   * @deprecated Use `destroyMany` method instead.
   * Deletes multiple suspended tickets by their IDs. This method is deprecated.
   */
async deleteMany(suspendedTicketIDs) {
return this.destroyMany(suspendedTicketIDs);
⋮----
/**
   * Get attachments for a specific suspended ticket by ID
   * @param {number} suspendedTicketID - ID of the suspended ticket to get attachments from
   * @returns {Promise<{response: object, result: object}>} Returns a promise that resolves to the attachments of the suspended ticket
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/suspended_tickets/#suspended-ticket-attachments}
   * @example const attachments = await client.suspendedtickets.attachments(12345);
   */
async attachments(suspendedTicketID) {
return this.post(['suspended_tickets', suspendedTicketID, 'attachments']);
⋮----
/**
   * Export suspended tickets for the Zendesk Support instance
   * @returns {Promise<{response: object, result: object}>} Returns a promise that resolves once the export request has been initiated
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/suspended_tickets/#export-suspended-tickets}
   * @example await client.suspendedtickets.exportTickets();
   */
async exportTickets() {
return this.post(['suspended_tickets', 'export']);
</file>

<file path="src/clients/core/tags.js">
/**
 * Client for the Zendesk Tags API.
 * @see {@link https://developer.zendesk.com/api-reference/sales-crm/resources/tags/}
 */
class Tags extends Client {
⋮----
/**
   * Retrieves all tags available to the user.
   * @returns {Promise<object[]>} A promise that resolves with the list of tags.
   * @see {@link https://developer.zendesk.com/api-reference/sales-crm/resources/tags/#retrieve-all-tags}
   * @example
   * const client = createClient({...});
   * const tags = await client.tags.list();
   */
async list() {
return this.getAll(['tags']);
⋮----
/**
   * Creates a new tag.
   * @param {object} tagData - Data for the new tag.
   * @param {string} tagData.name - Name of the tag.
   * @param {string} tagData.resource_type - Type of resource the tag is attached to (lead, contact, deal).
   * @returns {Promise<{response: object, result: object}>} A promise that resolves with the created tag.
   * @throws Will throw an error if the API call fails.
   * @see {@link https://developer.zendesk.com/api-reference/sales-crm/resources/tags/#create-a-tag}
   * @example
   * const client = createClient({...});
   * const newTag = await client.tags.create({ name: 'important', resource_type: 'contact' });
   */
async create(tagData) {
return this.post(['tags'], tagData);
⋮----
/**
   * Retrieves a single tag by its ID.
   * @param {number} id - Unique identifier of the tag.
   * @returns {Promise<{response: object, result: object}>} A promise that resolves with the retrieved tag.
   * @throws Will throw an error if the API call fails.
   * @see {@link https://developer.zendesk.com/api-reference/sales-crm/resources/tags/#retrieve-a-single-tag}
   * @example
   * const client = createClient({...});
   * const tag = await client.tags.show(5);
   */
async show(id) {
return this.get(['tags', id]);
⋮----
/**
   * Updates a tag's information.
   * @param {number} id - Unique identifier of the tag.
   * @param {object} updatedData - Data to update.
   * @returns {Promise<{response: object, result: object}>} A promise that resolves with the updated tag.
   * @throws Will throw an error if the API call fails.
   * @see {@link https://developer.zendesk.com/api-reference/sales-crm/resources/tags/#update-a-tag}
   * @example
   * const client = createClient({...});
   * const updatedTag = await client.tags.update(5, { name: 'super important' });
   */
async update(id, updatedData) {
return this.put(['tags', id], updatedData);
⋮----
/**
   * Deletes a tag by its ID.
   * @param {number} id - Unique identifier of the tag.
   * @returns {Promise<void>} A promise that resolves when the tag has been deleted.
   * @throws Will throw an error if the API call fails.
   * @see {@link https://developer.zendesk.com/api-reference/sales-crm/resources/tags/#delete-a-tag}
   * @example
   * const client = createClient({...});
   * await client.tags.delete(1);
   */
async delete(id) {
return super.delete(['tags', id]);
</file>

<file path="src/clients/core/targetfailures.js">
// Targetfailures.js: Client for the zendesk API.
⋮----
/**
 * A class for interacting with the Zendesk Target Failures API.
 * @see {@link https://developer.zendesk.com/api-reference/ticketing/targets/target_failures/}
 */
class TargetFailures extends Client {
⋮----
/**
   * Lists the 25 most recent target failures, per target.
   * @returns {Array} An array of target failures.
   * @throws {Error} Throws an error if the request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/targets/target_failures/#list-target-failures}
   * @example
   * const client = createClient({...});
   * const failures = await client.targetfailures.list();
   */
async list() {
return this.getAll(['target_failures']);
⋮----
/**
   * Retrieves the details of a specific target failure by its ID.
   * @param {number} targetFailureID - The ID of the target failure.
   * @returns {Promise<{response: object, result: object}>} The target failure details.
   * @throws {Error} Throws an error if the request fails or if the target failure ID is not found.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/targets/target_failures/#show-target-failure}
   * @example
   * const client = createClient({...});
   * const failureDetails = await client.targetfailures.show(6001326);
   */
async show(targetFailureID) {
return this.get(['target_failures', targetFailureID]);
</file>

<file path="src/clients/core/targets.js">
/**
 * Represents a client for the Zendesk Targets API.
 * @see {@link https://developer.zendesk.com/api-reference/ticketing/targets/targets/}
 */
class Targets extends Client {
⋮----
/**
   * Lists all targets.
   * @returns {Promise<object>} A promise that resolves to the list of targets.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/targets/targets/#list-targets}
   * @example
   * const targets = await client.targets.list();
   */
async list() {
return this.getAll(['targets']);
⋮----
/**
   * Retrieves details of a specific target.
   * @param {number} targetId - The ID of the target to retrieve.
   * @returns {Promise<{response: object, result: object}>} A promise that resolves to the target details.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/targets/targets/#show-target}
   * @example
   * const target = await client.targets.show(12345);
   */
async show(targetId) {
return this.get(['targets', targetId]);
⋮----
/**
   * Creates a new target.
   * @param {object} target - The target data.
   * @returns {Promise<{response: object, result: object}>} A promise that resolves to the created target's details.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/targets/targets/#create-target}
   * @example
   * const target = {
   *   type: 'email_target',
   *   title: 'Test Email Target',
   *   email: 'hello@example.com',
   *   subject: 'Test Target'
   * };
   * const response = await client.targets.create(target);
   */
async create(target) {
return this.post(['targets'], target);
⋮----
/**
   * Updates a specific target.
   * @param {number} targetId - The ID of the target to update.
   * @param {object} target - The updated target data.
   * @returns {Promise<{response: object, result: object}>} A promise that resolves to the updated target's details.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/targets/targets/#update-target}
   * @example
   * const updatedData = { email: 'updated@example.com' };
   * const response = await client.targets.update(12345, updatedData);
   */
async update(targetId, target) {
return this.put(['targets', targetId], target);
⋮----
/**
   * Deletes a specific target.
   * @param {number} targetId - The ID of the target to delete.
   * @returns {Promise<void>} A promise that resolves once the target has been deleted.
   * @throws {Error} Throws an error if deletion fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/targets/targets/#delete-target}
   * @example
   * await client.targets.delete(12345);
   */
async delete(targetId) {
return super.delete(['targets', targetId]);
</file>

<file path="src/clients/core/ticketaudits.js">
/**
 * Client for the Zendesk Ticket Audits API.
 * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/ticket_audits/}
 */
class TicketAudits extends Client {
⋮----
/**
   * List all ticket audits. Note: Archived tickets are not included.
   * @returns {Promise<Array<object>>} Returns an array of ticket audit objects.
   * @throws {Error} Throws an error if request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/ticket_audits/#list-all-ticket-audits}
   * @example
   * const client = createClient({...});
   * const allAudits = await client.ticketaudits.listAll();
   */
async listAll() {
return this.get('ticket_audits');
⋮----
/**
   * List all audits for a specified ticket.
   * @param {number} ticketID - The ID of the ticket.
   * @returns {Promise<Array<object>>} Returns an array of ticket audit objects.
   * @throws {Error} Throws an error if request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/ticket_audits/#list-audits-for-a-ticket}
   * @example
   * const client = createClient({...});
   * const audits = await client.ticketaudits.list(12345);
   */
async list(ticketID) {
return this.getAll(['tickets', ticketID, 'audits']);
⋮----
/**
   * Get an approximate count of audits for a specified ticket.
   * @param {number} ticketID - The ID of the ticket.
   * @returns {Promise<{response: object, result: number}>} Returns an approximate count of audits.
   * @throws {Error} Throws an error if request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/ticket_audits/#count-audits-for-a-ticket}
   * @example
   * const client = createClient({...});
   * const auditCount = await client.ticketaudits.count(12345);
   */
async count(ticketID) {
return this.get(['tickets', ticketID, 'audits', 'count']);
⋮----
/**
   * Show details of a specific ticket audit.
   * @param {number} ticketID - The ID of the ticket.
   * @param {number} auditID - The ID of the ticket audit.
   * @returns {Promise<{response: object, result: object}>} Returns details of the ticket audit.
   * @throws {Error} Throws an error if request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/ticket_audits/#show-audit}
   * @example
   * const client = createClient({...});
   * const auditDetails = await client.ticketaudits.show(12345, 67890);
   */
async show(ticketID, auditID) {
return this.get(['tickets', ticketID, 'audits', auditID]);
⋮----
/**
   * Change a comment from public to private for a specific ticket audit.
   * @param {number} ticketID - The ID of the ticket.
   * @param {number} auditID - The ID of the ticket audit.
   * @returns {Promise<{response: object, result: object}>} Returns the updated ticket audit details.
   * @throws {Error} Throws an error if request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/ticket_audits/#change-a-comment-from-public-to-private}
   * @example
   * const client = createClient({...});
   * await client.ticketaudits.makePrivate(12345, 67890);
   */
async makePrivate(ticketID, auditID) {
return this.put(['tickets', ticketID, 'audits', auditID, 'make_private']);
</file>

<file path="src/clients/core/ticketevents.js">
// TicketEvents.js: Client for the zendesk API.
⋮----
/**
 * TicketEvents class to handle operations related to the Zendesk Ticket Events API.
 * @see {@link https://developer.zendesk.com/api-reference/ticketing/ticket-management/incremental_exports/}
 */
class TicketEvents extends Client {
⋮----
/**
   * Fetches incremental ticket events with optional inclusion.
   * @param {number} startTime - The time to start the incremental export from.
   * @param {string} include - Additional entities to include in the response.
   * @returns {Promise<object>} Returns the result of the API call.
   * @throws {Error} Throws an error if the API call fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/ticket-management/incremental_exports/#incremental-ticket-event-export}
   * @example const result = await client.ticketevents.incrementalInclude(1632505559, 'comment_events');
   */
async incrementalInclude(startTime, include) {
return this.getAll([
⋮----
/**
   * Fetches incremental ticket events.
   * @param {number} startTime - The time to start the incremental export from.
   * @returns {Promise<object>} Returns the result of the API call.
   * @throws {Error} Throws an error if the API call fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/ticket-management/incremental_exports/#incremental-ticket-event-export}
   * @example const result = await client.ticketevents.incremental(1632505559);
   */
async incremental(startTime) {
⋮----
/**
   * Fetches a sample of ticket events for testing purposes.
   * @param {number} startTime - The time to start the incremental export from.
   * @returns {Promise<{response: object, result: object}>} Returns the result of the API call.
   * @throws {Error} Throws an error if the API call fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/ticket-management/incremental_exports/#incremental-sample-export}
   * @example const result = await client.ticketevents.incrementalSample(1632505559);
   */
async incrementalSample(startTime) {
return this.get([
</file>

<file path="src/clients/core/ticketexport.js">
/**
 * TicketExport class for interacting with the Zendesk Ticket Export API.
 * @see {@link https://developer.zendesk.com/api-reference/ticketing/ticket-management/incremental_exports/}
 */
class TicketExport extends Client {
⋮----
/**
   * Export tickets that changed since the provided start time using the time-based approach.
   * @param {number} start_time - The time to start the incremental export from.
   * @returns {Promise<{response: object, result: object}>} Returns the response from the Zendesk API.
   * @throws Will throw an error if the request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/ticket-management/incremental_exports/#incremental-ticket-export-time-based}
   * @example const tickets = await client.ticketexport.export(1332034771);
   */
async export(start_time) {
return this.get(['incremental', 'tickets', '?start_time=' + start_time]);
⋮----
/**
   * Export tickets with associated users and groups since the provided start time.
   * @param {number} start_time - The time to start the incremental export from.
   * @returns {Promise<{response: object, result: object}>} Returns the response from the Zendesk API with users and groups included.
   * @throws Will throw an error if the request fails.
   * @example const ticketsWithUsers = await client.ticketexport.exportWithUser(1332034771);
   */
async exportWithUser(start_time) {
return this.get([
⋮----
/**
   *
   *Export incremental tickets based on a specified start time and optional include parameters.
   * @param {string} startTime - The start time for exporting incremental tickets.
   * @param {string} include - Optional parameters to include in the export.
   * @returns {Promise<Array>} A promise that resolves with an array of exported incremental tickets.
   * @throws {Error} If `startTime` is not a valid string.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/tickets/#ticket-export-incremental-include}
   * @example
   * // Export incremental tickets based on a start time with optional include parameters
   * const startTime = '2023-01-01T00:00:00Z';
   * const include = 'users,groups';
   * const incrementalTickets = await client.tickets.ticketexport(startTime, include);
   */
async exportWithInclude(startTime, include) {
return this.getAll([
⋮----
/**
   * Export tickets using the cursor-based approach.
   * @param {number} start_time - The time to start the incremental export from.
   * @param {string} [cursor] - The cursor pointer for subsequent requests.
   * @returns {Promise<{response: object, result: object}>} Returns the response from the Zendesk API.
   * @throws Will throw an error if the request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/ticket-management/incremental_exports/#incremental-ticket-export-cursor-based}
   * @example const cursorTickets = await client.ticketexport.exportCursor(1332034771, 'MTU3NjYxMzUzOS4wfHw0NTF8');
   */
async exportCursor(start_time, cursor) {
return this.get(['incremental', 'tickets', 'cursor', {start_time, cursor}]);
⋮----
/**
   * @param {number} ticketID - The ID of the ticket.
   * @returns {Promise<object>} Returns the list of audits for the ticket.
   * @throws Will throw an error if the request fails.
   * @example const ticketAudits = await client.ticketexport.exportAudit(12345);
   * @deprecated Use the `list` method from the `TicketAudits` class instead.
   * Retrieve all audits for a specific ticket.
   */
async exportAudit(ticketID) {
return this.getAll(['tickets', ticketID, 'audits']);
⋮----
/**
   
   Export a sample of tickets based on a specified start time.
   * @param {string} startTime - The start time for exporting the sample of tickets.
   * @returns {Promise<{response: object, result: object}>} A promise that resolves with the exported sample of tickets.
   * @throws {Error} If `startTime` is not a valid string.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/ticket-management/incremental_exports/#incremental-sample-export}
   * @example
   * // Export a sample of tickets based on a start time
   * const startTime = '2023-01-01T00:00:00Z';
   * const exportedSample = await client.ticketexport.sample(startTime);
   */
async sample(startTime) {
return this.get(['exports', 'tickets', 'sample', {start_time: startTime}]);
</file>

<file path="src/clients/core/ticketfields.js">
// Ticketfields.js: Client for the zendesk API.
⋮----
/**
 * @typedef {object} TicketField
 * @property {boolean} active - Whether this field is available
 * @property {string} agent_description - A description of the ticket field that only agents can see
 * @property {boolean} collapsed_for_agents - If true, the field is shown to agents by default. If false, the field is hidden alongside infrequently used fields. Classic interface only
 * @property {string} created_at - The time the custom ticket field was created
 * @property {string} creator_app_name - Name of the app that created the ticket field, or a null value if no app created the ticket field
 * @property {number} creator_user_id - The id of the user that created the ticket field, or a value of "-1" if an app created the ticket field
 * @property {Array} custom_field_options - Required and presented for a custom ticket field of type "multiselect" or "tagger"
 * @property {Array} custom_statuses - List of customized ticket statuses. Only presented for a system ticket field of type "custom_status"
 * @property {string} description - Describes the purpose of the ticket field to users
 * @property {boolean} editable_in_portal - Whether this field is editable by end users in Help Center
 * @property {number} id - Automatically assigned when created
 * @property {number} position - The relative position of the ticket field on a ticket. Note that for accounts with ticket forms, positions are controlled by the different forms
 * @property {string} raw_description - The dynamic content placeholder if present, or the description value if not. See Dynamic Content
 * @property {string} raw_title - The dynamic content placeholder if present, or the title value if not. See Dynamic Content
 * @property {string} raw_title_in_portal - The dynamic content placeholder if present, or the "title_in_portal" value if not. See Dynamic Content
 * @property {string} regexp_for_validation - For "regexp" fields only. The validation pattern for a field value to be deemed valid
 * @property {object} relationship_filter - A filter definition that allows your autocomplete to filter down results
 * @property {string} relationship_target_type - A representation of what type of object the field references. Options are "zen:user", "zen:organization", "zen:ticket", or "zen:custom_object:{key}" where key is a custom object key. For example "zen:custom_object:apartment".
 * @property {boolean} removable - If false, this field is a system field that must be present on all tickets
 * @property {boolean} required - If true, agents must enter a value in the field to change the ticket status to solved
 * @property {boolean} required_in_portal - If true, end users must enter a value in the field to create the request
 * @property {number} sub_type_id - For system ticket fields of type "priority" and "status". Defaults to 0. A "priority" sub type of 1 removes the "Low" and "Urgent" options. A "status" sub type of 1 adds the "On-Hold" option
 * @property {Array} system_field_options - Presented for a system ticket field of type "tickettype", "priority" or "status"
 * @property {string} tag - For "checkbox" fields only. A tag added to tickets when the checkbox field is selected
 * @property {string} title - The title of the ticket field
 * @property {string} title_in_portal - The title of the ticket field for end users in Help Center
 * @property {string} type - System or custom field type. Editable for custom field types and only on creation. See Create Ticket Field
 * @property {string} updated_at - The time the custom ticket field was last updated
 * @property {string} url - The URL for this resource
 * @property {boolean} visible_in_portal - Whether this field is visible to end users in Help Center
 */
⋮----
/**
 * Client for the Zendesk Ticket Fields API.
 * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/ticket_fields/}
 */
class TicketFields extends Client {
⋮----
/**
   * Lists all ticket fields.
   * @returns {Promise<Array<TicketField>>}} Returns an array of ticket fields.
   * @throws {Error} Throws an error if the request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/ticket_fields/#list-ticket-fields}
   * @example
   * const client = createClient({...});
   * const fields = await client.ticketfields.list();
   */
async list() {
return this.getAll(['ticket_fields']);
⋮----
/**
   * Lists all ticket fields with locale.
   * @param {string} locale - The locale code to filter ticket fields (e.g., 'sv' for Swedish).
   * @returns {Promise<Array<TicketField>>}} Returns an array of ticket fields by locale.
   * @throws {Error} Throws an error if the request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/ticket_fields/#list-ticket-fields}
   * @example
   * const client = createClient({...});
   * const fields = await client.ticketfields.listWithLocale('sv');
   */
async listWithLocale(locale) {
return this.getAll(['ticket_fields', {locale}]);
⋮----
/**
   * Retrieves a specific ticket field by ID.
   * @param {number} ticketFieldId - The ID of the ticket field to retrieve.
   * @returns {Promise<{response: object, result: TicketField}>} Returns the details of the ticket field.
   * @throws {Error} Throws an error if the request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/ticket_fields/#show-ticket-field}
   * @example
   * const client = createClient({...});
   * const field = await client.ticketfields.show(12345);
   */
async show(ticketFieldId) {
return this.get(['ticket_fields', ticketFieldId]);
⋮----
/**
   * Retrieves the count of ticket fields.
   * @returns {Promise<{response: object, result: object}>} Returns the count of ticket fields.
   * @throws {Error} Throws an error if the request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/ticket_fields/#count-ticket-fields}
   * @example
   * const client = createClient({...});
   * const count = await client.ticketfields.count();
   */
async count() {
return this.get(['ticket_fields', 'count']);
⋮----
/**
   * Creates a new ticket field.
   * @param {object} ticketField - The properties of the ticket field to create.
   * @returns {Promise<{response: object, result: TicketField}>} Returns the created ticket field.
   * @throws {Error} Throws an error if the request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/ticket_fields/#create-ticket-field}
   * @example
   * const client = createClient({...});
   * const newField = await client.ticketfields.create({
   *   type: 'text',
   *   title: 'New Field'
   * });
   */
async create(ticketField) {
return this.post(['ticket_fields'], ticketField);
⋮----
/**
   * Updates a specific ticket field by ID.
   * @param {number} ticketFieldId - The ID of the ticket field to update.
   * @param {object} ticketField - The updated properties of the ticket field.
   * @returns {Promise<{response: object, result: TicketField}>} Returns the updated ticket field.
   * @throws {Error} Throws an error if the request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/ticket_fields/#update-ticket-field}
   * @example
   * const client = createClient({...});
   * const updatedField = await client.ticketfields.update(12345, {
   *   title: 'Updated Field'
   * });
   */
async update(ticketFieldId, ticketField) {
return this.put(['ticket_fields', ticketFieldId], ticketField);
⋮----
/**
   * Deletes a specific ticket field by ID.
   * @param {number} ticketFieldId - The ID of the ticket field to delete.
   * @returns {Promise<void>}
   * @throws {Error} Throws an error if the request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/ticket_fields/#delete-ticket-field}
   * @example
   * const client = createClient({...});
   * await client.ticketfields.delete(12345);
   */
async delete(ticketFieldId) {
return super.delete(['ticket_fields', ticketFieldId]);
⋮----
/**
   * Lists all options of a ticket field.
   * @param {number} ticketFieldId - The ID of the ticket field to retrieve options from.
   * @returns {Promise<{response: object, result: Array<object>}>} Returns an array of options for the ticket field.
   * @throws {Error} Throws an error if the request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/ticket_fields/#list-ticket-field-options}
   * @example
   * const client = createClient({...});
   * const options = await client.ticketfields.listOptions(12345);
   */
async listOptions(ticketFieldId) {
return this.get(['ticket_fields', ticketFieldId, 'options']);
⋮----
/**
   * Retrieves a specific option of a ticket field by ID.
   * @param {number} ticketFieldId - The ID of the ticket field.
   * @param {number} optionID - The ID of the option to retrieve.
   * @returns {Promise<{response: object, result: object}>} Returns the option details.
   * @throws {Error} Throws an error if the request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/ticket_fields/#show-ticket-field-option}
   * @example
   * const client = createClient({...});
   * const option = await client.ticketfields.showOption(12345, 67890);
   */
async showOption(ticketFieldId, optionID) {
return this.get(['ticket_fields', ticketFieldId, 'options', optionID]);
⋮----
/**
   * Creates or updates an option of a ticket field.
   * @param {number} ticketFieldId - The ID of the ticket field.
   * @param {object} option - The properties of the option to create or update.
   * @returns {Promise<{response: object, result: object}>} Returns the created or updated option.
   * @throws {Error} Throws an error if the request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/ticket_fields/#create-or-update-ticket-field-option}
   * @example
   * const client = createClient({...});
   * const newOption = await client.ticketfields.createOrUpdateOption(12345, {
   *   custom_field_option: {
   *     name: 'Option Name',
   *     value: 'Option Value'
   *   }
   * });
   */
async createOrUpdateOption(ticketFieldId, option) {
return this.post(['ticket_fields', ticketFieldId, 'options'], option);
⋮----
/**
   * Deletes a specific option of a ticket field by ID.
   * @param {number} ticketFieldId - The ID of the ticket field.
   * @param {number} optionID - The ID of the option to delete.
   * @returns {Promise<void>}
   * @throws {Error} Throws an error if the request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/ticket_fields/#delete-ticket-field-option}
   * @example
   * const client = createClient({...});
   * await client.ticketfields.deleteOption(12345, 67890);
   */
async deleteOption(ticketFieldId, optionID) {
return super.delete(['ticket_fields', ticketFieldId, 'options', optionID]);
</file>

<file path="src/clients/core/ticketforms.js">
// Ticketforms.js: Client for the zendesk API.
⋮----
/**
 * Client for interacting with the Zendesk TicketForms API.
 * @see {@link https://developer.zendesk.com/rest_api/docs/support#ticket-forms}
 */
class TicketForms extends Client {
⋮----
/**
   * List ticket forms based on the provided query parameters.
   * @param {object} [options] - Optional query parameters.
   * @param {boolean} [options.active] - true returns active ticket forms; false returns inactive ticket forms. If not present, returns both.
   * @param {boolean} [options.associated_to_brand] - true returns the ticket forms of the brand specified by the url's subdomain.
   * @param {boolean} [options.end_user_visible] - true returns ticket forms where end_user_visible; false returns ticket forms that are not end-user visible. If not present, returns both.
   * @param {boolean} [options.fallback_to_default] - true returns the default ticket form when the criteria defined by the parameters results in a set without active and end-user visible ticket forms.
   * @returns {Promise<Array>} An array of ticket forms.
   * @throws {Error} Throws an error if there is an issue with the API call.
   * @see {@link https://developer.zendesk.com/rest_api/docs/support#list-ticket-forms}
   * @example
   * const client = createClient({...});
   * const activeTicketForms = await client.ticketforms.list({ active: true });
   * const allTicketForms = await client.ticketforms.list();
   */
async list(options = {}) {
return this.getAll(['ticket_forms', options]);
⋮----
/**
   * Retrieve a specific ticket form by its ID.
   * @param {number} ticketFormID - The ID of the ticket form to retrieve.
   * @returns {Promise<{response: object, result: object}>} The requested ticket form.
   * @throws {Error} Throws an error if there is an issue with the API call.
   * @see {@link https://developer.zendesk.com/rest_api/docs/support#show-ticket-form}
   * @example
   * const client = createClient({...});
   * const ticketForm = await client.ticketforms.show(12345);
   */
async show(ticketFormID) {
return this.get(['ticket_forms', ticketFormID]);
⋮----
/**
   * Creates a new Ticket Form.
   * @param {object} ticketForm - The ticket form object to be created.
   * @returns {Promise<{response: object, result: object}>} - A promise that resolves to the created ticket form.
   * @throws {Error} - Throws an error if the API call fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/ticket_forms/#create-ticket-form}
   * @example
   * const ticketFormData = {
   *   name: "Snowboard Problem",
   *   end_user_visible: true,
   *   // ... other properties ...
   * };
   * const newTicketForm = await client.ticketforms.create(ticketFormData);
   */
async create(ticketForm) {
return this.post(['ticket_forms'], ticketForm);
⋮----
/**
   * Update a specific ticket form by its ID.
   * @param {number} ticketFormID - The ID of the ticket form to update.
   * @param {object} ticketForm - The updated ticket form object.
   * @returns {Promise<{response: object, result: object}>} The updated ticket form.
   * @throws {Error} Throws an error if there is an issue with the API call.
   * @see {@link https://developer.zendesk.com/rest_api/docs/support#update-ticket-form}
   * @example
   * const client = createClient({...});
   * const updatedForm = await client.ticketforms.update(12345, {name: 'Updated Form'});
   */
async update(ticketFormID, ticketForm) {
return this.put(['ticket_forms', ticketFormID], ticketForm);
⋮----
/**
   * Deletes a Ticket Form by its ID.
   * @param {number} ticketFormID - The ID of the ticket form to be deleted.
   * @returns {Promise<void>} - A promise that resolves when the ticket form is deleted.
   * @throws {Error} - Throws an error if the API call fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/ticket_forms/#delete-ticket-form}
   * @example
   * await client.ticketforms.delete(12345); // Replace 12345 with the actual ticket form ID.
   */
async delete(ticketFormID) {
return super.delete(['ticket_forms', ticketFormID]);
⋮----
/**
   * Clones an already existing Ticket Form by its ID.
   * @param {number} ticketFormID - The ID of the ticket form to be cloned.
   * @param {boolean} [prependCloneTitle=false] - Whether to prepend the title with "Clone of" or not.
   * @returns {Promise<{response: object, result: object}>} - A promise that resolves to the cloned ticket form details.
   * @throws {Error} - Throws an error if the API call fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/ticket_forms/#clone-an-already-existing-ticket-form}
   * @example
   * const clonedForm = await client.ticketforms.clone(12345, true); // Replace 12345 with the actual ticket form ID.
   */
async clone(ticketFormID, prependCloneTitle = false) {
⋮----
return this.post(['ticket_forms', ticketFormID, 'clone'], payload);
⋮----
/**
   * Reorders the specified Ticket Forms based on the provided array of IDs.
   * @param {number[]} ticketFormIDs - An array of ticket form IDs in the desired order.
   * @returns {Promise<{response: object, result: object}>} - A promise that resolves to the reordered ticket forms' details.
   * @throws {Error} - Throws an error if the API call fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/ticket_forms/#reorder-ticket-forms}
   * @example
   * const reorderedForms = await client.ticketforms.reorder([2, 23, 46, 50]);
   */
async reorder(ticketFormIDs) {
return this.put(['ticket_forms', 'reorder'], {
</file>

<file path="src/clients/core/ticketimport.js">
// Tickets.js: Client for the zendesk API.
⋮----
/**
 * TicketImport: A class that provides methods to interact with Zendesk's Ticket Import API.
 * This is a thin wrapper around the Zendesk REST API for ticket imports.
 * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/ticket_import/}
 */
⋮----
class TicketImport extends Client {
⋮----
/**
   * Imports a ticket into Zendesk.
   * @param {object} ticket - The ticket data to be imported.
   * @param {number} ticket.assignee_id - The ID of the user to assign this ticket to.
   * @param {Array} ticket.comments - Array of comments associated with the ticket.
   * @param {string} ticket.description - The description of the ticket.
   * @param {number} ticket.requester_id - The ID of the user requesting the ticket.
   * @param {string} ticket.subject - The subject of the ticket.
   * @param {Array} ticket.tags - Array of tags associated with the ticket.
   * @returns {Promise<{response: object, result: object}>} The response from the Zendesk API.
   * @throws {Error} Throws an error if the request to the Zendesk API fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/ticket_import/#ticket-import}
   * @example
   * const ticketData = {
   *   assignee_id: 19,
   *   comments: [{ author_id: 19, value: "This is a comment" }],
   *   description: "A description",
   *   requester_id: 827,
   *   subject: "Help",
   *   tags: ["foo", "bar"]
   * };
   * const response = await client.ticketimport.import(ticketData);
   */
async import(ticket) {
return this.post(['imports/tickets'], ticket);
⋮----
/**
   * @param {number} ticketID - The ID of the ticket to fetch the audits for.
   * @returns {Promise<Array>} An array of ticket audits from the Zendesk API.
   * @throws {Error} Throws an error if the request to the Zendesk API fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/ticket_import/}
   * @example
   * const ticketID = 12345;
   * const audits = await client.ticketimport.exportAudit(ticketID);
   * @deprecated Use the `list` method from the `TicketAudits` class instead.
   * Exports the audits of a specific ticket.
   */
async exportAudit(ticketID) {
return this.getAll(['tickets', ticketID, 'audits']);
⋮----
/**
   * Bulk imports multiple tickets into Zendesk.
   * @param {Array<object>} tickets - An array containing ticket data to be imported. Each ticket should include the following fields:
   * @param {number} tickets[].assignee_id - The ID of the user to assign this ticket to.
   * @param {Array<object>} tickets[].comments - Array of comments associated with the ticket.
   * @param {string} tickets[].description - The description of the ticket.
   * @param {number} tickets[].requester_id - The ID of the user requesting the ticket.
   * @param {string} tickets[].subject - The subject of the ticket.
   * @param {Array<string>} tickets[].tags - Array of tags associated with the ticket.
   * **Note**: While these fields are required for each ticket object, they are not directly accessed within this function. The entire array of tickets is passed to the Zendesk API.
   * @returns {Promise<{response: object, result: object}>} The response from the Zendesk API, including a job status object.
   * @throws {Error} Throws an error if the request to the Zendesk API fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/ticket_import/#ticket-bulk-import}
   * @example
   * const ticketDataArray = [{
   *   assignee_id: 19,
   *   comments: [{ author_id: 19, value: "This is a comment" }],
   *   description: "A description",
   *   requester_id: 827,
   *   subject: "Help",
   *   tags: ["foo", "bar"]
   * },
   * {
   *   assignee_id: 20,
   *   comments: [{ author_id: 20, value: "Another comment" }],
   *   description: "Another description",
   *   requester_id: 828,
   *   subject: "Help Again",
   *   tags: ["foo2", "bar2"]
   * }];
   * const response = await client.ticketimport.bulkImport(ticketDataArray);
   */
async bulkImport(tickets) {
return this.post(['imports', 'tickets', 'create_many'], {tickets});
</file>

<file path="src/clients/core/ticketmetrics.js">
/**
 * TicketMetrics client for the Zendesk API.
 * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/ticket_metrics/}
 */
class TicketMetrics extends Client {
⋮----
/**
   * Lists the Ticket Metrics for a specific ticket.
   * @param {number} ticketID - The ID of the ticket.
   * @returns {Promise<{response: object, result: object}>} The ticket metrics data.
   * @throws {Error} Throws an error if the request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/ticket_metrics/#show-ticket-metrics}
   * @example
   * const client = createClient({...});
   * const metrics = await client.ticketmetrics.list(12345);
   */
async list(ticketID) {
return this.get(['tickets', ticketID, 'metrics']);
⋮----
/**
   * Lists all Ticket Metrics.
   * @returns {Promise<object[]>} An array of all ticket metrics data.
   * @throws {Error} Throws an error if the request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/ticket_metrics/#list-ticket-metrics}
   * @example
   * const client = createClient({...});
   * const allMetrics = await client.ticketmetrics.listAll();
   */
async listAll() {
return this.getAll(['ticket_metrics']);
⋮----
/**
   * Shows a specific Ticket Metric by its ID.
   * @param {number} ticketMetricId - The ID of the ticket metric to retrieve.
   * @returns {Promise<{response: object, result: object}>} The ticket metric data.
   * @throws {Error} Throws an error if the request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/ticket_metrics/#show-ticket-metrics}
   * @example
   * const client = createClient({...});
   * const metric = await client.ticketmetrics.show(12345);
   */
async show(ticketMetricId) {
return this.get(['ticket_metrics', ticketMetricId]);
</file>

<file path="src/clients/core/tickets.js">
// File: tickets.js
⋮----
/**
 * A recursive type that makes all properties of an object optional, including nested objects.
 * @template T
 * @typedef {Partial<{[K in keyof T]: RecursivePartial<T[K]>}>} RecursivePartial
 */
⋮----
/**
 * @typedef {object} Attachment
 * @property {string} content_type - The content type of the image. Example value: "image/png"
 * @property {string} content_url - A full URL where the attachment image file can be downloaded. The file may be hosted externally so take care not to inadvertently send Zendesk authentication credentials. See Working with url properties
 * @property {boolean} deleted - If true, the attachment has been deleted
 * @property {string} file_name - The name of the image file
 * @property {string} height - The height of the image file in pixels. If height is unknown, returns null
 * @property {number} id - Automatically assigned when created
 * @property {boolean} inline - If true, the attachment is excluded from the attachment list and the attachment's URL can be referenced within the comment of a ticket. Default is false
 * @property {boolean} malware_access_override - If true, you can download an attachment flagged as malware. If false, you can't download such an attachment.
 * @property {string} malware_scan_result - The result of the malware scan. There is a delay between the time the attachment is uploaded and when the malware scan is completed. Usually the scan is done within a few seconds, but high load conditions can delay the scan results. Possible values: "malware_found", "malware_not_found", "failed_to_scan", "not_scanned"
 * @property {string} mapped_content_url - The URL the attachment image file has been mapped to
 * @property {number} size - The size of the image file in bytes
 * @property {object[]} thumbnails - An array of attachment objects. Note that photo thumbnails do not have thumbnails
 * @property {string} url - A URL to access the attachment details
 * @property {string} width - The width of the image file in pixels. If width is unknown, returns null
 */
⋮----
/**
 * @typedef {object} TicketComment
 * @property {Attachment[]} [attachments] - Attachments, if any. See Attachment
 * @property {number} audit_id - The id of the ticket audit record. See Show Audit
 * @property {number} author_id - The id of the comment author. See Author id
 * @property {string} body - The comment string. See Bodies
 * @property {string} created_at - The time the comment was created
 * @property {string} html_body - The comment formatted as HTML. See Bodies
 * @property {number} id - Automatically assigned when the comment is created
 * @property {object} [metadata] - System information (web client, IP address, etc.) and comment flags, if any. See Comment flags
 * @property {string} plain_body - The comment presented as plain text. See Bodies
 * @property {boolean} public - true if a public comment; false if an internal note. The initial value set on ticket creation persists for any additional comment unless you change it
 * @property {string} type - Comment or VoiceComment. The JSON object for adding voice comments to tickets is different. See Adding voice comments to tickets
 * @property {string[]} [uploads] - List of tokens received from uploading files for comment attachments. The files are attached by creating or updating tickets with the tokens. See Attaching files in Tickets
 * @property {object} [via] - Describes how the object was created. See the Via object reference
 */
⋮----
/**
 * Tickets are the means through which your end users (customers) communicate with agents in Zendesk Support.
 * @typedef {object} Ticket
 * @property {boolean} allow_attachments - Permission for agents to add add attachments to a comment. Defaults to true
 * @property {boolean} allow_channelback - Is false if channelback is disabled, true otherwise. Only applicable for channels framework ticket
 * @property {string} [assignee_email] - Write only. The email address of the agent to assign the ticket to
 * @property {number} [assignee_id] - The agent currently assigned to the ticket
 * @property {number[]} [attribute_value_ids] - Write only. An array of the IDs of attribute values to be associated with the ticket
 * @property {number} [brand_id] - Enterprise only. The id of the brand this ticket is associated with
 * @property {number[]} [collaborator_ids] - The ids of users currently CC'ed on the ticket
 * @property {object[]} [collaborators] - POST requests only. Users to add as cc's when creating a ticket. See Setting Collaborators
 * @property {TicketComment} [comment] - Write only. An object that adds a comment to the ticket. See Ticket comments. To include an attachment with the comment, see Attaching files
 * @property {string} created_at - When this record was created
 * @property {Array<CustomField>} [custom_fields] - Custom fields for the ticket. See Setting custom field values
 * @property {number} [custom_status_id] - The custom ticket status id of the ticket. See custom ticket statuses
 * @property {string} description - Read-only first comment on the ticket. When creating a ticket, use comment to set the description. See Description and first comment
 * @property {string} [due_at] - If this is a ticket of type "task" it has a due date. Due date format uses ISO 8601 format.
 * @property {number[]} [email_cc_ids] - The ids of agents or end users currently CC'ed on the ticket. See CCs and followers resources in the Support Help Center
 * @property {object} [email_ccs] - Write only. An array of objects that represent agent or end users email CCs to add or delete from the ticket. See Setting email CCs
 * @property {string} [external_id] - An id you can use to link Zendesk Support tickets to local records
 * @property {number[]} [follower_ids] - The ids of agents currently following the ticket. See CCs and followers resources
 * @property {object} [followers] - Write only. An array of objects that represent agent followers to add or delete from the ticket. See Setting followers
 * @property {number[]} followup_ids - The ids of the followups created from this ticket. Ids are only visible once the ticket is closed
 * @property {number} [forum_topic_id] - The topic in the Zendesk Web portal this ticket originated from, if any. The Web portal is deprecated
 * @property {boolean} from_messaging_channel - If true, the ticket's via type is a messaging channel.
 * @property {number} [group_id] - The group this ticket is assigned to
 * @property {boolean} has_incidents - Is true if a ticket is a problem type and has one or more incidents linked to it. Otherwise, the value is false.
 * @property {number} id - Automatically assigned when the ticket is created
 * @property {boolean} is_public - Is true if any comments are public, false otherwise
 * @property {number} [macro_id] - Write only. A macro ID to be recorded in the ticket audit
 * @property {number[]} [macro_ids] - POST requests only. List of macro IDs to be recorded in the ticket audit
 * @property {object} [metadata] - Write only. Metadata for the audit. In the audit object, the data is specified in the custom property of the metadata object. See Setting Metadata
 * @property {number} [organization_id] - The organization of the requester. You can only specify the ID of an organization associated with the requester. See Organization Memberships
 * @property {Priority} [priority] - The urgency with which the ticket should be addressed. Allowed values are "urgent", "high", "normal", or "low".
 * @property {number} [problem_id] - For tickets of type "incident", the ID of the problem the incident is linked to
 * @property {string} [raw_subject] - The dynamic content placeholder, if present, or the "subject" value, if not. See Dynamic Content Items
 * @property {string} [recipient] - The original recipient e-mail address of the ticket. Notification emails for the ticket are sent from this address
 * @property {object} [requester] - Write only. See Creating a ticket with a new requester
 * @property {number} requester_id - The user who requested this ticket
 * @property {boolean} [safe_update] - Write only. Optional boolean. When true and an update_stamp date is included, protects against ticket update collisions and returns a message to let you know if one occurs. See Protecting against ticket update collisions. A value of false has the same effect as true. Omit the property to force the updates to not be safe
 * @property {object} [satisfaction_rating] - The satisfaction rating of the ticket, if it exists, or the state of satisfaction, "offered" or "unoffered". The value is null for plan types that don't support CSAT
 * @property {number[]} [sharing_agreement_ids] - The ids of the sharing agreements used for this ticket
 * @property {Status} [status] - The state of the ticket. If your account has activated custom ticket statuses, this is the ticket's status category. See custom ticket statuses. Allowed values are "new", "open", "pending", "hold", "solved", or "closed".
 * @property {string} [subject] - The value of the subject field for this ticket
 * @property {number} [submitter_id] - The user who submitted the ticket. The submitter always becomes the author of the first comment on the ticket
 * @property {string[]} [tags] - The array of tags applied to this ticket
 * @property {number} [ticket_form_id] - Enterprise only. The id of the ticket form to render for the ticket
 * @property {Type} [type] - The type of this ticket. Allowed values are "problem", "incident", "question", or "task".
 * @property {string} updated_at - When this record last got updated
 * @property {string} [updated_stamp] - Write only. Datetime of last update received from API. See the safe_update property
 * @property {string} url - The API url of this ticket
 * @property {object} [via] - For more information, see the Via object reference
 * @property {number} [via_followup_source_id] - POST requests only. The id of a closed ticket when creating a follow-up ticket. See Creating a follow-up ticket
 * @property {number} [via_id] - Write only. For more information, see the Via object reference
 * @property {object} [voice_comment] - Write only. See Creating voicemail ticket
 */
⋮----
/**
 * @typedef {object} CustomField
 * @property {number} id - The ID of the custom field.
 * @property {string|number|boolean} value - The value of the custom field.
 */
⋮----
/**
 * @typedef {'urgent' | 'high' | 'normal' | 'low'} Priority
 */
⋮----
/**
 * @typedef {'new' | 'open' | 'pending' | 'hold' | 'solved' | 'closed'} Status
 */
⋮----
/**
 * @typedef {'problem' |'incident' | 'question' | 'task'} Type
 */
⋮----
/**
 * @typedef {object} CreateOrUpdateTicket
 * @property {RecursivePartial<Ticket>} [ticket] - The ticket object to create or update.
 */
⋮----
/**
 * @typedef {object} CreateManyTickets
 * @property {Array<Ticket>} [tickets] - The ticket object to create many tickets.
 */
⋮----
/**
 * @class
 * Client for the Zendesk API - Tickets.
 * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/tickets/}
 */
class Tickets extends Client {
/**
   * @param {import('../client').ClientOptions} options - The client options.
   */
⋮----
/**
   * List all the tickets.
   * @returns {Promise<Array<Ticket>>} An array of tickets.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/tickets/#list-tickets}
   * @example
   * const tickets = await client.tickets.list();
   */
async list() {
return this.getAll(['tickets']);
⋮----
/**
   * List all tickets assigned to a specific user.
   * @param {number} userID - The ID of the user.
   * @returns {Promise<Array<Ticket>>} An array of tickets assigned to the user.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/tickets/#list-tickets}
   * @example
   * const assignedTickets = await client.tickets.listAssigned(12345);
   */
async listAssigned(userID) {
return this.getAll(['users', userID, 'tickets', 'assigned']);
⋮----
/**
   * List all tickets associated with a specific organization.
   * @param {number} orgID - The ID of the organization.
   * @returns {Promise<Array<Ticket>>} An array of tickets under the organization.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/tickets/#list-tickets}
   * @example
   * const orgTickets = await client.tickets.listByOrganization(6789);
   */
async listByOrganization(orgID) {
return this.getAll(['organizations', orgID, 'tickets']);
⋮----
/**
   * List all tickets requested by a specific user.
   * @param {number} userID - The ID of the user.
   * @returns {Promise<Array<Ticket>>} An array of tickets requested by the user.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/tickets/#list-tickets}
   * @example
   * const requestedTickets = await client.tickets.listByUserRequested(12345);
   */
async listByUserRequested(userID) {
return this.getAll(['users', userID, 'tickets', 'requested']);
⋮----
/**
   * List all tickets where a specific user is CC'd.
   * @param {number} userID - The ID of the user.
   * @returns {Promise<Array<Ticket>>} An array of tickets where the user is CC'd.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/tickets/#list-tickets}
   * @example
   * const ccdTickets = await client.tickets.listByUserCCD(12345);
   */
async listByUserCCD(userID) {
return this.getAll(['users', userID, 'tickets', 'ccd']);
⋮----
/**
   * List tickets based on a specific filter.
   * @param {string} type - Type of filter.
   * @param {string|number} value - Value for the filter.
   * @returns {Promise<Array<Ticket>>} An array of tickets matching the filter.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/tickets/#list-tickets}
   * @example
   * const filteredTickets = await client.tickets.listWithFilter('status', 'open');
   */
async listWithFilter(type, value) {
return this.getAll(['tickets', {[type]: value}]);
⋮----
/**
   * List recently viewed tickets by the requesting agent.
   * @returns {Promise<Array<Ticket>>} An array of recently viewed tickets.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/tickets/#list-tickets}
   * @example
   * const recentTickets = await client.tickets.listRecent();
   */
async listRecent() {
return this.getAll(['tickets', 'recent']);
⋮----
/**
   * List collaborators of a specific ticket.
   * @param {number} ticketId - The ID of the ticket.
   * @returns {Promise<Array>} An array of collaborators for the ticket.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/tickets/#list-tickets}
   * @example
   * const collaborators = await client.tickets.listCollaborators(7890);
   */
async listCollaborators(ticketId) {
return this.getAll(['tickets', ticketId, 'collaborators']);
⋮----
/**
   * List incidents related to a specific ticket.
   * @param {number} ticketId - The ID of the ticket.
   * @returns {Promise<Array>} An array of incidents related to the ticket.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/tickets/#list-tickets}
   * @example
   * const incidents = await client.tickets.listIncidents(7890);
   */
async listIncidents(ticketId) {
return this.getAll(['tickets', ticketId, 'incidents']);
⋮----
/**
   * Retrieve metrics for a specific ticket.
   * @param {number} ticketId - The ID of the ticket.
   * @returns {Promise<{response: object, result: Ticket}>} Metrics details for the ticket.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/tickets/#list-tickets}
   * @example
   * const metrics = await client.tickets.listMetrics(7890);
   */
async listMetrics(ticketId) {
return this.get(['tickets', ticketId, 'metrics']);
⋮----
/**
   * Retrieve a specific ticket by its ID.
   * @param {number} ticketId - The ID of the ticket.
   * @returns {Promise<{response: object, result: Ticket}>} Details of the ticket.
   * @throws {Error} If the ticket ID is not provided or invalid.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/tickets/#show-ticket}
   * @example
   * const ticket = await client.tickets.show(12345);
   */
async show(ticketId) {
return this.get(['tickets', ticketId]);
⋮----
/**
   * Retrieve details for multiple tickets based on their IDs.
   * @param {Array<number>} ticketIds - An array of ticket IDs to fetch.
   * @returns {Promise<{response: object, result: Array<Ticket>}>} An array of ticket details.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/tickets/#show-multiple-tickets}
   * @example
   * const ticketsDetails = await client.tickets.showMany([123, 456, 789]);
   */
async showMany(ticketIds) {
return this.get(['tickets', 'show_many', {ids: ticketIds}]);
⋮----
/**
   * Create a new ticket.
   * @param {CreateOrUpdateTicket} ticket - Details of the ticket to be created.
   * @returns {Promise<{response: object, result: Ticket}>} The created ticket details.
   * @throws {Error} If the ticket details are not provided or invalid.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/tickets/#create-ticket}
   * @example
   * const newTicket = await client.tickets.create({ subject: 'New ticket', description: 'Ticket description' });
   */
async create(ticket) {
return this.post(['tickets'], ticket);
⋮----
/**
   * Create multiple new tickets.
   * @param {CreateManyTickets} tickets - An object of tickets containing an array of tickets.
   * @returns {Promise<{response: object, result: Array<Ticket>}>} A promise that resolves to an array of created ticket objects.
   * @throws {Error} If the provided `tickets` is not an array or is empty.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/tickets/#create-many-tickets}
   * @example
   * // Create multiple new tickets
   * const newTickets = {
   *  tickets: [
   *    { subject: 'Ticket 1', description: 'Description 1' },
   *    { subject: 'Ticket 2', description: 'Description 2' },
   *   ]
   * };
   * const createdTickets = await client.tickets.createMany(newTickets);
   */
async createMany(tickets) {
return this.post(['tickets', 'create_many'], tickets);
⋮----
/**
   * Update an existing ticket by its ID.
   * @param {number} ticketId - The ID of the ticket to update.
   * @param {CreateOrUpdateTicket} ticket - The updated ticket data as an object.
   * @returns {Promise<{result: Ticket, response: {ticket:Ticket, audit:any[]}}>} A promise that resolves to the updated ticket object.
   * @throws {Error} If `ticketId` is not a number or if `ticket` is not an object.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/tickets/#update-ticket}
   * @example
   * // Update an existing ticket
   * const updatedTicketData = {
   *   subject: 'Updated Ticket Subject',
   *   description: 'Updated Ticket Description',
   * };
   * const updatedTicket = await client.tickets.update(123, updatedTicketData);
   */
async update(ticketId, ticket) {
return this.put(['tickets', ticketId], ticket);
⋮----
/**
   * Update multiple tickets by their IDs.
   * @param {Array<number>} ticketIds - An array of ticket IDs to update.
   * @param {object} ticket - The updated ticket data as an object.
   * @returns {Promise<{response: object, result: object}>} A promise that resolves to the updated ticket object.
   * @throws {Error} If `ticketIds` is not an array of numbers or if `ticket` is not an object.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/tickets/#update-many-tickets}
   * @example
   * // Update multiple tickets by their IDs
   * const ticketIdsToUpdate = [123, 456, 789];
   * const updatedTicketData = {
   *   status: 'solved',
   *   priority: 'high',
   * };
   * const updatedTickets = await client.tickets.updateMany(ticketIdsToUpdate, updatedTicketData);
   */
async updateMany(ticketIds, ticket) {
return this.put(['tickets', 'update_many', {ids: ticketIds}], ticket);
⋮----
/**
   * Delete a ticket by its ID.
   * @param {number} ticketId - The ID of the ticket to delete.
   * @returns {Promise<void>} A promise that resolves when the ticket is successfully deleted.
   * @throws {Error} If `ticketId` is not a number or is not provided.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/tickets/#delete-ticket}
   * @example
   * // Delete a ticket by its ID
   * const ticketIdToDelete = 123;
   * await client.tickets.delete(ticketIdToDelete);
   */
async delete(ticketId) {
return super.delete(['tickets', ticketId]);
⋮----
/**
   * Delete multiple tickets by their IDs.
   * @param {Array<number>} ticketIds - An array of ticket IDs to delete.
   * @returns {Promise<void>} A promise that resolves when the tickets are successfully deleted.
   * @throws {Error} If `ticketIds` is not an array of valid ticket IDs.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/tickets/#bulk-delete-tickets}
   * @example
   * // Delete multiple tickets by their IDs
   * const ticketIdsToDelete = [123, 456, 789];
   * await client.tickets.deleteMany(ticketIdsToDelete);
   */
async deleteMany(ticketIds) {
return super.delete(['tickets', 'destroy_many', {ids: ticketIds}]);
⋮----
/**
   * Merge a ticket with another ticket.
   * @param {number} ticketId - The ID of the ticket to be merged.
   * @param {object} mergedTicket - The ticket object representing the ticket to merge with.
   * @returns {Promise<{response: object, result: Ticket}>} A promise that resolves with the merged ticket object.
   * @throws {Error} If `ticketId` is not a valid ticket ID or `mergedTicket` is not a valid ticket object.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/tickets/#merge-tickets}
   * @example
   * // Merge a ticket with another ticket
   * const sourceTicketId = 123;
   * const targetTicket = {
   *   subject: 'Merged Ticket',
   *   description: 'This is the merged ticket description.',
   *   // ...other ticket properties
   * };
   * const mergedTicket = await client.tickets.merge(sourceTicketId, targetTicket);
   */
async merge(ticketId, mergedTicket) {
return this.post(['tickets', ticketId, 'merge'], mergedTicket);
⋮----
/**
   * **DEPRECATED**: Use the `TicketExport` class method `export` instead.
   *
   * Export tickets based on a specified start time.
   * @param {string} startTime - The start time for exporting tickets.
   * @returns {Promise<{response: object, result: object}>} A promise that resolves with the exported tickets.
   * @throws {Error} If `startTime` is not a valid string.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/tickets/#ticket-export}
   * @example
   * // Export tickets based on a start time
   * const startTime = '2023-01-01T00:00:00Z';
   * const exportedTickets = await client.tickets.export(startTime);
   * @deprecated Use `TicketExport.export(startTime)` method instead.
   */
async export(startTime) {
return this.get(['exports', 'tickets', {start_time: startTime}]);
⋮----
/**
   * **DEPRECATED**: Use the `TicketExport` class method `sample` instead.
   *
   * Export a sample of tickets based on a specified start time.
   * @param {string} startTime - The start time for exporting the sample of tickets.
   * @returns {Promise<{response: object, result: object}>} A promise that resolves with the exported sample of tickets.
   * @throws {Error} If `startTime` is not a valid string.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/ticket-management/incremental_exports/#incremental-sample-export}
   * @example
   * // Export a sample of tickets based on a start time
   * const startTime = '2023-01-01T00:00:00Z';
   * const exportedSample = await client.tickets.exportSample(startTime);
   * @deprecated Use `TicketExport.sample(startTime)` method instead.
   */
async exportSample(startTime) {
return this.get(['exports', 'tickets', 'sample', {start_time: startTime}]);
⋮----
/**
   * **DEPRECATED**: Use the `TicketExport` class method `export` instead.
   *
   * Export incremental tickets based on a specified start time.
   * @param {string} startTime - The start time for exporting incremental tickets.
   * @returns {Promise<Array>} A promise that resolves with an array of exported incremental tickets.
   * @throws {Error} If `startTime` is not a valid string.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/tickets/#ticket-export-incremental}
   * @example
   * // Export incremental tickets based on a start time
   * const startTime = '2023-01-01T00:00:00Z';
   * const incrementalTickets = await client.tickets.incremental(startTime);
   * @deprecated Use `TicketExport.export(startTime)` method instead.
   */
async incremental(startTime) {
return this.getAll(['incremental', 'tickets', {start_time: startTime}]);
⋮----
/**
   * **DEPRECATED**: Use the `TicketExport` class method `exportWithInclude` instead.
   *
   * Export incremental tickets based on a specified start time and optional include parameters.
   * @param {string} startTime - The start time for exporting incremental tickets.
   * @param {string} include - Optional parameters to include in the export.
   * @returns {Promise<Array>} A promise that resolves with an array of exported incremental tickets.
   * @throws {Error} If `startTime` is not a valid string.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/tickets/#ticket-export-incremental-include}
   * @example
   * // Export incremental tickets based on a start time with optional include parameters
   * const startTime = '2023-01-01T00:00:00Z';
   * const include = 'users,groups';
   * const incrementalTickets = await client.tickets.incrementalInclude(startTime, include);
   * @deprecated Use `TicketExport.exportWithInclude(startTime, include)` method instead.
   */
async incrementalInclude(startTime, include) {
return this.getAll([
⋮----
/**
   * **DEPRECATED**: Use the `TicketExport` class method `sample` instead.
   *
   * Export a sample of incremental tickets based on a specified start time.
   * @param {string} startTime - The start time for exporting the sample of incremental tickets.
   * @returns {Promise<{response: object, result: Array<Ticket>}>} A promise that resolves with an array of exported incremental tickets.
   * @throws {Error} If `startTime` is not a valid string.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/tickets/#ticket-export-incremental-sample}
   * @example
   * // Export a sample of incremental tickets based on a start time
   * const startTime = '2023-01-01T00:00:00Z';
   * const incrementalSampleTickets = await client.tickets.incrementalSample(startTime);
   * @deprecated Use `TicketExport.sample(startTime)` method instead.
   */
async incrementalSample(startTime) {
return this.get([
⋮----
/**
   * Retrieve comments associated with a specific ticket.
   * @param {number} ticketId - The ID of the ticket to retrieve comments for.
   * @returns {Promise<Array>} A promise that resolves with an array of comments associated with the ticket.
   * @throws {Error} If `ticketId` is not a valid number.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/ticket_comments/}
   * @example
   * // Retrieve comments for a specific ticket
   * const ticketId = 12345;
   * const comments = await client.tickets.getComments(ticketId);
   */
async getComments(ticketId) {
return this.getAll(['tickets', ticketId, 'comments']);
⋮----
/**
   * Retrieve audits associated with a specific ticket. (Deprecated: Use TicketAudits class list method instead)
   * @param {number} ticketId - The ID of the ticket to retrieve audits for.
   * @returns {Promise<Array>} A promise that resolves with an array of audits associated with the ticket.
   * @throws {Error} If `ticketId` is not a valid number.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/tickets/#listing-ticket-audits}
   * @example
   * // Retrieve audits for a specific ticket (deprecated)
   * const ticketId = 12345;
   * const audits = await client.tickets.exportAudit(ticketId);
   * @deprecated Use the `TicketAudits` class `list` method instead.
   */
async exportAudit(ticketId) {
return this.getAll(['tickets', ticketId, 'audits']);
⋮----
/**
   * Add tags to a specific ticket.
   * @param {number} ticketId - The ID of the ticket to add tags to.
   * @param {Array<string>} tags - An array of tags to add to the ticket.
   * @returns {Promise<void>} A promise that resolves when the tags are successfully added to the ticket.
   * @throws {Error} If `ticketId` is not a valid number or `tags` is not an array of strings.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/tickets/#updating-tag-lists}
   * @example
   * // Add tags to a specific ticket
   * const ticketId = 12345;
   * const tags = ['tag1', 'tag2'];
   * await client.tickets.addTags(ticketId, tags);
   */
async addTags(ticketId, tags) {
return this.requestAll('PUT', ['tickets', ticketId, 'tags'], tags);
⋮----
/**
   * Replace tags on a specific ticket with new tags.
   * @param {number} ticketId - The ID of the ticket to replace tags on.
   * @param {Array<string>} tags - An array of new tags to replace the existing tags on the ticket.
   * @returns {Promise<void>} A promise that resolves when the tags are successfully replaced on the ticket.
   * @throws {Error} If `ticketId` is not a valid number or `tags` is not an array of strings.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/tickets/tickets/#updating-tag-lists}
   * @example
   * // Replace tags on a specific ticket
   * const ticketId = 12345;
   * const newTags = ['newTag1', 'newTag2'];
   * await client.tickets.updateTags(ticketId, newTags);
   */
async updateTags(ticketId, tags) {
return this.requestAll('POST', ['tickets', ticketId, 'tags'], tags);
</file>

<file path="src/clients/core/triggers.js">
// Triggers.js: Client for the zendesk API.
⋮----
/**
 * Client for interacting with the Zendesk Triggers API.
 * @see {@link https://developer.zendesk.com/api-reference/ticketing/business-rules/triggers/}
 */
class Triggers extends Client {
⋮----
/**
   * Searches for triggers based on the provided search term.
   * @param {string} searchTerm - The term to search for.
   * @returns {Promise<{response: object, result: object}>} The search results.
   * @throws {Error} Throws an error if the request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/business-rules/triggers/#search-triggers}
   * @example const results = await client.triggers.search('exampleTerm');
   */
async search(searchTerm) {
return this.get(['triggers', 'search', {query: searchTerm}]);
⋮----
/**
   * Retrieves trigger definitions.
   * @returns {Promise<object>} The trigger definitions.
   * @throws {Error} Throws an error if the request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/business-rules/triggers/#list-trigger-action-and-condition-definitions}
   * @example const definitions = await client.triggers.definitions();
   */
async definitions() {
return this.getAll(['triggers', 'definitions']);
⋮----
/**
   * Lists all triggers, with optional filtering and sorting.
   * @param {object} [options] - Optional parameters for listing triggers.
   * @param {boolean} [options.active] - Filter by active triggers if true or inactive triggers if false.
   * @param {string} [options.category_id] - Filter triggers by category ID.
   * @param {string} [options.sort_by] - Possible values are "alphabetical", "created_at", "updated_at", "usage_1h", "usage_24h", or "usage_7d". Defaults to "position".
   * @param {string} [options.sort_order] - One of "asc" or "desc". Defaults to "asc" for alphabetical and position sort, "desc" for all others.
   * @returns {Promise<object>} A list of all triggers.
   * @throws {Error} Throws an error if the request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/business-rules/triggers/#list-triggers}
   * @example
   * const triggers = await client.triggers.list();
   * const activeTriggers = await client.triggers.list({ active: true });
   */
async list(options = {}) {
return this.getAll(['triggers', options]);
⋮----
/**
   * Lists all active triggers.
   * @returns {Promise<object>} A list of all active triggers.
   * @throws {Error} Throws an error if the request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/business-rules/triggers/#list-active-triggers}
   * @example const activeTriggers = await client.triggers.listActive();
   */
async listActive() {
return this.getAll(['triggers', 'active']);
⋮----
/**
   * Retrieves details of a specific trigger.
   * @param {number} triggerID - The ID of the trigger.
   * @returns {Promise<{response: object, result: object}>} Details of the specified trigger.
   * @throws {Error} Throws an error if the request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/business-rules/triggers/#show-trigger}
   * @example const triggerDetails = await client.triggers.show(12345);
   */
async show(triggerID) {
return this.get(['triggers', triggerID]);
⋮----
/**
   * Creates a new trigger.
   * @param {object} trigger - The trigger object to be created.
   * @returns {Promise<{response: object, result: object}>} The created trigger.
   * @throws {Error} Throws an error if the request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/business-rules/triggers/#create-trigger}
   * @example
   * const newTrigger = {
   *   title: "Example Trigger",
   *   conditions: {...},
   *   actions: [...]
   * };
   * const response = await client.triggers.create(newTrigger);
   */
async create(trigger) {
return this.post(['triggers'], trigger);
⋮----
/**
   * Updates an existing trigger.
   * @param {number} triggerID - The ID of the trigger to be updated.
   * @param {object} trigger - The updated trigger object.
   * @returns {Promise<{response: object, result: object}>} The updated trigger.
   * @throws {Error} Throws an error if the request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/business-rules/triggers/#update-trigger}
   * @example
   * const updatedTrigger = {
   *   title: "Updated Trigger",
   *   conditions: {...},
   *   actions: [...]
   * };
   * const response = await client.triggers.update(12345, updatedTrigger);
   */
async update(triggerID, trigger) {
return this.put(['triggers', triggerID], trigger);
⋮----
/**
   * Updates multiple triggers.
   * @param {Array<object>} triggers - An array of trigger objects to be updated.
   * @returns {Promise<{response: object, result: object}>} The response from the update request.
   * @throws {Error} Throws an error if the request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/business-rules/triggers/#update-many-triggers}
   * @example
   * const triggersToUpdate = [
   *   {id: 12345, position: 3},
   *   {id: 67890, position: 5}
   * ];
   * const response = await client.triggers.updateMany(triggersToUpdate);
   */
async updateMany(triggers) {
return this.put(['triggers', 'update_many'], {triggers});
⋮----
/**
   * Deletes a specified trigger.
   * @param {number} triggerID - The ID of the trigger to be deleted.
   * @returns {Promise<object>} The response from the deletion request.
   * @throws {Error} Throws an error if the request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/business-rules/triggers/#delete-trigger}
   * @example const response = await client.triggers.delete(12345);
   */
async delete(triggerID) {
return super.delete(['triggers', triggerID]);
⋮----
/**
   * Deletes multiple triggers based on their IDs.
   * @param {Array<number>} triggerIDs - An array of trigger IDs to be deleted.
   * @returns {Promise<object>} The response from the deletion request.
   * @throws {Error} Throws an error if the request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/business-rules/triggers/#bulk-delete-triggers}
   * @example const response = await client.triggers.bulkDelete([12345, 67890]);
   */
async bulkDelete(triggerIDs) {
return this.delete([
⋮----
/**
   * Reorders the triggers based on the provided trigger IDs.
   * @param {Array<number>} triggerIDs - An array of trigger IDs in the desired order.
   * @returns {Promise<object>} The response from the reorder request.
   * @throws {Error} Throws an error if the request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/business-rules/triggers/#reorder-triggers}
   * @example const response = await client.triggers.reorder([12345, 67890, 11223]);
   */
async reorder(triggerIDs) {
return this.requestAll('PUT', ['triggers', 'reorder'], {
⋮----
/**
   * Lists the revisions associated with a trigger.
   * @param {number} triggerID - The ID of the trigger.
   * @returns {Promise<object>} A list of revisions for the specified trigger.
   * @throws {Error} Throws an error if the request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/business-rules/triggers/#list-trigger-revisions}
   * @example const revisions = await client.triggers.listRevisions(12345);
   */
async listRevisions(triggerID) {
return this.getAll(['triggers', triggerID, 'revisions']);
⋮----
/**
   * Fetches a specific revision associated with a trigger.
   * @param {number} triggerID - The ID of the trigger.
   * @param {number} revisionID - The ID of the revision.
   * @returns {Promise<{response: object, result: object}>} Details of the specified trigger revision.
   * @throws {Error} Throws an error if the request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/business-rules/triggers/#show-trigger-revision}
   * @example const revisionDetails = await client.triggers.showRevision(12345, 67890);
   */
async showRevision(triggerID, revisionID) {
return this.get(['triggers', triggerID, 'revisions', revisionID]);
</file>

<file path="src/clients/core/userfields.js">
/**
 * Represents the UserFields client for the Zendesk API.
 * @see {@link https://developer.zendesk.com/api-reference/ticketing/users/user_fields/}
 */
class UserFields extends Client {
⋮----
/**
   * Lists all custom user fields in the account.
   * @returns {Promise<object>} The list of user fields.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/users/user_fields/#list-user-fields}
   * @example const userFields = await client.userfields.list();
   */
async list() {
return this.getAll(['user_fields']);
⋮----
/**
   * Retrieves details of a specific user field.
   * @param {number} userFieldID - The ID of the user field.
   * @returns {Promise<{response: object, result: object}>} Details of the user field.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/users/user_fields/#show-user-field}
   * @example const userField = await client.userfields.show(12345);
   */
async show(userFieldID) {
return this.get(['user_fields', userFieldID]);
⋮----
/**
   * Creates a new user field.
   * @param {object} userField - The user field data.
   * @returns {Promise<{response: object, result: object}>} The created user field.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/users/user_fields/#create-user-field}
   * @example const newUserField = await client.userfields.create({ type: 'text', title: 'Support description' });
   */
async create(userField) {
return this.post(['user_fields'], userField);
⋮----
/**
   * Updates an existing user field.
   * @param {number} userFieldID - The ID of the user field.
   * @param {object} userField - The updated user field data.
   * @returns {Promise<{response: object, result: object}>} The updated user field.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/users/user_fields/#update-user-field}
   * @example await client.userfields.update(12345, { title: 'Updated Support description' });
   */
async update(userFieldID, userField) {
return this.put(['user_fields', userFieldID], userField);
⋮----
/**
   * Deletes a user field.
   * @param {number} userFieldID - The ID of the user field.
   * @returns {Promise<object>} The response from the delete operation.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/users/user_fields/#delete-user-field}
   * @example await client.userfields.delete(12345);
   */
async delete(userFieldID) {
return super.delete(['user_fields', userFieldID]);
⋮----
/**
   * Reorders the user fields based on the provided IDs.
   * @param {Array<number>} userFieldIDs - An array of user field IDs in the desired order.
   * @returns {Promise<{response: object, result: object}>} The reordered user fields.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/users/user_fields/#reorder-user-field}
   * @example await client.userfields.reorder([3, 4]);
   */
async reorder(userFieldIDs) {
return this.put(['user_fields', 'reorder'], {user_field_ids: userFieldIDs});
⋮----
/**
   * Lists options for a specific dropdown user field.
   * @param {number} userFieldID - The ID of the user field.
   * @returns {Promise<{response: object, result: object}>} The list of user field options.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/users/user_fields/#list-user-field-options}
   * @example const options = await client.userfields.listOptions(12345);
   */
async listOptions(userFieldID) {
return this.get(['user_fields', userFieldID, 'options']);
⋮----
/**
   * Retrieves details of a specific user field option.
   * @param {number} userFieldID - The ID of the user field.
   * @param {number} userFieldOptionID - The ID of the user field option.
   * @returns {Promise<{response: object, result: object}>} Details of the user field option.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/users/user_fields/#show-a-user-field-option}
   * @example const option = await client.userfields.showOption(12345, 67890);
   */
async showOption(userFieldID, userFieldOptionID) {
return this.get(['user_fields', userFieldID, 'options', userFieldOptionID]);
⋮----
/**
   * Creates or updates a user field option.
   * @param {number} userFieldID - The ID of the user field.
   * @param {object} customFieldOption - The user field option data.
   * @returns {Promise<{response: object, result: object}>} The created or updated user field option.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/users/user_fields/#create-or-update-a-user-field-option}
   * @example await client.userfields.createOrUpdateOption(12345, { name: 'Grapes', position: 2, value: 'grape' });
   */
async createOrUpdateOption(userFieldID, customFieldOption) {
return this.post(
⋮----
/**
   * Deletes a user field option.
   * @param {number} userFieldID - The ID of the user field.
   * @param {number} userFieldOptionID - The ID of the user field option.
   * @returns {Promise<object>} The response from the delete operation.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/users/user_fields/#delete-user-field-option}
   * @example await client.userfields.deleteOption(12345, 67890);
   */
async deleteOption(userFieldID, userFieldOptionID) {
return super.delete([
</file>

<file path="src/clients/core/useridentities.js">
/**
 * Client for interacting with the Zendesk User Identities API.
 * @see {@link https://developer.zendesk.com/api-reference/ticketing/users/user_identities/}
 */
class UserIdentities extends Client {
⋮----
/**
   * List all identities for a given user.
   * @param {number} userId - The ID of the user.
   * @returns {Promise<object[]>} A list of user identities.
   * @throws {Error} Throws an error if the request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/users/user_identities/#list-identities}
   * @example const identities = await client.useridentities.list(12345);
   */
async list(userId) {
return this.getAll(['users', userId, 'identities']);
⋮----
/**
   * Show a specific identity for a given user.
   * @param {number} userId - The ID of the user.
   * @param {number} userIdentityId - The ID of the user identity to show.
   * @returns {Promise<{response: object, result: object}>} The user identity details.
   * @throws {Error} Throws an error if the request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/users/user_identities/#show-identity}
   * @example const identity = await client.useridentities.show(12345, 67890);
   */
async show(userId, userIdentityId) {
return this.get(['users', userId, 'identities', userIdentityId]);
⋮----
/**
   * Create a new identity for a given user.
   * @param {number} userId - The ID of the user.
   * @param {object} userIdentity - The user identity details to create.
   * @returns {Promise<{response: object, result: object}>} The created user identity.
   * @throws {Error} Throws an error if the request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/users/user_identities/#create-identity}
   * @example const newIdentity = await client.useridentities.create(12345, {type: 'email', value: 'test@example.com'});
   */
async create(userId, userIdentity) {
⋮----
!Array.isArray(userIdentity) &&
!Object.hasOwn(userIdentity, 'identity')
⋮----
return this.post(['users', userId, 'identities'], userIdentity);
⋮----
/**
   * Update a specific identity for a given user.
   * @param {number} userId - The ID of the user.
   * @param {number} userIdentityId - The ID of the user identity to update.
   * @param {object} identity - The updated identity details.
   * @returns {Promise<{response: object, result: object}>} The updated user identity.
   * @throws {Error} Throws an error if the request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/users/user_identities/#update-identity}
   * @example const updatedIdentity = await client.useridentities.update(12345, 67890, {verified: true});
   */
async update(userId, userIdentityId, identity) {
return this.put(['users', userId, 'identities', userIdentityId], identity);
⋮----
/**
   * Make a specific identity the primary identity for a given user.
   * @param {number} userId - The ID of the user.
   * @param {number} userIdentityId - The ID of the user identity to make primary.
   * @returns {Promise<{response: object, result: object}>} The updated user identity.
   * @throws {Error} Throws an error if the request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/users/user_identities/#make-identity-primary}
   * @example await client.useridentities.makePrimary(12345, 67890);
   */
async makePrimary(userId, userIdentityId) {
return this.put([
⋮----
/**
   * Verify a specific identity for a given user.
   * @param {number} userId - The ID of the user.
   * @param {number} userIdentityId - The ID of the user identity to verify.
   * @returns {Promise<{response: object, result: object}>} The verified user identity.
   * @throws {Error} Throws an error if the request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/users/user_identities/#verify-identity}
   * @example await client.useridentities.verify(12345, 67890);
   */
async verify(userId, userIdentityId) {
return this.put(['users', userId, 'identities', userIdentityId, 'verify']);
⋮----
/**
   * Request verification for a specific identity for a given user.
   * @param {number} userId - The ID of the user.
   * @param {number} userIdentityId - The ID of the user identity to request verification for.
   * @returns {Promise<{response: object, result: object}>} The user identity verification request details.
   * @throws {Error} Throws an error if the request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/users/user_identities/#request-user-verification}
   * @example await client.useridentities.requestVerification(12345, 67890);
   */
async requestVerification(userId, userIdentityId) {
⋮----
/**
   * Delete a specific identity for a given user.
   * @param {number} userId - The ID of the user.
   * @param {number} userIdentityId - The ID of the user identity to delete.
   * @returns {Promise<void>}
   * @throws {Error} Throws an error if the request fails.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/users/user_identities/#delete-identity}
   * @example await client.useridentities.delete(12345, 67890);
   */
async delete(userId, userIdentityId) {
return super.delete(['users', userId, 'identities', userIdentityId]);
</file>

<file path="src/clients/core/users.js">
// File: users.js
⋮----
/**
 * @typedef {object} User
 * @property {boolean} active - false if the user has been deleted
 * @property {string} [alias] - An alias displayed to end users
 * @property {boolean} chat_only - Whether or not the user is a chat-only agent
 * @property {string} created_at - The time the user was created
 * @property {number} [custom_role_id] - A custom role if the user is an agent on the Enterprise plan or above
 * @property {number} [default_group_id] - The id of the user's default group
 * @property {string} [details] - Any details you want to store about the user, such as an address
 * @property {string} [email] - The user's primary email address. *Writeable on create only. On update, a secondary email is added. See Email Address
 * @property {string} [external_id] - A unique identifier from another system. The API treats the id as case insensitive. Example: "ian1" and "IAN1" are the same value.
 * @property {string} iana_time_zone - The time zone for the user
 * @property {number} id - Automatically assigned when the user is created
 * @property {string} last_login_at - Last time the user signed in to Zendesk Support or made an API request using an API token or basic authentication
 * @property {string} [locale] - The user's locale. A BCP-47 compliant tag for the locale. If both "locale" and "locale_id" are present on create or update, "locale_id" is ignored and only "locale" is used.
 * @property {number} [locale_id] - The user's language identifier
 * @property {boolean} [moderator] - Designates whether the user has forum moderation capabilities
 * @property {string} name - The user's name
 * @property {string} [notes] - Any notes you want to store about the user
 * @property {boolean} [only_private_comments] - true if the user can only create private comments
 * @property {number} [organization_id] - The id of the user's organization. If the user has more than one organization memberships, the id of the user's default organization. If updating, see Organization ID
 * @property {string} [phone] - The user's primary phone number. See Phone Number below
 * @property {object} [photo] - The user's profile picture represented as an Attachment object
 * @property {string} [remote_photo_url] - A URL pointing to the user's profile picture.
 * @property {boolean} report_csv - This parameter is inert and has no effect. It may be deprecated in the future. Previously, this parameter determined whether a user could access a CSV report in a legacy Guide dashboard. This dashboard has been removed. See Announcing Guide legacy reporting upgrade to Explore
 * @property {boolean} [restricted_agent] - If the agent has any restrictions; false for admins and unrestricted agents, true for other agents
 * @property {string} [role] - The user's role. Possible values are "end-user", "agent", or "admin"
 * @property {number} role_type - The user's role id. 0 for a custom agent, 1 for a light agent, 2 for a chat agent, 3 for a chat agent added to the Support account as a contributor (Chat Phase 4), 4 for an admin, and 5 for a billing admin
 * @property {boolean} shared - If the user is shared from a different Zendesk Support instance. Ticket sharing accounts only
 * @property {boolean} shared_agent - If the user is a shared agent from a different Zendesk Support instance. Ticket sharing accounts only
 * @property {boolean} [shared_phone_number] - Whether the phone number is shared or not. See Phone Number below
 * @property {string} [signature] - The user's signature. Only agents and admins can have signatures
 * @property {boolean} [suspended] - If the agent is suspended. Tickets from suspended users are also suspended, and these users cannot sign in to the end user portal
 * @property {string[]} [tags] - The user's tags. Only present if your account has user tagging enabled
 * @property {string} [ticket_restriction] - Specifies which tickets the user has access to. Possible values are: "organization", "groups", "assigned", "requested", null. "groups" and "assigned" are valid only for agents. If you pass an invalid value to an end user (for example, "groups"), they will be assigned to "requested", regardless of their previous access
 * @property {string} [time_zone] - The user's time zone. See Time Zone
 * @property {boolean} two_factor_auth_enabled - If two factor authentication is enabled
 * @property {string} updated_at - The time the user was last updated
 * @property {string} url - The user's API url
 * @property {object} [user_fields] - Values of custom fields in the user's profile. See User Fields
 * @property {boolean} [verified] - Any of the user's identities is verified. See User Identities
 */
⋮----
/**
 * Client for the Zendesk Users API.
 * @see {@link https://developer.zendesk.com/api-reference/ticketing/users/users/}
 */
class Users extends Client {
⋮----
/**
   * Authenticates the current user.
   * @returns {Promise<{response: object, result: User}>} The authenticated user's details.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/users/users/#show-the-currently-authenticated-user}
   * @example
   * const user = await client.users.auth();
   */
async auth() {
return this.get(['users', 'me']);
⋮----
/**
   * Lists all users.
   * @returns {Promise<Array<User>>} An array of user objects.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/users/users/#list-users}
   * @example
   * const users = await client.users.list();
   */
async list() {
return this.getAll(['users']);
⋮----
/**
   * Lists users with a specific filter.
   * @param {string} type - The type of filter.
   * @param {string|number} value - The value for the filter.
   * @returns {Promise<Array<User>>} An array of user objects.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/users/users/#list-users}
   * @example
   * const users = await client.users.listWithFilter('type', 'value');
   */
async listWithFilter(type, value) {
return this.getAll(['users', {[type]: value}]);
⋮----
/**
   * Lists users by group ID.
   * @param {number} id - The ID of the group.
   * @returns {Promise<Array<User>>} An array of user objects.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/users/users/#list-users}
   * @example
   * const users = await client.users.listByGroup(12345);
   */
async listByGroup(id) {
return this.getAll(['groups', id, 'users']);
⋮----
/**
   * Lists users by organization ID.
   * @param {number} id - The ID of the organization.
   * @returns {Promise<Array<User>>} An array of user objects.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/users/users/#list-users}
   * @example
   * const users = await client.users.listByOrganization(12345);
   */
async listByOrganization(id) {
return this.getAll(['organizations', id, 'users']);
⋮----
/**
   * Shows details of a user by ID.
   * @param {number} id - The ID of the user.
   * @returns {Promise<{response: object, result: User}>} The user's details.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/users/users/#show-user}
   * @example
   * const user = await client.users.show(12345);
   */
async show(id) {
return this.get(['users', id]);
⋮----
/**
   * Shows details of multiple users by their IDs.
   * @param {Array<number>} userIds - An array of user IDs.
   * @returns {Promise<{response: object, result: Array<User>}>} An array of user details.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/users/users/#show-many-users}
   * @example
   * const users = await client.users.showMany([12345, 67890]);
   */
async showMany(userIds) {
return this.get(['users', 'show_many', {ids: userIds}]);
⋮----
/**
   * Creates a new user.
   * @param {object} user - The user details.
   * @returns {Promise<{response: object, result: User}>} The created user's details.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/users/users/#create-user}
   * @example
   * const newUser = await client.users.create({name: 'John Doe', email: 'john@example.com'});
   */
async create(user) {
return this.post(['users'], user);
⋮----
/**
   * Creates multiple users.
   * @param {Array<object>} users - An array of user details.
   * @returns {Promise<{response: object, result: Array<User>}>} An array of created user details.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/users/users/#create-many-users}
   * @example
   * const newUsers = await client.users.createMany([{name: 'John Doe', email: 'john@example.com'}, {name: 'Jane Smith', email: 'jane@example.com'}]);
   */
async createMany(users) {
return this.post(['users', 'create_many'], users);
⋮----
/**
   * Creates or updates a user.
   * @param {object} user - The user details.
   * @returns {Promise<{response: object, result: User}>} The created or updated user's details.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/users/users/#create-or-update-user}
   * @example
   * const user = await client.users.createOrUpdate({name: 'John Doe', email: 'john@example.com'});
   */
async createOrUpdate(user) {
return this.post(['users', 'create_or_update'], user);
⋮----
/**
   * Creates or updates multiple users.
   * @param {Array<object>} users - An array of user details.
   * @returns {Promise<{response: object, result: Array<User>}>} An array of created or updated user details.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/users/users/#create-or-update-many-users}
   * @example
   * const users = await client.users.createOrUpdateMany([{name: 'John Doe', email: 'john@example.com'}, {name: 'Jane Smith', email: 'jane@example.com'}]);
   */
async createOrUpdateMany(users) {
return this.post(['users', 'create_or_update_many'], users);
⋮----
/**
   * Updates a user by ID.
   * @param {number} id - The ID of the user.
   * @param {object} user - The updated user details.
   * @returns {Promise<{response: object, result: User}>} The updated user's details.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/users/users/#update-user}
   * @example
   * const updatedUser = await client.users.update(12345, {name: 'Johnathan Doe'});
   */
async update(id, user) {
return this.put(['users', id], user);
⋮----
/**
   * Updates multiple users.
   * @param {...*} arguments_ - Arguments including optional IDs and user details.
   * @returns {Promise<{response: object, result: Array<User>}>} An array of updated user details.
   * @throws {Error} Throws an error if not enough arguments are provided.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/users/users/#update-many-users}
   * @example
   * const updatedUsers = await client.users.updateMany([12345, 67890], [{name: 'John Doe'}, {name: 'Jane Smith'}]);
   */
async updateMany(...arguments_ /* Optional ids, users, cb */) {
⋮----
throw new Error('Not enough arguments; at least two expected.');
⋮----
return this.put(['users', 'update_many'], users);
⋮----
return this.put(
['users', 'update_many', '?ids=' + ids.toString()],
⋮----
if (Array.isArray(ids)) {
⋮----
['users', 'update_many', '?ids=' + ids.join(',')],
⋮----
if (ids.hasOwn(ids, 'ids')) {
⋮----
['users', 'update_many', '?ids=' + ids.ids.toString()],
⋮----
if (ids.hasOwn(ids, 'external_ids')) {
⋮----
'?external_ids=' + ids.external_ids.toString(),
⋮----
/**
   * Suspends a user by ID.
   * @param {number} id - The ID of the user to suspend.
   * @returns {Promise<{response: object, result: User}>} The suspended user's details.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/users/users/#suspend-user}
   * @example
   * await client.users.suspend(12345);
   */
async suspend(id) {
return this.put(['users', id], {user: {suspended: true}});
⋮----
/**
   * Unsuspends a user by ID.
   * @param {number} id - The ID of the user to unsuspend.
   * @returns {Promise<{response: object, result: User}>} The unsuspended user's details.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/users/users/#unsuspend-user}
   * @example
   * await client.users.unsuspend(12345);
   */
async unsuspend(id) {
return this.put(['users', id], {user: {suspended: false}});
⋮----
/**
   * Deletes a user by ID.
   * @param {number} id - The ID of the user to delete.
   * @returns {Promise<void>}
   * @throws {Error} Throws an error if the user cannot be deleted.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/users/users/#delete-user}
   * @example
   * await client.users.delete(12345);
   */
async delete(id) {
return super.delete(['users', id]);
⋮----
/**
   * Deletes multiple users.
   * @param {...any} arguments_ - Arguments including optional IDs and user details.
   * @returns {Promise<void>}
   * @throws {Error} Throws an error if not enough arguments are provided.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/users/users/#delete-many-users}
   * @example
   * await client.users.destroyMany([12345, 67890]);
   */
async destroyMany(...arguments_) {
⋮----
return super.delete(['users', 'destroy_many'], users);
⋮----
return super.delete(
['users', 'destroy_many', '?ids=' + ids.toString()],
⋮----
['users', 'destroy_many', '?ids=' + ids.join(',')],
⋮----
['users', 'destroy_many', '?ids=' + ids.ids.toString()],
⋮----
/**
   * Searches for users based on specific parameters.
   * @param {object} parameters - The search parameters.
   * @returns {Promise<Array<User>>} An array of user objects that match the search criteria.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/users/users/#search-users}
   * @example
   * const users = await client.users.search({query: 'john@example.com'});
   */
async search(parameters) {
return this.getAll(['users', 'search', parameters]);
⋮----
/**
   * Retrieves details of the currently authenticated user.
   * @returns {Promise<{response: object, result: User}>} The authenticated user's details.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/users/users/#show-the-currently-authenticated-user}
   * @example
   * const user = await client.users.me();
   */
async me() {
⋮----
/**
   * Merges a user into another user.
   * @param {number} id - The ID of the user to be merged.
   * @param {number} targetId - The ID of the user into which the first user will be merged.
   * @returns {Promise<{response: object, result: object}>} The details of the merged user.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/users/users/#merge-user-into-another-user}
   * @example
   * await client.users.merge(12345, 67890);
   */
async merge(id, targetId) {
return this.put(['users', id, 'merge'], {user: {id: targetId}});
⋮----
/**
   * Changes the password of a user.
   * @param {number} userId - The ID of the user whose password is to be changed.
   * @param {string} oldPassword - The current password of the user.
   * @param {string} newPassword - The new password for the user.
   * @returns {Promise<{response: object, result: object}>} The user's details after the password change.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/users/users/#change-password}
   * @example
   * await client.users.password(12345, 'oldPassword123', 'newPassword456');
   */
async password(userId, oldPassword, newPassword) {
return this.put(['users', userId, 'password'], {
⋮----
/**
   * Retrieves users incrementally with included related data.
   * @param {number} startTime - The start time for the incremental export.
   * @param {string} include - The related data to include.
   * @returns {Promise<Array<object>>} An array of user objects with included data.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/users/users/#incremental-export-users}
   * @example
   * const users = await client.users.incrementalInclude(1632614395, 'relatedData');
   */
async incrementalInclude(startTime, include) {
return this.getAll([
⋮----
/**
   * Retrieves users incrementally.
   * @param {number} startTime - The start time for the incremental export.
   * @returns {Promise<Array<object>>} An array of user objects.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/users/users/#incremental-export-users}
   * @example
   * const users = await client.users.incremental(1632614395);
   */
async incremental(startTime) {
return this.getAll(['incremental', 'users', {start_time: startTime}]);
⋮----
/**
   * Retrieves a sample of users incrementally.
   * @param {number} startTime - The start time for the incremental export.
   * @returns {Promise<{response: object, result: Array<object>}>} A sample array of user objects.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/users/users/#incremental-sample-export-users}
   * @example
   * const usersSample = await client.users.incrementalSample(1632614395);
   */
async incrementalSample(startTime) {
return this.get([
⋮----
/**
   * Lists tags associated with a user.
   * @param {number} userId - The ID of the user.
   * @returns {Promise<Array<string>>} An array of tags associated with the user.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/users/user-tags/#list-tags}
   * @example
   * const tags = await client.users.listTags(12345);
   */
async listTags(userId) {
return this.getAll(['users', userId, 'tags']);
⋮----
/**
   * Sets tags for a user.
   * @param {number} userId - The ID of the user.
   * @param {Array<string>} tags - An array of tags to set for the user.
   * @returns {Promise<{response: object, result: object}>} The user's details with the updated tags.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/users/user-tags/#set-tags}
   * @example
   * await client.users.setTags(12345, ['tag1', 'tag2']);
   */
async setTags(userId, tags) {
return this.post(['users', userId, 'tags'], tags);
⋮----
/**
   * Adds tags to a user.
   * @param {number} userId - The ID of the user.
   * @param {Array<string>} tags - An array of tags to add to the user.
   * @returns {Promise<{response: object, result: object}>} The user's details with the added tags.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/users/user-tags/#add-tags}
   * @example
   * await client.users.addTags(12345, ['tag3', 'tag4']);
   */
async addTags(userId, tags) {
return this.put(['users', userId, 'tags'], tags);
⋮----
/**
   * Removes tags from a user.
   * @param {number} userId - The ID of the user.
   * @param {Array<string>} tags - An array of tags to remove from the user.
   * @returns {Promise<void>}
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/users/user-tags/#remove-tags}
   * @example
   * await client.users.removeTags(12345, ['tag3', 'tag4']);
   */
async removeTags(userId, tags) {
return super.delete(['users', userId, 'tags'], tags);
</file>

<file path="src/clients/core/views.js">
// File: views.js
⋮----
/**
 * Represents the Views API methods.
 * @see {@link https://developer.zendesk.com/api-reference/ticketing/business-rules/views/}
 */
class Views extends Client {
⋮----
/**
   * Lists shared and personal views available to the current user.
   * @returns {Promise<object>} A promise that resolves to the list of views.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/business-rules/views/#list-views}
   * @example
   * const views = await client.views.list();
   */
async list() {
return this.getAll(['views']);
⋮----
/**
   * Lists active shared and personal views available to the current user.
   * @returns {Promise<object>} A promise that resolves to the list of active views.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/business-rules/views/#list-active-views}
   * @example
   * const activeViews = await client.views.listActive();
   */
async listActive() {
return this.getAll(['views', 'active']);
⋮----
/**
   * A compacted list of shared and personal views available to the current user.
   * @returns {Promise<object>} A promise that resolves to the compact list of views.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/business-rules/views/#list-views-compact}
   * @example
   * const compactViews = await client.views.listCompact();
   */
async listCompact() {
return this.getAll(['views', 'compact']);
⋮----
/**
   * Shows details of a specific view.
   * @param {number} viewID - The ID of the view to retrieve.
   * @returns {Promise<{response: object, result: object}>} A promise that resolves to the details of the view.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/business-rules/views/#show-view}
   * @example
   * const viewDetails = await client.views.show(12345);
   */
async show(viewID) {
return this.get(['views', viewID]);
⋮----
/**
   * Creates a new view.
   * @param {object} view - The view data to create.
   * @returns {Promise<{response: object, result: object}>} A promise that resolves to the created view details.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/business-rules/views/#create-view}
   * @example
   * const newView = {
   *   title: "My New View",
   *   conditions: {...}
   * };
   * const createdView = await client.views.create(newView);
   */
async create(view) {
return this.post(['views'], view);
⋮----
/**
   * Updates an existing view by its ID.
   * @param {number} viewID - The ID of the view to update.
   * @param {object} viewData - The updated view data.
   * @returns {Promise<{response: object, result: object}>} A promise that resolves to the updated view details.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/business-rules/views/#update-view}
   * @example
   * const updatedData = {
   *   title: "Updated View Title"
   * };
   * const updatedView = await client.views.update(12345, updatedData);
   */
async update(viewID, viewData) {
return this.put(['views', viewID], viewData);
⋮----
/**
   * Executes a specific view by its ID.
   * @param {number} viewID - The ID of the view to execute.
   * @param {object} parameters - Additional parameters for execution.
   * @returns {Promise<object>} A promise that resolves to the executed view results.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/business-rules/views/#execute-view}
   * @example const executedView = await client.views.execute(12345, {sort_by: 'status'});
   */
async execute(viewID, parameters) {
return this.getAll(['views', viewID, 'execute', parameters]);
⋮----
/**
   * Retrieves tickets from a specific view by its ID.
   * @param {number} viewID - The ID of the view.
   * @returns {Promise<object>} A promise that resolves to the list of tickets from the view.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/business-rules/views/#list-tickets-from-a-view}
   * @example const ticketsFromView = await client.views.tickets(12345);
   */
async tickets(viewID) {
return this.getAll(['views', viewID, 'tickets']);
⋮----
/**
   * Previews a new view without saving it.
   * @param {object} parameters - Additional parameters for execution.
   * @returns {Promise<object>} A promise that resolves to the previewed view results.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/business-rules/views/#preview-view}
   * @example
   * const viewData = {
   *   title: "Preview View",
   *   conditions: {...}
   * };
   * const previewResults = await client.views.preview(viewData);
   */
async preview(parameters) {
return this.requestAll('POST', ['views', 'preview'], parameters);
⋮----
/**
   * Retrieves the count of tickets for a specific view.
   * @param {number} viewID - The ID of the view to count tickets for.
   * @returns {Promise<{response: object, result: object}>} A promise that resolves to the ticket count for the view.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/business-rules/views/#show-view-count}
   * @example const ticketCount = await client.views.showCount(12345);
   */
async showCount(viewID) {
return this.get(['views', viewID, 'count']);
⋮----
/**
   * Retrieves the ticket counts for multiple views.
   * @param {Array<number>} viewIDs - An array of view IDs to count tickets for.
   * @returns {Promise<{response: object, result: object}>} A promise that resolves to the ticket counts for the specified views.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/business-rules/views/#show-multiple-view-counts}
   * @example const ticketCounts = await client.views.showCounts([12345, 67890]);
   */
async showCounts(viewIDs) {
return this.get(['views', 'count_many', {ids: viewIDs}]);
⋮----
/**
   * Exports views to a JSON file.
   * @param {number} viewID - The ID of the view to export.
   * @returns {Promise<{response: object, result: object}>} A promise that resolves to the exported views in JSON format.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/business-rules/views/#export-view}
   * @example const exportedViews = await client.views.export([12345, 67890]);
   */
async export(viewID) {
return this.get(['views', viewID, 'export']);
⋮----
/**
   * Retrieves all active shared views.
   * @returns {Promise<{response: object, result: object}>} A promise that resolves to the list of all active shared views.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/business-rules/views/#list-active-shared-views}
   */
async listActiveShared() {
return this.get(['views', 'shared']);
⋮----
/**
   * Retrieves the view's execution status.
   * @param {number} viewID - The ID of the view to check the execution status for.
   * @returns {Promise<{response: object, result: object}>} A promise that resolves to the execution status of the view.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/business-rules/views/#show-view-execution-status}
   */
async showExecutionStatus(viewID) {
return this.get(['views', viewID, 'execution_status']);
⋮----
/**
   * Retrieves the view's recent ticket IDs.
   * @param {number} viewID - The ID of the view to retrieve recent ticket IDs for.
   * @returns {Promise<{response: object, result: object}>} A promise that resolves to the recent ticket IDs of the view.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/business-rules/views/#show-view-recent-ticket-ids}
   */
async showRecentTicketIDs(viewID) {
return this.get(['views', viewID, 'recent_ticket_ids']);
⋮----
/**
   * Deletes a specific view by its ID.
   * @param {number} viewID - The ID of the view to delete.
   * @returns {Promise<object>} A promise that resolves when the view is deleted.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/business-rules/views/#delete-view}
   */
async delete(viewID) {
return this.delete(['views', viewID]);
⋮----
/**
   * Reorders views based on the provided order.
   * @param {Array<number>} viewOrder - An array of view IDs in the desired order.
   * @returns {Promise<{response: object, result: object}>} A promise that resolves when the views are reordered.
   * @see {@link https://developer.zendesk.com/api-reference/ticketing/business-rules/views/#reorder-views}
   */
async reorder(viewOrder) {
return this.put(['views', 'reorder'], {view_order: viewOrder});
</file>

<file path="src/clients/core/webhooks.js">
// Webhooks.js: Client for the zendesk API.
⋮----
/**
 * Webhooks client for interacting with the Zendesk Webhooks API.
 * @see {@link https://developer.zendesk.com/api-reference/webhooks/webhooks-api/webhooks/}
 */
class Webhooks extends Client {
⋮----
/**
   * List all webhooks.
   * @returns {Promise<object>} A promise that resolves to the list of webhooks.
   * @see {@link https://developer.zendesk.com/api-reference/webhooks/webhooks-api/webhooks/#list-webhooks}
   * @example const webhooks = await client.webhooks.list();
   */
async list() {
return this.getAll(['webhooks']);
⋮----
/**
   * Retrieve a specific webhook by ID.
   * @param {string} webhookID - The ID of the webhook to retrieve.
   * @returns {Promise<{response: object, result: object}>} A promise that resolves to the specified webhook.
   * @see {@link https://developer.zendesk.com/api-reference/webhooks/webhooks-api/webhooks/#show-webhook}
   * @example const webhook = await client.webhooks.show('webhookID123');
   */
async show(webhookID) {
return this.get(['webhooks', webhookID]);
⋮----
/**
   * Create a new webhook.
   * @param {object} webhook - The webhook data to create.
   * @returns {Promise<{response: object, result: object}>} A promise that resolves to the created webhook.
   * @see {@link https://developer.zendesk.com/api-reference/webhooks/webhooks-api/webhooks/#create-or-clone-webhook}
   * @example
   * const newWebhook = {
   *   // ... webhook data ...
   * };
   * const createdWebhook = await client.webhooks.create(newWebhook);
   */
async create(webhook) {
return this.post(['webhooks'], webhook);
⋮----
/**
   * Update a specific webhook by ID.
   * @param {string} webhookID - The ID of the webhook to update.
   * @param {object} webhook - The updated webhook data.
   * @returns {Promise<{response: object, result: object}>} A promise that resolves to the updated webhook.
   * @see {@link https://developer.zendesk.com/api-reference/webhooks/webhooks-api/webhooks/#update-webhook}
   * @example
   * const updatedData = {
   *   // ... updated data ...
   * };
   * const updatedWebhook = await client.webhooks.update('webhookID123', updatedData);
   */
async update(webhookID, webhook) {
return this.put(['webhooks', webhookID], webhook);
⋮----
/**
   * Delete a specific webhook by ID.
   * @param {string} webhookID - The ID of the webhook to delete.
   * @returns {Promise<object>} A promise that resolves when the webhook is deleted.
   * @see {@link https://developer.zendesk.com/api-reference/webhooks/webhooks-api/webhooks/#delete-webhook}
   * @example await client.webhooks.delete('webhookID123');
   */
async delete(webhookID) {
return super.delete(['webhooks', webhookID]);
⋮----
// ... Previous code ...
⋮----
/**
   * Test a new or existing webhook.
   * @param {object} request - The request data for testing the webhook.
   * @param {string} [webhookID] - The ID of the webhook to be tested (for existing webhooks).
   * @returns {Promise<{response: object, result: object}>} A promise that resolves to the test result.
   * @see {@link https://developer.zendesk.com/api-reference/webhooks/webhooks-api/webhooks/#test-webhook}
   * @example
   * const requestData = {
   *   // ... request data ...
   * };
   * const testResult = await client.webhooks.test(requestData, 'webhookID123');
   */
async test(request, webhookID) {
⋮----
return this.post(endpoint, request);
⋮----
/**
   * List invocations for a specific webhook.
   * @param {string} webhookID - The ID of the webhook.
   * @returns {Promise<{response: object, result: object}>} A promise that resolves to the list of invocations.
   * @see {@link https://developer.zendesk.com/api-reference/webhooks/webhooks-api/webhooks/#list-webhook-invocations}
   * @example const invocations = await client.webhooks.listInvocations('webhookID123');
   */
async listInvocations(webhookID) {
return this.get(['webhooks', webhookID, 'invocations']);
⋮----
/**
   * List invocation attempts for a specific webhook.
   * @param {string} webhookID - The ID of the webhook.
   * @param {string} invocationID - The ID of the webhook invocation.
   * @returns {Promise<{response: object, result: object}>} A promise that resolves to the list of invocation attempts.
   * @see {@link https://developer.zendesk.com/api-reference/webhooks/webhooks-api/webhooks/#list-webhook-invocation-attempts}
   * @example const attempts = await client.webhooks.listInvocationAttempts('webhookID123', 'invocationID123');
   */
async listInvocationAttempts(webhookID, invocationID) {
return this.get([
⋮----
/**
   * Retrieve the signing secret of a specific webhook.
   * @param {string} webhookID - The ID of the webhook.
   * @returns {Promise<{response: object, result: object}>} A promise that resolves to the signing secret.
   * @see {@link https://developer.zendesk.com/api-reference/webhooks/webhooks-api/webhooks/#show-webhook-signing-secret}
   * @example const secret = await client.webhooks.getSigningSecret('webhookID123');
   */
async getSigningSecret(webhookID) {
return this.get(['webhooks', webhookID, 'signing_secret']);
⋮----
/**
   * Reset the signing secret for a specific webhook.
   * @param {string} webhookID - The ID of the webhook.
   * @returns {Promise<{response: object, result: object}>} A promise that resolves to the new signing secret.
   * @see {@link https://developer.zendesk.com/api-reference/webhooks/webhooks-api/webhooks/#reset-webhook-signing-secret}
   * @example const newSecret = await client.webhooks.resetSigningSecret('webhookID123');
   */
async resetSigningSecret(webhookID) {
return this.post(['webhooks', webhookID, 'signing_secret']);
⋮----
/**
   * Patch a specific webhook by ID.
   * @param {string} webhookID - The ID of the webhook to patch.
   * @param {object} webhook - The data to patch.
   * @returns {Promise<{response: object, result: object}>} A promise that resolves to the patched webhook.
   * @see {@link https://developer.zendesk.com/api-reference/webhooks/webhooks-api/webhooks/#patch-webhook}
   * @example
   * const patchData = {
   *   // ... patch data ...
   * };
   * const patchedWebhook = await client.webhooks.patch('webhookID123', patchData);
   */
async patch(webhookID, webhook) {
return super.patch(['webhooks', webhookID], webhook);
</file>

<file path="src/clients/helpcenter/accesspolicies.js">
// AccessPolicies.js: Client for the zendesk help center API.
⋮----
class AccessPolicies extends Client {
⋮----
// AccessPolicies
// Showing Access Policies
async show(sectionID) {
return this.get(['sections', sectionID, 'access_policy']);
⋮----
// Updating Access Policies
async update(sectionID, accessPolicy) {
return this.put(['sections', sectionID, 'access_policy'], accessPolicy);
</file>

<file path="src/clients/helpcenter/articleattachments.js">
// ArticleAttachments.js: Client for the zendesk help center API.
⋮----
class ArticleAttachments extends Client {
⋮----
// Article Attachments
// Listing Article Attachments
async list(articleID) {
return this.get(['articles', articleID, 'attachments']);
⋮----
// Listing Article Inline Attachments
async listInline(articleID) {
return this.get(['articles', articleID, 'attachments', 'inline']);
⋮----
// Listing Article Block Attachments
async listBlock(articleID) {
return this.get(['articles', articleID, 'attachments', 'block']);
⋮----
// Showing Article Attachments
async show(attachmentID) {
return this.get(['articles', 'attachments', attachmentID]);
⋮----
// Creating Article Attachments
async create(/* articleID */) {
return new Error('not implemented');
⋮----
// Creating Unassociated Article Attachments
async createUnassociated(/* articleID */) {
⋮----
// Deleting Article Attachments
async delete(attachmentID) {
return super.delete(['articles', 'attachments', attachmentID]);
</file>

<file path="src/clients/helpcenter/articlecomments.js">
// ArticleComment.js: Client for the zendesk help center API.
⋮----
class ArticleComments extends Client {
⋮----
// Article Comments
⋮----
// Listing Article Comments by UserID
async listByUser(userID) {
return this.getAll(['users', userID, 'comments']);
⋮----
// Listing Article Comments by ArticleID
async listByArticle(articleID) {
return this.getAll(['articles', articleID, 'comments']);
⋮----
// Showing an Article Comment
async show(articleID, commentID) {
return this.get(['articles', articleID, 'comments', commentID]);
⋮----
// Creating an Article Comment
async create(articleID, comment) {
return this.post(['articles', articleID, 'comments'], comment);
⋮----
// Updating an Article Comment
async update(articleID, commentID, comment) {
return this.put(['articles', articleID, 'comments', commentID], comment);
⋮----
// Deleting an Article Comment
async delete(articleID, commentID) {
return super.delete(['articles', articleID, 'comments', commentID]);
</file>

<file path="src/clients/helpcenter/articlelabels.js">
// ArticleLabels.js: Client for the zendesk help center API.
⋮----
class ArticleLabels extends Client {
⋮----
// Listing Article Labels
async list() {
return this.get(['articles', 'labels']);
⋮----
async listByArticle(articleID) {
return this.get(['articles', articleID, 'labels']);
⋮----
// Showing Article Labels
async show(labelID) {
return this.get(['articles', 'labels', labelID]);
⋮----
// Creating Article Labels
async create(articleID, label) {
return this.post(['articles', articleID, 'labels'], label);
⋮----
// Deleting Article Labels
async delete(articleID, labelID) {
return super.delete(['articles', articleID, 'labels', labelID]);
</file>

<file path="src/clients/helpcenter/articles.js">
// Articles.js: Client for the zendesk help center API.
⋮----
class Articles extends Client {
⋮----
// Listing Articles
async list() {
return this.getAll(['articles']);
⋮----
// Listing Articles By Locale
⋮----
async listByLocale(locale) {
return this.getAll([locale, 'articles']);
⋮----
// Listing Articles Under A Section
⋮----
async listBySection(sectionID) {
return this.getAll(['sections', sectionID, 'articles']);
⋮----
// Listing Articles Under A Section by Locale
⋮----
async listBySectionByLocale(locale, sectionID) {
return this.getAll([locale, 'sections', sectionID, 'articles']);
⋮----
// Listing Articles Under A Category
⋮----
async listByCategory(categoryID) {
return this.getAll(['categories', categoryID, 'articles']);
⋮----
// Listing Articles Under A Category by Locale
⋮----
async listByCategoryByLocale(locale, categoryID) {
return this.getAll([locale, 'categories', categoryID, 'articles']);
⋮----
// Listing Articles Belongs To A User
⋮----
async listByUser(userID) {
return this.getAll(['users', userID, 'articles']);
⋮----
// Listing Articles Since Start Time
⋮----
async listSinceStartTime(startTime) {
return this.getAll(['incremental', 'articles', {start_time: startTime}]);
⋮----
// Listing Articles By Label
⋮----
async listByLabelNames(labelNames) {
return this.getAll(['articles', {label_names: labelNames.toString()}]);
⋮----
// Viewing Articles
async show(articleID) {
return this.get(['articles', articleID]);
⋮----
// Viewing Articles By Locale
async showWithLocale(locale, articleID) {
return this.get([locale, 'articles', articleID]);
⋮----
// Creating Articles
async create(sectionID, article) {
return this.post(['sections', sectionID, 'articles'], article);
⋮----
// Creating Articles With Specified Locale
async createWithLocale(locale, sectionID, article) {
return this.post([locale, 'sections', sectionID, 'articles'], article);
⋮----
// Updating Articles
async update(articleID, article) {
return this.put(['articles', articleID], article);
⋮----
// Updating Articles With Specified Locale
async updateWithLocale(locale, articleID, article) {
return this.put([locale, 'articles', articleID], article);
⋮----
// Associating Attachments In Bulk
async associateAttachmentsInBulk(articleID, attachmentIDsInBulk) {
return this.post(
⋮----
// Deleting Articles
async delete(articleID) {
return super.delete(['articles', articleID]);
</file>

<file path="src/clients/helpcenter/categories.js">
// Categories.js: Client for the zendesk API.
⋮----
class Categories extends Client {
⋮----
// Listing Categories
async list() {
return this.getAll(['categories']);
⋮----
// Listing Categories By Locale
async listWithLocale(locale) {
return this.getAll([locale, 'categories']);
⋮----
// Viewing Categories
async show(categoryID) {
return this.get(['categories', categoryID]);
⋮----
// Creating Categories
async create(category) {
return this.post(['categories'], category);
⋮----
// Updating Categories
async update(categoryID, category) {
return this.put(['categories', categoryID], category);
⋮----
// Updating Categories With Specified Locale
async updateWithLocale(locale, categoryID, category) {
return this.put([locale, 'categories', categoryID], category);
⋮----
// Updating Categories' Source Locale
async updateSourceLocale(categoryID, sourceLocale) {
return this.put(['categories', categoryID, 'source_locale'], sourceLocale);
⋮----
// Deleting Categories
async delete(categoryID) {
return super.delete(['categories', categoryID]);
</file>

<file path="src/clients/helpcenter/index.js">
/**
 * Manages help center for the Zendesk client.
 *
 * This class provides access to various help center-related functionality within the Zendesk API.
 */
class ZendeskClientHelpcenter {
/**
   * @param {import('../../index.js').ZendeskClient} client - The Zendesk client instance.
   */
⋮----
/**
   * @template T
   * @param {new (options: import('../../index.js').ZendeskClientOptions) => T} className - The class to instantiate.
   * @returns {T} An instance of the provided class.
   * @private
   */
_instantiate(className) {
return this.client._instantiate(className);
⋮----
get accesspolicies() {
⋮----
return this._instantiate(AccessPolicies);
⋮----
get articleattachments() {
⋮----
return this._instantiate(ArticleAttachments);
⋮----
get articlecomments() {
⋮----
return this._instantiate(ArticleComments);
⋮----
get articlelabels() {
⋮----
return this._instantiate(ArticleLabels);
⋮----
get articles() {
⋮----
return this._instantiate(Articles);
⋮----
get categories() {
⋮----
return this._instantiate(Categories);
⋮----
get search() {
⋮----
return this._instantiate(Search);
⋮----
get sections() {
⋮----
return this._instantiate(Sections);
⋮----
get subscriptions() {
⋮----
return this._instantiate(Subscriptions);
⋮----
get translations() {
⋮----
return this._instantiate(Translations);
⋮----
get usersegments() {
⋮----
return this._instantiate(UserSegments);
⋮----
get votes() {
⋮----
return this._instantiate(Votes);
</file>

<file path="src/clients/helpcenter/search.js">
// Search.js: Client for the zendesk help center API.
⋮----
class Search extends Client {
⋮----
// Searching Articles
async searchArticles(searchString) {
⋮----
return this.get(['articles', 'search', searchContent]);
⋮----
// Searching Articles In Locale
async searchArticlesInLocale(searchString, locale) {
⋮----
// Searching Articles By Labels
async searchArticlesByLabels(labelNames) {
⋮----
return this.get(['articles', searchContent]);
⋮----
// Searching Questions
async searchQuestions(searchString) {
// Do not need requesetAll
⋮----
return this.get(['questions', 'search', searchContent]);
</file>

<file path="src/clients/helpcenter/sections.js">
// Sections.js: Client for the zendesk API.
⋮----
class Sections extends Client {
⋮----
// Sections
// Listing Sections
async list() {
return this.getAll(['sections']);
⋮----
// Listing Sections In A Category
async listByCategory(categoryID) {
return this.getAll(['categories', categoryID, 'sections']);
⋮----
// Listing Sections By Locale
async listWithLocale(locale) {
return this.getAll([locale, 'sections']);
⋮----
// Listing Sections By Locale In A Category
async listByCategoryByLocale(locale, categoryID) {
return this.getAll([locale, 'categories', categoryID, 'sections']);
⋮----
// Viewing Sections
async show(sectionID) {
return this.get(['sections', sectionID]);
⋮----
// Viewing Section by locale
async showWithLocale(locale, sectionID) {
return this.get([locale, 'sections', sectionID]);
⋮----
// Creating Sections
async create(categoryId, section) {
return this.post(['categories', categoryId, 'sections'], section);
⋮----
// Creating Sections With Specified Locale
async createWithLocale(locale, categoryId, section) {
return this.post([locale, 'categories', categoryId, 'sections'], section);
⋮----
// Updating Sections
async update(sectionID, section) {
return this.put(['sections', sectionID], section);
⋮----
// Updating Sections By Locale
async updateWithLocale(locale, sectionID, section) {
return this.put([locale, 'sections', sectionID], section);
⋮----
// Updating Sections' Source Locale
async updateSourceLocale(sectionID, sourceLocale) {
return this.put(['sections', sectionID, 'source_locale'], sourceLocale);
⋮----
// Deleting Sections
async delete(sectionID) {
return super.delete(['sections', sectionID]);
</file>

<file path="src/clients/helpcenter/subscriptions.js">
// Subscriptions.js: Client for the zendesk API.
⋮----
class Subscriptions extends Client {
⋮----
// Listing subscriptions by user
async listByUser(userID) {
return this.getAll(['users', userID, 'subscriptions']);
⋮----
// Listing subscriptions by article
async listByArticle(articleID) {
return this.getAll(['articles', articleID, 'subscriptions']);
⋮----
// Listing subscriptions by section
async listBySection(sectionID) {
return this.getAll(['sections', sectionID, 'subscriptions']);
⋮----
// Showing subscriptions by article
async showbyArticle(articleID, subscriptionID) {
return this.get(['articles', articleID, 'subscriptions', subscriptionID]);
⋮----
// Showing subscriptions by section
async showbySection(sectionID, subscriptionID) {
return this.get(['sections', sectionID, 'subscriptions', subscriptionID]);
⋮----
// Creating subscriptions by article
async createbyArticle(articleID, subscription) {
return this.post(['articles', articleID, 'subscriptions'], subscription);
⋮----
// Creating subscriptions by section
async createbySection(sectionID, subscription) {
return this.post(['sections', sectionID, 'subscriptions'], subscription);
⋮----
// Deleting subscriptions by article
async deletebyArticle(articleID, subscriptionID) {
return super.delete([
⋮----
// Deleting subscriptions by section
async deletebySection(sectionID, subscriptionID) {
</file>

<file path="src/clients/helpcenter/translations.js">
// Translation.js: Client for the zendesk API.
⋮----
class Translations extends Client {
⋮----
// Viewing Translations
async show(articleID, locale) {
return this.get(['articles', articleID, 'translations', locale]);
⋮----
// Listing Translations Belongs To An Article
// Parameters allowed:
// locales=en-us,en-uk
// outdated=true
async listByArticle(articleID, filterParameters) {
return this.getAll([
⋮----
// Listing Translations Belongs To A Section
async listBySection(sectionID) {
return this.getAll(['sections', sectionID, 'translations']);
⋮----
// Listing Translations Belongs To A Category
async listByCategory(categoryID) {
return this.getAll(['categories', categoryID, 'translations']);
⋮----
async listMissingLocalesByArticle(articleID) {
return this.get(['articles', articleID, 'translations', 'missing']);
⋮----
async listMissingLocalesBySection(sectionID) {
return this.get(['sections', sectionID, 'translations', 'missing']);
⋮----
async listMissingLocalesByCategory(categoryID) {
return this.get(['categories', categoryID, 'translations', 'missing']);
⋮----
// Creating Translations For An Article
async createForArticle(articleID, translation) {
return this.post(['articles', articleID, 'translations'], translation);
⋮----
// Creating Translations For A Section
async createForSection(sectionID, translation) {
return this.post(['sections', sectionID, 'translations'], translation);
⋮----
// Creating Translations For A Category
async createForCategory(categoryID, translation) {
return this.post(['categories', categoryID, 'translations'], translation);
⋮----
// Updating Translations For An Article
async updateForArticle(articleID, locale, translation) {
return this.put(
⋮----
// Updating Translations For A Section
async updateForSection(sectionID, locale, translation) {
⋮----
// Updating Translations For A Category
async updateForCategory(categoryID, locale, translation) {
⋮----
// Deleting Translations
async delete(translationID) {
return super.delete(['translations', translationID]);
⋮----
// Listing All Enabled Locales And Default Locale
async listLocales() {
return this.get(['locales']);
</file>

<file path="src/clients/helpcenter/usersegments.js">
// Usersegments.js: Client for the zendesk help center API..
⋮----
class UserSegments extends Client {
⋮----
// Listing User Segments
async list() {
return this.getAll(['user_segments']);
⋮----
// Listing only User Segments applicable to the current account
async listApplicable() {
return this.getAll(['user_segments', 'applicable']);
⋮----
// Listing Segment accessible for the specified user
async listByUser(userID) {
return this.getAll(['users', userID, 'user_segments']);
⋮----
// Get User Segment By Id
async show(userSegmentID) {
return this.get(['user_segments', userSegmentID]);
⋮----
// List Sections using a User Segment
async listSections(userSegmentID) {
return this.getAll(['user_segments', userSegmentID, 'sections']);
⋮----
async listTopics(userSegmentID) {
return this.getAll(['user_segments', userSegmentID, 'topics']);
⋮----
// Creating User Segment
async create(userSegment) {
return this.post(['user_segments'], userSegment);
⋮----
// Updating User Segment
async update(userSegmentID, userSegment) {
return this.put(['user_segments', userSegmentID], userSegment);
⋮----
// Deleting User Segment
async delete(userSegmentID) {
return super.delete(['user_segments', userSegmentID]);
</file>

<file path="src/clients/helpcenter/votes.js">
// Votes.js: Client for the zendesk help center API.
⋮----
class Votes extends Client {
⋮----
// Listing Votes By User
async listByUser(userID) {
return this.get(['users', userID, 'votes']);
⋮----
// Listing Votes By Article
async listByArticle(articleID) {
return this.get(['articles', articleID, 'votes']);
⋮----
// Viewing Votes
async show(voteID) {
return this.get(['votes', voteID]);
⋮----
// Vote Up For Article
async createUpVoteForArticle(articleID) {
return this.post(['articles', articleID, 'up']);
⋮----
// Vote Down For Article
async createDownVoteForArticle(articleID) {
return this.post(['articles', articleID, 'down']);
⋮----
// Vote Up For Question
async createUpVoteForQuestion(questionID) {
return this.post(['questions', questionID, 'up']);
⋮----
// Vote Down For Question
async createDownVoteForQuestion(questionID) {
return this.post(['questions', questionID, 'down']);
⋮----
// Vote Up For Answer
async createUpVoteForAnswer(answerID) {
return this.post(['answers', answerID, 'up']);
⋮----
// Vote Down For Answer
async createDownVoteForAnswer(answerID) {
return this.post(['answers', answerID, 'down']);
⋮----
// Deleting Votes
async delete(voteID) {
return super.delete(['votes', voteID]);
</file>

<file path="src/clients/services/index.js">
/**
 * Manages services for the Zendesk client.
 *
 * This class provides access to various service-related functionality within the Zendesk API.
 */
class ZendeskClientServices {
/**
   * Creates a new instance of ZendeskClientServices.
   * @param {import('../../index.js').ZendeskClient} client - The Zendesk client instance.
   */
⋮----
/**
   * Instantiates a new service class.
   * @template T
   * @param {new (options: import('../../index.js').ZendeskClientOptions) => T} className - The class to instantiate.
   * @returns {T} An instance of the provided class.
   */
_instantiate(className) {
return this.client._instantiate(className);
⋮----
get links() {
⋮----
return this._instantiate(Links);
</file>

<file path="src/clients/services/links.js">
// Links.js: Client for the zendesk services API.
⋮----
class Links extends Client {
⋮----
// Listing Links
async list() {
this.getAll(['links']);
⋮----
// Viewing Links
async show(ticket_ids) {
this.get(['links', '?ticket_id=' + ticket_ids.toString()]);
</file>

<file path="src/clients/voice/agentactivity.js">
// AgentActivity.js: Client for the Zendesk Voice API.
⋮----
class AgentActivity extends Client {
⋮----
// Showing Agent Activity
async show() {
return this.get(['stats', 'agents_activity']);
</file>

<file path="src/clients/voice/availabilities.js">
// Availabilities.js: Client for the Zendesk Voice API.
⋮----
class Availabilities extends Client {
⋮----
// Update Availabilities
async update(agentID, availability) {
return this.put(['availabilities', agentID], availability);
⋮----
// Get Availabilities by ID
async show(agentID) {
return this.get(['availabilities', agentID]);
</file>

<file path="src/clients/voice/currentqueueactivity.js">
// CurrentQueueActivity.js: Client for the Zendesk Voice API.
⋮----
class CurrentQueueActivity extends Client {
⋮----
// Get Current Queue Activity
async show() {
return this.get(['stats', 'current_queue_activity']);
</file>

<file path="src/clients/voice/greetingcategories.js">
// GreetingCategories.js: Client for the zendesk API.
⋮----
class GreetingCategories extends Client {
⋮----
// List Greetings Categories
async list() {
return this.get(['greeting_categories']);
⋮----
// Get Greetings Category by ID
async show(greetingCategoryID) {
return this.get(['greeting_category', greetingCategoryID]);
</file>

<file path="src/clients/voice/greetings.js">
// Greetings.js: Client for the zendesk API.
⋮----
class Greetings extends Client {
⋮----
// List Greetings
async list() {
return this.get(['greetings']);
⋮----
// List Greetings by ID
async show(greetingID) {
return this.get(['greetings', greetingID]);
⋮----
// Create Greeting
async create(greeting) {
return this.post('POST', ['greetings'], greeting);
⋮----
// Update Greeting
async update(greeting, greetingID) {
return this.put('PUT', ['greetings', greetingID], greeting);
⋮----
// Delete Greeting
async delete(greetingID) {
return super.delete('DELETE', ['greetings', greetingID]);
</file>

<file path="src/clients/voice/historicalqueueactivity.js">
// HistoricalQueueActivity.js: Client for the zendesk API.
⋮----
class HistoricalQueueActivity extends Client {
⋮----
// Showing HistoricalQueueActivity
async show() {
return this.get(['stats', 'historical_queue_activity']);
</file>

<file path="src/clients/voice/index.js">
/**
 * Manages voice for the Zendesk client.
 *
 * This class provides access to various voice-related functionality within the Zendesk API.
 */
class ZendeskClientVoice {
/**
   * @param {import('../../index.js').ZendeskClient} client - The Zendesk client instance.
   */
⋮----
/**
   * @template T
   * @param {new (options: import('../../index.js').ZendeskClientOptions) => T} className - The class to instantiate.
   * @returns {T} An instance of the provided class.
   * @private
   */
_instantiate(className) {
return this.client._instantiate(className);
⋮----
get currentqueueactivity() {
⋮----
return this._instantiate(CurrentQueueActivity);
⋮----
get greetingcategories() {
⋮----
return this._instantiate(GreetingCategories);
⋮----
get greetings() {
⋮----
return this._instantiate(Greetings);
⋮----
get historicalqueueactivity() {
⋮----
return this._instantiate(HistoricalQueueActivity);
⋮----
get phonenumbers() {
⋮----
return this._instantiate(PhoneNumbers);
</file>

<file path="src/clients/voice/phonenumbers.js">
// PhoneNumbers.js: Client for the Zendesk Voice API.
⋮----
class PhoneNumbers extends Client {
⋮----
// Searching Available PhoneNumbers
async search(searchTerm) {
return this.get(['phone_numbers', 'search', {query: searchTerm}]);
⋮----
// List PhoneNumbers
async list() {
return this.get(['phone_numbers']);
⋮----
// Create PhoneNumbers
async create(phone_number) {
return this.post(['phone_numbers'], phone_number);
⋮----
// Update PhoneNumbers
async update(phoneID, phone_number) {
return this.put(['phone_numbers', phoneID], phone_number);
⋮----
// Get PhoneNumbers by ID
async show(phoneID) {
return this.get(['phone_numbers', phoneID]);
⋮----
// Delete PhoneNumbers
async delete(phoneID) {
return super.delete(['phone_numbers', phoneID]);
</file>

<file path="src/clients/authorization-handler.js">
/**
 * Handles the creation of authorization headers based on the provided configuration.
 * Supports both OAuth and Basic Authentication methods.
 */
class AuthorizationHandler {
/**
   * Creates a new instance of the AuthorizationHandler.
   * @param {Map} options - A Map object containing the necessary configuration options.
   */
⋮----
/**
   * Determines the authentication method and creates the appropriate authorization header.
   * @returns {string} The resulting authorization header string.
   */
createAuthorizationHeader() {
if (this.isOAuth()) {
return this.createOAuthHeader();
⋮----
return this.createBasicAuthHeader();
⋮----
/**
   * Checks if OAuth should be used for authentication.
   * @returns {boolean} True if OAuth is the chosen method; false otherwise.
   */
isOAuth() {
⋮----
this.options.get('useOAuth') === true ||
this.options.get('oauth') === true
⋮----
/**
   * Creates the OAuth authorization header.
   * @returns {string} The OAuth authorization header.
   * @throws {Error} When the token is missing in the options.
   */
createOAuthHeader() {
const token = this.options.get('token');
⋮----
throw new Error('OAuth is enabled, but token is missing.');
⋮----
/**
   * Creates the Basic Authentication authorization header.
   * @returns {string} The Basic Authentication header.
   * @throws {Error} When username or password/token is missing in the options.
   */
createBasicAuthHeader() {
const username = this.options.get('username');
const passwordOrToken = this.getPasswordOrToken();
⋮----
throw new Error('Missing credentials for Basic Authentication.');
⋮----
const encoded = this.encodeCredentials(`${username}${passwordOrToken}`);
⋮----
/**
   * Retrieves the password or token for Basic Authentication.
   * The method first checks for a password and if none is found, it fetches the token.
   * @returns {string} The password or token prefixed with the appropriate separator.
   */
getPasswordOrToken() {
const password = this.options.get('password');
⋮----
return `/token:${this.options.get('token')}`;
⋮----
/**
   * Encodes the provided credentials using base64 encoding.
   * @param {string} credentials - The credentials to be encoded.
   * @returns {string} The base64 encoded string of the provided credentials.
   */
encodeCredentials(credentials) {
return require('node:buffer').Buffer.from(credentials).toString('base64');
</file>

<file path="src/clients/client.js">
// Client.js - main client file that does most of the processing
⋮----
/**
 * @typedef {import('../index').ZendeskClientOptions} ZendeskClientOptions
 */
⋮----
/**
 * @typedef {ZendeskClientOptions} ClientOptions
 *
 * This type extends `ZendeskClientOptions` to be used for configuring the Client instance.
 * All properties of `ZendeskClientOptions` are available here.
 */
⋮----
/**
 * Represents a client to interact with the Zendesk API, providing functionalities to make various types of requests.
 * This client handles request construction, response processing, event emission, and more.
 * @class
 * @property {ClientOptions} options - Configuration options for the client.
 * @property {Array} sideLoad - Array to handle side-loaded resources.
 * @property {Array} jsonAPINames - Array to hold names used in the JSON API.
 * @property {boolean} useDotJson - Flag to indicate if the API endpoint should use '.json' ending.
 * @property {ApiTypes} apiType - Type of Zendesk API to initialize (e.g., 'core', 'helpcenter').
 * @property {CustomEventTarget} eventTarget - Event target to handle custom events.
 * @property {Transporter} transporter - Transporter for making requests.
 */
class Client {
/**
   * @param {ClientOptions} options - Configuration options for the client.
   * @param {ApiTypes} apiType - Type of Zendesk API to initialize (e.g., 'core', 'helpcenter').
   */
⋮----
this.options = this._buildOptions(options, apiType);
⋮----
this.eventTarget = new CustomEventTarget();
⋮----
// We only create the transporter one demand
get transporter() {
⋮----
this._transporter = new Transporter(
⋮----
// Listen to transporter's debug events and re-emit them on the Client
this._transporter.on('debug::request', (eventData) => {
this.emit('debug::request', eventData.detail);
⋮----
this._transporter.on('debug::response', (eventData) => {
this.emit('debug::response', eventData.detail);
⋮----
this._transporter.on('debug::result', (eventData) => {
this.emit('debug::result', eventData.detail);
⋮----
emit(eventType, eventData) {
⋮----
this.eventTarget.dispatchEvent(event);
⋮----
on(eventType, callback) {
this.eventTarget.addEventListener(eventType, callback);
⋮----
/**
   * Helper method to build client options.
   * @param {ClientOptions} options - Client configuration options.
   * @param {ApiTypes} apiType - Type of Zendesk API.
   * @returns {ClientOptions & {get: (key: string) => any}} - Built client options.
   * @private
   */
_buildOptions(options, apiType = ApiTypes.core) {
⋮----
options.endpointUri ?? this._getEndpointUri(options.subdomain, apiType);
⋮----
get: (key) => data[key],
⋮----
/**
   * Helper method to get the endpoint URI.
   * @param {string} subdomain - The subdomain for the Zendesk instance.
   * @param {ApiTypes} apiType - Type of Zendesk API.
   * @returns {string} - The endpoint URI.
   * @private
   */
_getEndpointUri(subdomain, apiType) {
⋮----
setSideLoad(array) {
⋮----
this.transporter.setSideLoad(array);
⋮----
// Client methods
⋮----
async get(resource) {
return this.request('GET', resource);
⋮----
/**
   * Patches a resource.
   * @param {...any} arguments_ - The resources or parts of the resource path followed by the body.
   * @returns {Promise<void|object>} - Either void or response object
   */
async patch(...arguments_) {
const body = arguments_.pop();
const resource = Array.isArray(arguments_[0]) ? arguments_[0] : arguments_;
⋮----
return this.request('PATCH', resource, body);
⋮----
async put(resource, body) {
return this.request('PUT', resource, body);
⋮----
async post(resource, body) {
return this.request('POST', resource, body);
⋮----
/**
   * Deletes a resource.
   * @param {...any} arguments_ - The resources or parts of the resource path.
   * @returns {Promise<void|object>} - Either void or response object
   */
async delete(...arguments_) {
// Check if the first argument is an array
⋮----
return this.request('DELETE', resource);
⋮----
async getAll(resource) {
return this.requestAll('GET', resource);
⋮----
async _rawRequest(method, uri, ...arguments_) {
⋮----
typeof arguments_.at(-1) === 'object' &&
!Array.isArray(arguments_.at(-1)) &&
arguments_.pop();
⋮----
return this.transporter.request(method, uri, body);
⋮----
/**
   * @template T
   * @type {object} ApiResponse<T>
   * @property {object} response - Response object from the request.
   * @property {T} result - Result object from the request.
   */
⋮----
/**
   * Request method that handles various HTTP methods.
   * @template T
   * @param {string} method - HTTP method (e.g., 'GET', 'POST').
   * @param {string} uri - The URI for the request.
   * @param {...any} arguments_ - Additional arguments for the request.
   * @returns {Promise<module:client.ApiResponse<T>>} - The API response.
   */
async request(method, uri, ...arguments_) {
⋮----
const {response, result} = await this._rawRequest(
⋮----
const responseBody = processResponseBody(
checkRequestResponse(response, result),
⋮----
// Constructing a detailed error message with conditional inclusion of title and message
⋮----
throw new Error(detailedErrorMessage);
⋮----
// Request method for fetching multiple pages of results
async requestAll(method, uri, ...arguments_) {
⋮----
const throttle = this.options.get('throttle');
let __request = this._rawRequest; // Use _rawRequest directly
⋮----
__request = throttler(this, this._rawRequest, throttle);
⋮----
const processPage = ({result, response}) => {
const currentPage = checkRequestResponse(response, result);
const hasCursorPagination = (page) =>
⋮----
const hasOffsetPagination = (page) => page && page.next_page;
const getNextPage = (page) =>
hasCursorPagination(page)
⋮----
: hasOffsetPagination(page)
⋮----
const item = processResponseBody(currentPage, this);
⋮----
bodyList.push(item);
⋮----
return getNextPage(currentPage);
⋮----
const fetchPagesRecursively = async (pageUri) => {
const isIncremental = pageUri.includes('incremental');
const responseData = await __request.call(
⋮----
const nextPage = processPage(responseData);
⋮----
return fetchPagesRecursively(nextPage);
⋮----
await fetchPagesRecursively(uri);
return flatten(bodyList);
⋮----
// Request method for uploading files
async requestUpload(uri, file) {
const {response, result} = await this.transporter.upload(uri, file);
return checkRequestResponse(response, result);
</file>

<file path="src/clients/custom-event-target.js">
class CustomEventTarget {
⋮----
this.listeners = new Map();
⋮----
addEventListener(type, callback) {
if (!this.listeners.has(type)) {
this.listeners.set(type, []);
⋮----
this.listeners.get(type).push(callback);
⋮----
removeEventListener(type, callback) {
if (this.listeners.has(type)) {
const callbacks = this.listeners.get(type);
const index = callbacks.indexOf(callback);
⋮----
callbacks.splice(index, 1);
⋮----
dispatchEvent(event) {
if (this.listeners.has(event.type)) {
const callbacks = this.listeners.get(event.type);
⋮----
callback(event);
</file>

<file path="src/clients/endpoint-checker.js">
/**
 * A class responsible for checking if given endpoints support cursor pagination.
 *
 * This class provides utility methods to check if certain endpoints
 * are supported based on regex patterns. It prepares and utilizes a
 * set of regex patterns derived from a static list of endpoint strings.
 */
class EndpointChecker {
/**
   * Creates a new instance of the EndpointChecker.
   */
⋮----
/**
     * @type {Set<string>}
     * A set containing the supported endpoints.
     * @private
     * @see {@link https://support.zendesk.com/hc/en-us/articles/5591904358938-New-limits-for-offset-based-pagination }
     */
this.SUPPORTED_ENDPOINTS = new Set([
⋮----
/**
     * @type {Set<RegExp>}
     * A set containing the regex patterns derived from the supported endpoints.
     * @private
     */
this.SUPPORTED_REGEXES = new Set();
⋮----
this._initSupportedRegexes();
⋮----
/**
   * Initializes the SUPPORTED_REGEXES set by converting each endpoint
   * in SUPPORTED_ENDPOINTS into its corresponding regex pattern.
   * @private
   */
_initSupportedRegexes() {
⋮----
const regex = new RegExp(
`^${pattern.replaceAll('/', '\\/').replaceAll(/{.+}/g, '.+')}$`,
⋮----
this.SUPPORTED_REGEXES.add(regex);
⋮----
/**
   * Checks if the given endpoint supports cursor pagination.
   * @param {string} endpoint - The endpoint string to be checked.
   * @returns {boolean} - Returns true if the endpoint supports cursor pagination, otherwise false.
   */
supportsCursorPagination(endpoint) {
⋮----
if (regex.test(endpoint)) {
</file>

<file path="src/clients/helpers.js">
422: 'Unprocessable Entity', // Zendesk sends this one back when you re-use an organization name
⋮----
/**
 * Flattens a nested array to a single-level array.
 * @param {Array} array - The array to be flattened.
 * @returns {Array} - A new array containing all elements from the input array,
 *                   with any nested arrays recursively flattened to a single level.
 */
function flatten(array) {
// eslint-disable-next-line unicorn/no-array-reduce
return array.reduce(
⋮----
// eslint-disable-next-line unicorn/prefer-spread
accumulator.concat(Array.isArray(element) ? flatten(element) : element),
⋮----
/**
 * Populates specified fields in the given data records using response data based on a mapping.
 * @param {object | Array} data - The data record(s) to be populated.
 * @param {object} response - The response data containing datasets.
 * @param {Array} map - An array of mapping objects specifying how to populate fields.
 * @returns {object | Array} - The data record(s) with populated fields.
 */
function populateFields(data, response, map) {
const datasetCache = new Map();
⋮----
const findAllRecordsById = (data, key, id) =>
data.filter((datum) => datum[key] === id);
⋮----
const findOneRecordById = (data, key, id) =>
data.find((datum) => datum[key] === id) || null;
⋮----
const populateRecord = (record) => {
⋮----
if (Object.hasOwn(record, field)) {
const responseDataset = datasetCache.get(dataset) || response[dataset];
datasetCache.set(dataset, responseDataset);
⋮----
? findAllRecordsById(responseDataset, key, record[field])
: findOneRecordById(responseDataset, key, record[field]);
⋮----
if (Array.isArray(data)) {
for (const record of data) populateRecord(record);
⋮----
populateRecord(data);
⋮----
/**
 * Constructs a URL based on the provided `method`, `uri`, and pre-defined settings within the context.
 *
 * The function prioritizes query parameters from `self.options.get('query')` over other sources.
 * If `uri` is an array, the last element can be an object representing query parameters or a query string.
 * If the `uri` is a string, it's treated as the URL's endpoint path.
 *
 * The function also utilizes `self.sideLoad` to include side-loaded resources if available.
 * Any conflict in query parameters is resolved with `query` taking the highest priority, followed by `sideLoad`, and then the provided `uri`.
 * @param {object} self - The context containing options and side-loading settings.
 * @param {string} method - The HTTP method. Can be "GET", "PATCH", "POST", "PUT", or "DELETE".
 * @param {Array<string | object>} [uri] - An array representing the URL segments. The last element can be an object of query parameters or a query string.
 *   @property {Map} options - A map-like object with settings. Specifically used to retrieve 'endpointUri' and 'query'.
 *   @property {Array<string>} [sideLoad] - An array of resources to side-load. It gets converted into a query parameter format.
 * @returns {string} The assembled URL.
 * @throws Will throw an error if `self.options` does not implement the 'get' method.
 * @example
 * const context = {
 *   options: new Map([['endpointUri', 'http://api.example.com'], ['query', { page: { size: 100 } }]]),
 *   sideLoad: ['comments', 'likes']
 * };
 * assembleUrl(context, 'GET', ['users', 'list', '?foo=bar']);
 * // Expected: "http://api.example.com/users/list.json?foo=bar&include=comments,likes&page[size]=100"
 */
function assembleUrl(self, method, uri) {
// Helper functions
const isObject = (value) =>
typeof value === 'object' && !Array.isArray(value);
⋮----
const mergeQueryParameters = (baseParameters, ...additionalParameters) => {
const merged = new URLSearchParams(baseParameters);
⋮----
const temporary = new URLSearchParams(parameters);
for (const [key, value] of temporary.entries()) {
merged.set(key, value); // Overwrite if key exists
⋮----
return merged.toString();
⋮----
// Base information
const endpointUri = self.options.get('endpointUri');
⋮----
self.sideLoad?.length > 0 ? `include=${self.sideLoad.join(',')}` : '';
const defaultQueryParameters = serialize(self.options.get('query') || {});
⋮----
// Process uri
⋮----
if (Array.isArray(uri)) {
const lastElement = uri.pop();
⋮----
if (isObject(lastElement)) {
queryString = serialize(lastElement);
} else if (typeof lastElement === 'string' && lastElement.startsWith('?')) {
queryString = lastElement.slice(1);
⋮----
uri.push(lastElement); // Check for undefined and empty strings
⋮----
if (uri.includes(endpointUri)) {
return uri; // Return the uri unchanged if it already contains endpointUri
⋮----
self.endpointChecker.supportsCursorPagination(segments.join('/'))
⋮----
paginationParameters = serialize({page: {size: 100}});
⋮----
queryString = mergeQueryParameters(
⋮----
// Construct the URL
const path = segments.filter(Boolean).join('/');
const extension = self.useDotJson === false ? '' : '.json'; // Undefined is true (default)
⋮----
/**
 * Serializes a JavaScript object into a query string format.
 *
 * Supports nested objects and arrays:
 * - For non-object values, it encodes them with the provided prefix.
 * - For array values, it encodes them as comma-separated lists without indexing.
 * - For objects, it recursively encodes each nested key-value pair using a bracket notation.
 * @param {object | string | number} object - The object to serialize.
 * @param {string} [prefix=''] - The prefix for the current serialization level. Useful for handling nested objects.
 * @returns {string} The serialized query string.
 * @example
 * serialize({ a: 1 })                // "a=1"
 * serialize({ a: { b: 2 } })        // "a[b]=2"
 * serialize({ ids: [1,2,3,4] })     // "ids=1,2,3,4"
 * serialize('test', 'key')          // "key=test"
 */
const serialize = (object, prefix = '') => {
// Base condition: non-object values
⋮----
return `${encodeURIComponent(prefix)}=${encodeURIComponent(object)}`;
⋮----
// Handle arrays differently: join with commas
if (Array.isArray(object)) {
return `${encodeURIComponent(prefix)}=${encodeURIComponent(
object.join(','),
⋮----
// Recursive serialization for object values
return Object.entries(object)
.map(([key, value]) => {
// Construct the nested key structure
⋮----
return serialize(value, nestedKey);
⋮----
.join('&');
⋮----
/**
 * Creates an error object with the given message, status code, and result.
 * @param {string} message - The error message.
 * @param {number} statusCode - The HTTP status code.
 * @param {object} [result=null] - Additional error data.
 * @returns {Error} - The constructed error object.
 */
function createError(message, statusCode, result = null) {
const error = new Error(message);
⋮----
/**
 * Checks the response and result from a request and returns an error or the result.
 * @param {object} response - The HTTP response object.
 * @param {object} result - The result data from the request.
 * @returns {object} - The result or an error object.
 */
function checkRequestResponse(response, result) {
⋮----
return createError('Zendesk returned an empty result', 204);
⋮----
// The following occurs on delete requests
⋮----
return createError('No Content', response.status);
⋮----
const retryAfter = response.headers.get('retry-after');
⋮----
return createError(
⋮----
throw createError(
⋮----
/**
 * Finds the body of the response based on the result and context.
 * @param {object} result_ - The result data.
 * @param {object} self - The context containing additional settings.
 * @returns {string} - The body of the response.
 */
function findBody(result_, self) {
⋮----
const apiName = self.jsonAPINames.find((api) =>
Object.hasOwn(result_, api),
⋮----
/**
 * Processes the body of the response based on the result and context.
 * @param {object} result_ - The result data.
 * @param {object} self - The context containing additional settings.
 * @returns {object} - The processed body of the response.
 */
function processResponseBody(result_, self) {
let body = findBody(result_, self);
⋮----
body = populateFields(body, result_, self.sideLoadMap);
⋮----
/**
 * Generates a user agent string based on the package version and node version.
 * @returns {string} - The generated user agent string.
 */
function generateUserAgent() {
</file>

<file path="src/clients/job-monitor.js">
const TERMINAL_STATUSES = new Set(['completed', 'failed', 'killed']);
⋮----
class JobMonitor {
⋮----
this.client = require('../index').createClient(options);
⋮----
/**
   * Checks the status of a job.
   * @param {string} jobID - The ID of the job to monitor.
   * @returns {Promise<object>} - Promise resolving to the job status.
   */
async checkJobStatus(jobID) {
const {result} = await this.client.jobstatuses.show(jobID);
⋮----
/**
   * Continuously checks the status of a job using intervals and invokes a callback when the job status changes.
   * @param {string} jobID - The ID of the job to monitor.
   * @param {number} [interval=500] - The interval in milliseconds at which to check the job status.
   * @param {number} [maxAttempts=5] - The maximum number of attempts to check the job status.
   * @returns {Promise<object>} - Promise resolving to the job result.
   */
async monitorJobStatus(jobID, interval = 500, maxAttempts = 5) {
⋮----
return new Promise((resolve, reject) => {
const nIntervId = setInterval(async () => {
⋮----
const jobStatus = await this.checkJobStatus(jobID);
⋮----
if (TERMINAL_STATUSES.has(jobStatus.status)) {
clearInterval(nIntervId);
// This.client.emit('debug::result', `Job ${jobID} completed!`);
resolve(jobStatus);
⋮----
// This.client.emit(
//   'debug::result',
//   `[${jobStatus.message || 'pending'}] Job progress: ${
//     jobStatus.progress || 0
//   } out of ${jobStatus.total}`,
// );
⋮----
//   `Waiting for job to become available(attempt: ${attempts})...`,
⋮----
reject(error);
</file>

<file path="src/clients/throttle.js">
/**
 * Creates a throttled function that limits the rate of execution of the provided function.
 * The throttled function ensures that the wrapped function is not invoked more frequently
 * than a specified time interval.
 * @param {...any} arguments_ - The arguments for the throttled function. This can include:
 *     - `fn` (Function): The function to be throttled.
 *     - `options` (object, optional): Throttling options.
 *         - `options.interval` (number|string, optional): The time interval in milliseconds between function calls.
 *         - `options.window` (number, default=1): The sliding window duration in which 'limit' number of calls are allowed.
 *         - `options.limit` (number, default=1): The maximum number of function calls allowed in the specified window.
 *     - `additionalArgs` (...any): Additional arguments to be passed to the throttled function.
 * @returns {Function} - A throttled function that queues and limits the execution of the original function.
 * @example
 * const throttledLog = throttle(console.log, 1000); // Throttle to at most 1 call per second
 * throttledLog('Message 1'); // Logs 'Message 1'
 * throttledLog('Message 2'); // Queues 'Message 2' to be logged after the throttle interval
 * @example
 * const throttledFetch = throttle(fetch, { window: 5, limit: 2 }); // Throttle to at most 2 calls in every 5 seconds
 * throttledFetch('https://api.example.com/data1'); // Fetches data1
 * throttledFetch('https://api.example.com/data2'); // Fetches data2
 * throttledFetch('https://api.example.com/data3'); // Queues data3 to be fetched after the throttle interval
 *
 * Credit: Original inspiration from https://github.com/brianloveswords/throttle-function "Brian J Brennan" <brianloveswords@gmail.com>
 */
function throttle(...arguments_) {
⋮----
const msBetweenCalls = getMsBetweenCalls(options);
⋮----
/**
   * Determines the milliseconds between calls based on the provided options.
   * @param {object|number|string} options - Throttling options or interval.
   * @returns {number} - Milliseconds between calls.
   */
function getMsBetweenCalls(options) {
⋮----
if (typeof options === 'string') return Number(options);
return Math.ceil(((options.window || 1) / (options.limit || 1)) * 1000);
⋮----
/**
  Executes the next function in the queue.
   * @returns {Function|null} - The executed function or null if the queue is empty.
   */
function runQueue() {
if (queue.length === 0) clearInterval(timer);
return queue.shift() ? function_.apply(thisArgument, queue.shift()) : null;
⋮----
queue.push(arguments_);
timer ||= setInterval(runQueue, msBetweenCalls);
⋮----
queuedAt: Date.now(),
</file>

<file path="src/clients/transporter.js">
// Default transport config using fetch
⋮----
transportFn(uri, options) {
return fetch(uri, options);
⋮----
responseAdapter(response) {
⋮----
json: () => response.json(),
⋮----
get: (headerName) => response.headers.get(headerName),
⋮----
class Transporter {
⋮----
this.authHandler = new AuthorizationHandler(this.options);
this.eventTarget = new CustomEventTarget();
this.endpointChecker = new EndpointChecker();
⋮----
this.userAgent = this.options.get('userAgent') ?? generateUserAgent();
⋮----
// Transporter methods
emit(eventType, eventData) {
⋮----
this.eventTarget.dispatchEvent(event);
⋮----
on(eventType, callback) {
this.eventTarget.addEventListener(eventType, callback);
⋮----
async request(method, uri, body = null) {
const options = this.prepareOptionsForRequest(method, uri, body);
return this.sendRequest(options);
⋮----
async upload(uri, file) {
⋮----
const headers = this.getHeadersForRequest();
⋮----
uri: assembleUrl(this, method, uri),
⋮----
body: isDirectUpload ? file : require('node:fs').createReadStream(file),
⋮----
obfuscateToken(options) {
⋮----
token: options.token.slice(0, 5) + '**********',
⋮----
async sendRequest(options) {
this.emit('debug::request', this.obfuscateToken(options)); // Emit before the request
⋮----
const rawResponse = await this.transportFn(options.uri, options);
const response = this.responseAdapter(rawResponse);
⋮----
this.emit('debug::response', response); // Emit after the request
⋮----
response.headers.get('content-type')?.includes('application/json')
⋮----
result = await response.json();
⋮----
this.emit('debug::result', result);
⋮----
prepareOptionsForRequest(method = 'GET', uri, body, isBinary = false) {
const url = assembleUrl(this, method, uri);
const bodyContent = isBinary ? body : this.getBodyForRequest(method, body);
⋮----
getHeadersForRequest() {
⋮----
Authorization: this.authHandler.createAuthorizationHeader(),
⋮----
...this.options.get('customHeaders'),
⋮----
const asUser = this.options.get('asUser');
⋮----
getBodyForRequest(method, body) {
⋮----
return body ? this.getJSONBody(body) : undefined;
⋮----
getJSONBody(body) {
⋮----
return JSON.stringify(body);
⋮----
throw new Error(`Failed to stringify the request body: ${error.message}`);
⋮----
setSideLoad(array) {
</file>

<file path="src/constants.js">
/**
 * @readonly
 * @enum {string}
 */
⋮----
/**
 * @type {Record<ApiTypes, string>}
 * @readonly
 */
</file>

<file path="src/index.js">
// Index.js - node-zendesk client initialization
⋮----
/**
 * @typedef {object} ZendeskClientOptions
 * @property {string} [token] - Authentication token.
 * @property {string} [password] - Authentication password.
 * @property {string} [username] - Username for authentication.
 * @property {string} [subdomain] - Subdomain for the Zendesk account (e.g., 'mycompany' for 'mycompany.zendesk.com'). If `endpointUri` is provided, this is ignored.
 * @property {string[]} [apiType=['core']] - Type of Zendesk API (e.g., 'core', 'helpcenter'). Determines the sub-client to use.
 * @property {string} [endpointUri] - Base URI for the Zendesk API. Overrides `subdomain` if provided.
 * @property {Function} [get] - Function to retrieve specific options. Defaults to accessing properties from the options.
 * @property {boolean} [oauth] - Indicates if OAuth is used (this is the original OAuth flag).
 * @property {boolean} [useOAuth] - Indicates if OAuth is used.
 * @property {string} [asUser] - Optional header for requests on behalf of a user.
 * @property {object} [customHeaders] - Additional custom headers for the request.
 * @property {boolean} [throttle] - Enables request throttling.
 * @property {boolean} [throwOriginalException] - Throw the original exception when API requests fail.
 * @property {boolean} [debug=false] - Enables or disables debug logging.
 * @property {object} [logger=ConsoleLogger] - Logger for logging. Defaults to a basic console logger.
 * @property {object} [transportConfig] - Configuration for custom transport.
 * @property {Function} [transportConfig.transportFn] - Custom request function. Defaults to `fetch`.
 * @property {Function} [transportConfig.responseAdapter] - Adapts the response from `transportFn`. Defaults to adapting for `fetch`.
 */
⋮----
/**
 * Represents the main client to interface with the Zendesk API.
 * This class acts as a high-level interface, making it easier to interact with specific Zendesk APIs.
 * @class ZendeskClient
 * @property {ZendeskClientOptions} config - Configuration options for the client.
 * @property {ConsoleLogger} logger - Logger for logging.
 * @example
 * const zendeskOptions = {
 *     username: 'exampleUser',
 *     token: 'exampleToken',
 *     subdomain: 'mycompany'
 * };
 * const zendeskClient = createClient(zendeskOptions);
 * const data = await zendeskClient.someResource.someMethod();
 */
class ZendeskClient {
/**
   * @param {ZendeskClientOptions} options - Configuration options for the client.
   */
⋮----
this.logger = options.logger ?? new ConsoleLogger();
this.helpcenter = new ZendeskClientHelpcenter(this);
this.services = new ZendeskClientServices(this);
this.voice = new ZendeskClientVoice(this);
⋮----
/**
   * @template {T} [T=import('./client/client.js').Client]
   * @param {new(options: ZendeskClientOptions) => T} ServiceClass - The service class to instantiate.
   * @returns {T} An instance of the service class.
   * @private
   */
_instantiate(ServiceClass) {
/**
     * @private
     */
⋮----
// If the instance already exists, return it
⋮----
const client = new ServiceClass(this.config);
client.on('debug::request', this._debug.bind(this));
client.on('debug::response', this._debug.bind(this));
client.on('debug::result', this._debug.bind(this));
⋮----
get accountsettings() {
⋮----
return this._instantiate(AccountSettings);
⋮----
get activitystream() {
⋮----
return this._instantiate(ActivityStream);
⋮----
get attachments() {
⋮----
return this._instantiate(Attachments);
⋮----
get automations() {
⋮----
return this._instantiate(Automations);
⋮----
get brand() {
⋮----
return this._instantiate(Brand);
⋮----
get customagentroles() {
⋮----
return this._instantiate(CustomAgentRoles);
⋮----
get dynamiccontent() {
⋮----
return this._instantiate(DynamicContent);
⋮----
get dynamiccontentvariants() {
⋮----
return this._instantiate(DynamicContentVariants);
⋮----
get groupmemberships() {
⋮----
return this._instantiate(GroupMemberships);
⋮----
/**
   * @returns {import('./clients/core/groups.js').Groups} The Group client.
   */
get groups() {
⋮----
return this._instantiate(Groups);
⋮----
get imports() {
⋮----
return this._instantiate(Imports);
⋮----
get installations() {
⋮----
return this._instantiate(Installations);
⋮----
get jobstatuses() {
⋮----
return this._instantiate(JobStatuses);
⋮----
get locales() {
⋮----
return this._instantiate(Locales);
⋮----
get macros() {
⋮----
return this._instantiate(Macros);
⋮----
get oauthclients() {
⋮----
return this._instantiate(OAuthClients);
⋮----
get oauthtokens() {
⋮----
return this._instantiate(OAuthTokens);
⋮----
get organizationfields() {
⋮----
return this._instantiate(OrganizationFields);
⋮----
get organizationmemberships() {
⋮----
return this._instantiate(OrganizationMemberships);
⋮----
get organizations() {
⋮----
return this._instantiate(Organizations);
⋮----
get permissiongroups() {
⋮----
return this._instantiate(PermissionGroups);
⋮----
get policies() {
⋮----
return this._instantiate(Policies);
⋮----
get requests() {
⋮----
return this._instantiate(Requests);
⋮----
get satisfactionratings() {
⋮----
return this._instantiate(SatisfactionRatings);
⋮----
get search() {
⋮----
return this._instantiate(Search);
⋮----
get sessions() {
⋮----
return this._instantiate(Sessions);
⋮----
get sharingagreement() {
⋮----
return this._instantiate(SharingAgreement);
⋮----
/**
   * @returns {import('./clients/core/sideconversations.js').SideConversations} The SideConversations client.
   */
get sideconversations() {
⋮----
return this._instantiate(SideConversations);
⋮----
get suspendedtickets() {
⋮----
return this._instantiate(SuspendedTickets);
⋮----
get tags() {
⋮----
return this._instantiate(Tags);
⋮----
get targets() {
⋮----
return this._instantiate(Targets);
⋮----
get ticketaudits() {
⋮----
return this._instantiate(TicketAudits);
⋮----
get ticketevents() {
⋮----
return this._instantiate(TicketEvents);
⋮----
get ticketexport() {
⋮----
return this._instantiate(TicketExport);
⋮----
get ticketfields() {
⋮----
return this._instantiate(TicketFields);
⋮----
get ticketforms() {
⋮----
return this._instantiate(TicketForms);
⋮----
get ticketimport() {
⋮----
return this._instantiate(TicketImport);
⋮----
/**
   * @returns {import('./clients/core/ticketmetrics.js').TicketMetrics} The TicketMetrics client
   */
get ticketmetrics() {
⋮----
return this._instantiate(TicketMetrics);
⋮----
/**
   * @returns {import('./clients/core/tickets.js').Tickets} The Tickets client.
   */
get tickets() {
⋮----
return this._instantiate(Tickets);
⋮----
get triggers() {
⋮----
return this._instantiate(Triggers);
⋮----
get userfields() {
⋮----
return this._instantiate(UserFields);
⋮----
get useridentities() {
⋮----
return this._instantiate(UserIdentities);
⋮----
/**
   * @returns {import('./clients/core/users.js').Users} The Users Instance
   */
get users() {
⋮----
return this._instantiate(Users);
⋮----
get views() {
⋮----
return this._instantiate(Views);
⋮----
get webhooks() {
⋮----
return this._instantiate(Webhooks);
⋮----
get agentactivity() {
⋮----
return this._instantiate(AgentActivity);
⋮----
get availabilities() {
⋮----
return this._instantiate(Availabilities);
⋮----
/**
   * @param {object} arguments_ - Arguments for debugging.
   * @private
   */
_debug(arguments_) {
⋮----
arguments_.result = String(arguments_.result);
⋮----
this.logger.debug(arguments_);
⋮----
/**
 * Creates and returns an instance of the ZendeskClient class.
 * @param {ZendeskClientOptions} options - Configuration options for the Zendesk client.
 * @returns {ZendeskClient} An instance of the ZendeskClient class.
 */
function createClient(options) {
return new ZendeskClient(options);
</file>

<file path="src/logger.js">
class LoggerInterface {
fatal(message) {
console.error(message);
⋮----
error(message) {
⋮----
warn(message) {
console.warn(message);
⋮----
info(message) {
console.info(message);
⋮----
debug(message) {
console.log(message);
⋮----
trace(message) {
console.trace(message);
⋮----
class ConsoleLogger extends LoggerInterface {}
</file>

<file path="test/fixtures/authentication_test_correct_oauthtoken.json">
[
  {
    "scope": "https://nodejsapi.zendesk.com:443",
    "method": "GET",
    "path": "/api/v2/users/me.json",
    "body": "",
    "status": 200,
    "response": {
      "user": {
        "name": "TEST USER"
      }
    },
    "responseIsBinary": false
  }
]
</file>

<file path="test/fixtures/authentication_test_correct_u_token.json">
[
  {
    "scope": "https://nodejsapi.zendesk.com:443",
    "method": "GET",
    "path": "/api/v2/users/me.json",
    "body": "",
    "status": 200,
    "response": {
      "user": {
        "name": "TEST USER"
      }
    },
    "responseIsBinary": false
  }
]
</file>

<file path="test/fixtures/authentication_test_endpoint_uri.json">
[
    {
        "scope": "https://nodejsapi.zendesk.com:443",
        "method": "GET",
        "path": "/api/v2/users/me.json",
        "body": "",
        "status": 200,
        "response": {
            "user": {
              "name": "TEST USER"
            }
          },
        "responseIsBinary": false
    }
]
</file>

<file path="test/fixtures/authentication_test_incorrect_sans_token.json">
[]
</file>

<file path="test/fixtures/authentication_test_incorrect_subdomain.json">
[
  {
    "scope": "https://invalidSubdomain.zendesk.com:443",
    "method": "GET",
    "path": "/api/v2/users/me.json",
    "body": "",
    "status": 404,
    "response": {
    },
    "responseIsBinary": false
  }
]
</file>

<file path="test/fixtures/authentication_test_incorrect_token.json">
[
  {
    "scope": "https://nodejsapi.zendesk.com:443",
    "method": "GET",
    "path": "/api/v2/users/me.json",
    "body": "",
    "status": 200,
    "response": {
      "user": {
        "name": "Anonymous user"
      }
    },
    "responseIsBinary": false
  }
]
</file>

<file path="test/fixtures/authentication_test_incorrect_u_p.json">
[
  {
    "scope": "https://nodejsapi.zendesk.com:443",
    "method": "GET",
    "path": "/api/v2/users/me.json",
    "body": "",
    "status": 200,
    "response": {
      "user": {
        "name": "Anonymous user"
      }
    },
    "responseIsBinary": false
  }
]
</file>

<file path="test/fixtures/authentication_test_no_creds.json">
[
  {
    "scope": "https://nodejsapi.zendesk.com:443",
    "method": "GET",
    "path": "/api/v2/users/me.json",
    "body": "",
    "status": 200,
    "response": {
      "user": {
        "name": "Anonymous user"
      }
    },
    "responseIsBinary": false
  }
]
</file>

<file path="test/fixtures/authentication_test_user_pass.json">
[
  {
    "scope": "https://nodejsapi.zendesk.com:443",
    "method": "GET",
    "path": "/api/v2/users/me.json",
    "body": "",
    "status": 200,
    "response": {
      "user": {
        "name": "TEST USER"
      }
    },
    "responseIsBinary": false
  }
]
</file>

<file path="test/fixtures/organizations_many_test_bulk_delete.json">
[
    {
        "scope": "https://nodejsapi.zendesk.com:443",
        "method": "DELETE",
        "path": "/api/v2/organizations/destroy_many.json?ids=19856122753300%2C19856122753684%2C19854650737556%2C19856122754452%2C19856122754324%2C19856122754068%2C19856122753556%2C19856122753428%2C19856122753172%2C19856122753940%2C19854650737684%2C19856122753812%2C19856122753044%2C19856122754196%2C19856122755092%2C19856122755732%2C19856122754836%2C19856122755988%2C19856122754964%2C19856122755604%2C19856122755476%2C19856122756244%2C19856122756372%2C19856122756500%2C19856122756116%2C19856122754580%2C19856122755348%2C19856122755860%2C19856122755220%2C19856122754708",
        "body": "",
        "status": 200,
        "response": [
            "1f8b08000000000000038d8ec10e82301044ff65cf488b4d01f910af664b3708961669eb41c2bfbb0789578f937999371b4cc1dc62c29423741b8c163ab8aa1319d568d5b7b2d186645fd5dad495692fa825a1448402f2ea98bda7b4c44e081f2c4d1197b17c93b7141f651f66c159bccee2e7a028fe582fa7183c2b5248c812250b58d630ac14f9a4cfce15705c8667a64c96e1995b1ce80018ce2e7df97dff0032358184e9000000"
        ],
        "rawHeaders": [
            "Date",
            "Sun, 08 Oct 2023 17:58:51 GMT",
            "Content-Type",
            "application/json; charset=utf-8",
            "Transfer-Encoding",
            "chunked",
            "Connection",
            "close",
            "x-zendesk-api-version",
            "v2",
            "x-zendesk-application-version",
            "v18586",
            "x-frame-options",
            "SAMEORIGIN",
            "x-rate-limit",
            "700",
            "rate-limit",
            "700",
            "x-rate-limit-remaining",
            "687",
            "rate-limit-remaining",
            "687",
            "rate-limit-reset",
            "9",
            "strict-transport-security",
            "max-age=31536000; includeSubDomains",
            "etag",
            "W/\"ac57096c377203e15267f36e2dc450eb\"",
            "cache-control",
            "max-age=0, private, must-revalidate",
            "set-cookie",
            "_zendesk_cookie=BAhJIhl7ImRldmljZV90b2tlbnMiOnt9fQY6BkVU--0bf2100788cb010d0183feca16aaf88ccaf719ca; path=/; expires=Tue, 08 Oct 2024 16:42:17 GMT; secure; HttpOnly; SameSite=None",
            "x-zendesk-origin-server",
            "classic-app-server-5d6b8cb99d-7bvsw",
            "x-request-id",
            "8130463c0b3a08be-SEA",
            "X-Request-ID",
            "8130463c0b3a08be-SEA",
            "x-runtime",
            "0.090227",
            "X-Zendesk-Zorg",
            "yes",
            "Content-Encoding",
            "gzip",
            "CF-Cache-Status",
            "DYNAMIC",
            "Report-To",
            "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=FRwquDQlrJ7mPRx9sbh0R7cDDPlrR5r73JbiOD5di8awHvFDjFsOoQ6QTPQncQ%2FWIyco1JuLipx8L5E%2B%2F5ubmPwsY5JMg%2BW7bzU23QnR%2FcYRsFAM2XN%2B7nKzZ%2BGGaeRJtXFqTCHXPw%3D%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}",
            "NEL",
            "{\"success_fraction\":0.01,\"report_to\":\"cf-nel\",\"max_age\":604800}",
            "Set-Cookie",
            "__cfruid=1fd3eb7afa18f04776c1865e8fe0e55c7f463692-1696787931; path=/; domain=.nodejsapi.zendesk.com; HttpOnly; Secure; SameSite=None",
            "Server",
            "cloudflare",
            "CF-RAY",
            "8130463c0b3a08be-SEA"
        ],
        "responseIsBinary": false
    },
    {
        "scope": "https://nodejsapi.zendesk.com:443",
        "method": "GET",
        "path": "/api/v2/job_statuses/V3-eb3753c8075be0c165b61b89a50ea0aa.json",
        "body": "",
        "status": 200,
        "response": [
            "1f8b08000000000000038d8e3d0f82301086ff8a3957a4450228b3bb9babb9c2058ba525eda18986ffee2dc6d5f1de7bde8f378cc15c13232f09da37d81e5ab8943b32655395dd41379521dd157565eac21c8e5869428d08192cd1097b639e53ab940f3d8d09679bbfc8f794ee79172625b77aecd5af8392fa233d1f53f052c181514a4a9dc11cc31029c9c8a2c9e03b189e21dead1f849de48903897622472ce2e61c07f4f6856c83df6c8b462889581c8bd32fceadeb077a7c1b96ff000000"
        ],
        "rawHeaders": [
            "Date",
            "Sun, 08 Oct 2023 17:58:52 GMT",
            "Content-Type",
            "application/json; charset=utf-8",
            "Transfer-Encoding",
            "chunked",
            "Connection",
            "close",
            "x-zendesk-api-version",
            "v2",
            "x-zendesk-application-version",
            "v18586",
            "x-frame-options",
            "SAMEORIGIN",
            "x-rate-limit",
            "700",
            "rate-limit",
            "700",
            "x-rate-limit-remaining",
            "686",
            "rate-limit-remaining",
            "686",
            "rate-limit-reset",
            "8",
            "strict-transport-security",
            "max-age=31536000; includeSubDomains",
            "etag",
            "W/\"c8e8c4b8a2ee54681321af432cf3ed1d\"",
            "cache-control",
            "max-age=0, private, must-revalidate",
            "set-cookie",
            "_zendesk_cookie=BAhJIhl7ImRldmljZV90b2tlbnMiOnt9fQY6BkVU--0bf2100788cb010d0183feca16aaf88ccaf719ca; path=/; expires=Mon, 07 Oct 2024 16:03:48 GMT; secure; HttpOnly; SameSite=None",
            "x-zendesk-origin-server",
            "classic-app-server-5d6b8cb99d-vr6vg",
            "x-request-id",
            "813046440eddc5b4-SEA",
            "X-Request-ID",
            "813046440eddc5b4-SEA",
            "x-runtime",
            "0.070215",
            "X-Zendesk-Zorg",
            "yes",
            "Content-Encoding",
            "gzip",
            "CF-Cache-Status",
            "DYNAMIC",
            "Report-To",
            "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=bdN7gMWfcZGraheon9d1z7eri63LZQEFqRsREChZmAc6LRdGuivcpXU92KneJww%2BD94cl0AIFQbPutFTzWUrxtLAxxUq4a1Fd5V9fFDC4%2FXB6nEK00Nk3NLKGSQnY2GFyPuhvz8dUA%3D%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}",
            "NEL",
            "{\"success_fraction\":0.01,\"report_to\":\"cf-nel\",\"max_age\":604800}",
            "Set-Cookie",
            "__cfruid=8cff87d41bd2b51a23fda774546400eeb1281b3c-1696787932; path=/; domain=.nodejsapi.zendesk.com; HttpOnly; Secure; SameSite=None",
            "Server",
            "cloudflare",
            "CF-RAY",
            "813046440eddc5b4-SEA"
        ],
        "responseIsBinary": false
    },
    {
        "scope": "https://nodejsapi.zendesk.com:443",
        "method": "GET",
        "path": "/api/v2/job_statuses/V3-eb3753c8075be0c165b61b89a50ea0aa.json",
        "body": "",
        "status": 200,
        "response": [
            "1f8b0800000000000003ad96cf4ec3300cc65fa5ca956db5e3244d7a8567e082104adb0836b6b56a520e4c7b773cd0043776706ef9f7fb1ce78bdb93da8ddd4b2eb12c59b527b51d54ab1e699d3a6a2cf51e1adb25e8d1d9ce61e743b49022c4a8566a99f7bcf6ad9429b7757d1c87b4cb71da6e3ed37148f97dd38f879afbf587ae7f3552ae6fa06f76793cb244194b641182959ae6f1754e39fff4ae012b1699f6a9a481571f783abe261ebdbf8e56b1541a34ad11d6e02b6c5aeb5b4bd51d70e32d4c5cf685414f2715fbb265d5560de9b297672fc9c0e0ade366d180f37f941fd255372f7dff1d599997745efd4f42474e88441e644804c6c8900c692192764eea74d8682192b5427747ce4be5c98010092d0879dc6010ca93b1521ed796a45c108c544c688432ae1b2f559fb415ca930e28e402ad1ba99ad938a9d78252950e82d86b31527747460bf9893c4af909b4d417814088843e089d0efc4d7f18cfe7f31767b8c31fb7090000"
        ],
        "rawHeaders": [
            "Date",
            "Sun, 08 Oct 2023 17:58:53 GMT",
            "Content-Type",
            "application/json; charset=utf-8",
            "Transfer-Encoding",
            "chunked",
            "Connection",
            "close",
            "x-zendesk-api-version",
            "v2",
            "x-zendesk-application-version",
            "v18586",
            "x-frame-options",
            "SAMEORIGIN",
            "x-rate-limit",
            "700",
            "rate-limit",
            "700",
            "x-rate-limit-remaining",
            "685",
            "rate-limit-remaining",
            "685",
            "rate-limit-reset",
            "7",
            "strict-transport-security",
            "max-age=31536000; includeSubDomains",
            "etag",
            "W/\"13e8fc2d1530fcf2047b784c763a55d6\"",
            "cache-control",
            "max-age=0, private, must-revalidate",
            "set-cookie",
            "_zendesk_cookie=BAhJIhl7ImRldmljZV90b2tlbnMiOnt9fQY6BkVU--0bf2100788cb010d0183feca16aaf88ccaf719ca; path=/; expires=Tue, 08 Oct 2024 17:43:47 GMT; secure; HttpOnly; SameSite=None",
            "x-zendesk-origin-server",
            "classic-app-server-5d6b8cb99d-dzswq",
            "x-request-id",
            "8130464a6e546840-SEA",
            "X-Request-ID",
            "8130464a6e546840-SEA",
            "x-runtime",
            "0.064793",
            "X-Zendesk-Zorg",
            "yes",
            "Content-Encoding",
            "gzip",
            "CF-Cache-Status",
            "DYNAMIC",
            "Report-To",
            "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=n509yUlS7vDM45YggXZQcFQf7Uk9ZKPYknL7kVJcW0p6si6rMspnVCbLPQDyxSp5WoE3CXsqh3IF0GBJZJEJJp2dZASDrjZt3OvhqbLuiIJYuyjNHO09DwrS4HkhsU7OKKu3%2FQ8NAw%3D%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}",
            "NEL",
            "{\"success_fraction\":0.01,\"report_to\":\"cf-nel\",\"max_age\":604800}",
            "Set-Cookie",
            "__cfruid=23698dd34c7555dc0e3b2123ad2fab0d923a6c32-1696787933; path=/; domain=.nodejsapi.zendesk.com; HttpOnly; Secure; SameSite=None",
            "Server",
            "cloudflare",
            "CF-RAY",
            "8130464a6e546840-SEA"
        ],
        "responseIsBinary": false
    },
    {
        "scope": "https://nodejsapi.zendesk.com:443",
        "method": "GET",
        "path": "/api/v2/organizations/19856666514068.json",
        "body": "",
        "status": 404,
        "response": [
            "1f8b0800000000000003ab564a2d2aca2f52b2520a4a4dce2f4af1cb2f71cb2fcd4b51d2514a492d4e2eca2c28c9cccf034a032514d2c032b50072a6513234000000"
        ],
        "rawHeaders": [
            "Date",
            "Sun, 08 Oct 2023 17:58:54 GMT",
            "Content-Type",
            "application/json; charset=utf-8",
            "Transfer-Encoding",
            "chunked",
            "Connection",
            "close",
            "x-zendesk-api-version",
            "v2",
            "x-zendesk-application-version",
            "v18586",
            "x-frame-options",
            "SAMEORIGIN",
            "x-rate-limit",
            "700",
            "rate-limit",
            "700",
            "x-rate-limit-remaining",
            "684",
            "rate-limit-remaining",
            "684",
            "rate-limit-reset",
            "6",
            "strict-transport-security",
            "max-age=31536000; includeSubDomains",
            "cache-control",
            "no-cache",
            "set-cookie",
            "_zendesk_cookie=BAhJIhl7ImRldmljZV90b2tlbnMiOnt9fQY6BkVU--0bf2100788cb010d0183feca16aaf88ccaf719ca; path=/; expires=Sun, 06 Oct 2024 20:34:04 GMT; secure; HttpOnly; SameSite=None",
            "x-zendesk-origin-server",
            "classic-app-server-5d6b8cb99d-qr7d6",
            "x-request-id",
            "8130464c1d0dc654-SEA",
            "X-Request-ID",
            "8130464c1d0dc654-SEA",
            "x-runtime",
            "0.053330",
            "X-Zendesk-Zorg",
            "yes",
            "Content-Encoding",
            "gzip",
            "CF-Cache-Status",
            "DYNAMIC",
            "Report-To",
            "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=E3ZX%2F0HYQcHH0lYsbniVyhDA2RG5D5obNkmaWqyb9Y42pH66%2BtMmIx%2FXCu5xlfWdNF9vI6tTsK75DMu6rzl5ASN7oNUXdScRYGmpxkqd%2Bb4mkQnXO5yG9sNbCksnhjSWd%2BGqPOkcWg%3D%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}",
            "NEL",
            "{\"success_fraction\":0.01,\"report_to\":\"cf-nel\",\"max_age\":604800}",
            "Set-Cookie",
            "__cfruid=1645a2e569342841ffca1110caa3b48890924893-1696787934; path=/; domain=.nodejsapi.zendesk.com; HttpOnly; Secure; SameSite=None",
            "Server",
            "cloudflare",
            "CF-RAY",
            "8130464c1d0dc654-SEA"
        ],
        "responseIsBinary": false
    },
    {
        "scope": "https://nodejsapi.zendesk.com:443",
        "method": "GET",
        "path": "/api/v2/organizations/19856666511636.json",
        "body": "",
        "status": 404,
        "response": [
            "1f8b0800000000000003ab564a2d2aca2f52b2520a4a4dce2f4af1cb2f71cb2fcd4b51d2514a492d4e2eca2c28c9cccf034a032514d2c032b50072a6513234000000"
        ],
        "rawHeaders": [
            "Date",
            "Sun, 08 Oct 2023 17:58:54 GMT",
            "Content-Type",
            "application/json; charset=utf-8",
            "Transfer-Encoding",
            "chunked",
            "Connection",
            "close",
            "x-zendesk-api-version",
            "v2",
            "x-zendesk-application-version",
            "v18586",
            "x-frame-options",
            "SAMEORIGIN",
            "x-rate-limit",
            "700",
            "rate-limit",
            "700",
            "x-rate-limit-remaining",
            "683",
            "rate-limit-remaining",
            "683",
            "rate-limit-reset",
            "6",
            "strict-transport-security",
            "max-age=31536000; includeSubDomains",
            "cache-control",
            "no-cache",
            "set-cookie",
            "_zendesk_cookie=BAhJIhl7ImRldmljZV90b2tlbnMiOnt9fQY6BkVU--0bf2100788cb010d0183feca16aaf88ccaf719ca; path=/; expires=Tue, 08 Oct 2024 17:43:47 GMT; secure; HttpOnly; SameSite=None",
            "x-zendesk-origin-server",
            "classic-app-server-5d6b8cb99d-mfvmm",
            "x-request-id",
            "8130464d8cc2ebf2-SEA",
            "X-Request-ID",
            "8130464d8cc2ebf2-SEA",
            "x-runtime",
            "0.059368",
            "X-Zendesk-Zorg",
            "yes",
            "Content-Encoding",
            "gzip",
            "CF-Cache-Status",
            "DYNAMIC",
            "Report-To",
            "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=Xe8Xkg9TjjMHbQ3AU9PJfQkNYn%2Foko0KzXEZex9GzVlvdp3%2FoGv4N2lwBL3JQYoAWeN48eYsZe4abUczXC6LmN5Y0d%2FrZ2lGEG9f%2B4Zc0TMayyz5bIF0TPoyngdN2e6YLI5M4iHxqQ%3D%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}",
            "NEL",
            "{\"success_fraction\":0.01,\"report_to\":\"cf-nel\",\"max_age\":604800}",
            "Set-Cookie",
            "__cfruid=1645a2e569342841ffca1110caa3b48890924893-1696787934; path=/; domain=.nodejsapi.zendesk.com; HttpOnly; Secure; SameSite=None",
            "Server",
            "cloudflare",
            "CF-RAY",
            "8130464d8cc2ebf2-SEA"
        ],
        "responseIsBinary": false
    },
    {
        "scope": "https://nodejsapi.zendesk.com:443",
        "method": "GET",
        "path": "/api/v2/organizations/19856666511380.json",
        "body": "",
        "status": 404,
        "response": [
            "1f8b0800000000000003ab564a2d2aca2f52b2520a4a4dce2f4af1cb2f71cb2fcd4b51d2514a492d4e2eca2c28c9cccf034a032514d2c032b50072a6513234000000"
        ],
        "rawHeaders": [
            "Date",
            "Sun, 08 Oct 2023 17:58:54 GMT",
            "Content-Type",
            "application/json; charset=utf-8",
            "Transfer-Encoding",
            "chunked",
            "Connection",
            "close",
            "x-zendesk-api-version",
            "v2",
            "x-zendesk-application-version",
            "v18586",
            "x-frame-options",
            "SAMEORIGIN",
            "x-rate-limit",
            "700",
            "rate-limit",
            "700",
            "x-rate-limit-remaining",
            "682",
            "rate-limit-remaining",
            "682",
            "rate-limit-reset",
            "6",
            "strict-transport-security",
            "max-age=31536000; includeSubDomains",
            "cache-control",
            "no-cache",
            "set-cookie",
            "_zendesk_cookie=BAhJIhl7ImRldmljZV90b2tlbnMiOnt9fQY6BkVU--0bf2100788cb010d0183feca16aaf88ccaf719ca; path=/; expires=Mon, 07 Oct 2024 01:56:41 GMT; secure; HttpOnly; SameSite=None",
            "x-zendesk-origin-server",
            "classic-app-server-5d6b8cb99d-rkn2h",
            "x-request-id",
            "8130464efb612811-SEA",
            "X-Request-ID",
            "8130464efb612811-SEA",
            "x-runtime",
            "0.065343",
            "X-Zendesk-Zorg",
            "yes",
            "Content-Encoding",
            "gzip",
            "CF-Cache-Status",
            "DYNAMIC",
            "Report-To",
            "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=CstNuhm2rDZSDbPMWiLClAccZAL2P2833tY6d8dBcvwe%2Fv8%2Fqey%2FQnPhRN2YNsP1VAmNqqNLpOILgwpSHaa6XiKCEhh0N7IasobN9h9e1%2FgEgFtzHE%2F4H%2F2GNZR%2BNLyMvUDveh5jnQ%3D%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}",
            "NEL",
            "{\"success_fraction\":0.01,\"report_to\":\"cf-nel\",\"max_age\":604800}",
            "Set-Cookie",
            "__cfruid=1645a2e569342841ffca1110caa3b48890924893-1696787934; path=/; domain=.nodejsapi.zendesk.com; HttpOnly; Secure; SameSite=None",
            "Server",
            "cloudflare",
            "CF-RAY",
            "8130464efb612811-SEA"
        ],
        "responseIsBinary": false
    },
    {
        "scope": "https://nodejsapi.zendesk.com:443",
        "method": "GET",
        "path": "/api/v2/organizations/19856666513044.json",
        "body": "",
        "status": 404,
        "response": [
            "1f8b0800000000000003ab564a2d2aca2f52b2520a4a4dce2f4af1cb2f71cb2fcd4b51d2514a492d4e2eca2c28c9cccf034a032514d2c032b50072a6513234000000"
        ],
        "rawHeaders": [
            "Date",
            "Sun, 08 Oct 2023 17:58:54 GMT",
            "Content-Type",
            "application/json; charset=utf-8",
            "Transfer-Encoding",
            "chunked",
            "Connection",
            "close",
            "x-zendesk-api-version",
            "v2",
            "x-zendesk-application-version",
            "v18586",
            "x-frame-options",
            "SAMEORIGIN",
            "x-rate-limit",
            "700",
            "rate-limit",
            "700",
            "x-rate-limit-remaining",
            "681",
            "rate-limit-remaining",
            "681",
            "rate-limit-reset",
            "6",
            "strict-transport-security",
            "max-age=31536000; includeSubDomains",
            "cache-control",
            "no-cache",
            "set-cookie",
            "_zendesk_cookie=BAhJIhl7ImRldmljZV90b2tlbnMiOnt9fQY6BkVU--0bf2100788cb010d0183feca16aaf88ccaf719ca; path=/; expires=Sun, 06 Oct 2024 20:34:55 GMT; secure; HttpOnly; SameSite=None",
            "x-zendesk-origin-server",
            "classic-app-server-5d6b8cb99d-zhbqg",
            "x-request-id",
            "813046506f7cc374-SEA",
            "X-Request-ID",
            "813046506f7cc374-SEA",
            "x-runtime",
            "0.055041",
            "X-Zendesk-Zorg",
            "yes",
            "Content-Encoding",
            "gzip",
            "CF-Cache-Status",
            "DYNAMIC",
            "Report-To",
            "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=MkyTR1SPUNQ1hZtuz0Xs5QRUCWpAXbJr34lgdAmBj11uB4Ky6KaQl7QP6qk9NGUiEN68ZQL3ArfzmIjjfj9tAYxhvRV761z1alzP7%2BKkR%2BhsmjM9l0VCgmag0%2BT%2FwUa0XsIg17czEQ%3D%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}",
            "NEL",
            "{\"success_fraction\":0.01,\"report_to\":\"cf-nel\",\"max_age\":604800}",
            "Set-Cookie",
            "__cfruid=1645a2e569342841ffca1110caa3b48890924893-1696787934; path=/; domain=.nodejsapi.zendesk.com; HttpOnly; Secure; SameSite=None",
            "Server",
            "cloudflare",
            "CF-RAY",
            "813046506f7cc374-SEA"
        ],
        "responseIsBinary": false
    },
    {
        "scope": "https://nodejsapi.zendesk.com:443",
        "method": "GET",
        "path": "/api/v2/organizations/19856666514324.json",
        "body": "",
        "status": 404,
        "response": [
            "1f8b0800000000000003ab564a2d2aca2f52b2520a4a4dce2f4af1cb2f71cb2fcd4b51d2514a492d4e2eca2c28c9cccf034a032514d2c032b50072a6513234000000"
        ],
        "rawHeaders": [
            "Date",
            "Sun, 08 Oct 2023 17:58:55 GMT",
            "Content-Type",
            "application/json; charset=utf-8",
            "Transfer-Encoding",
            "chunked",
            "Connection",
            "close",
            "x-zendesk-api-version",
            "v2",
            "x-zendesk-application-version",
            "v18586",
            "x-frame-options",
            "SAMEORIGIN",
            "x-rate-limit",
            "700",
            "rate-limit",
            "700",
            "x-rate-limit-remaining",
            "680",
            "rate-limit-remaining",
            "680",
            "rate-limit-reset",
            "5",
            "strict-transport-security",
            "max-age=31536000; includeSubDomains",
            "cache-control",
            "no-cache",
            "set-cookie",
            "_zendesk_cookie=BAhJIhl7ImRldmljZV90b2tlbnMiOnt9fQY6BkVU--0bf2100788cb010d0183feca16aaf88ccaf719ca; path=/; expires=Sun, 06 Oct 2024 23:14:34 GMT; secure; HttpOnly; SameSite=None",
            "x-zendesk-origin-server",
            "classic-app-server-5d6b8cb99d-5dm8s",
            "x-request-id",
            "81304651c8be2765-SEA",
            "X-Request-ID",
            "81304651c8be2765-SEA",
            "x-runtime",
            "0.052492",
            "X-Zendesk-Zorg",
            "yes",
            "Content-Encoding",
            "gzip",
            "CF-Cache-Status",
            "DYNAMIC",
            "Report-To",
            "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=ZyJNrqMtE5jh5xW4SBU8fSYB4FyOteVLsGf%2BALcXjmz6qqvU9guxrPjjCzWmhs2jYfdDO1ojB2W2bJRmXTVLnSYPCC5CZxZM6BlglvSBcLH2hdZ5xAf%2F%2Frjfo5AW5YqDefveC9sX8Q%3D%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}",
            "NEL",
            "{\"success_fraction\":0.01,\"report_to\":\"cf-nel\",\"max_age\":604800}",
            "Set-Cookie",
            "__cfruid=bb24a1d52095006c3ea6672135116b8e5c752b1a-1696787935; path=/; domain=.nodejsapi.zendesk.com; HttpOnly; Secure; SameSite=None",
            "Server",
            "cloudflare",
            "CF-RAY",
            "81304651c8be2765-SEA"
        ],
        "responseIsBinary": false
    },
    {
        "scope": "https://nodejsapi.zendesk.com:443",
        "method": "GET",
        "path": "/api/v2/organizations/19856666512660.json",
        "body": "",
        "status": 404,
        "response": [
            "1f8b0800000000000003ab564a2d2aca2f52b2520a4a4dce2f4af1cb2f71cb2fcd4b51d2514a492d4e2eca2c28c9cccf034a032514d2c032b50072a6513234000000"
        ],
        "rawHeaders": [
            "Date",
            "Sun, 08 Oct 2023 17:58:55 GMT",
            "Content-Type",
            "application/json; charset=utf-8",
            "Transfer-Encoding",
            "chunked",
            "Connection",
            "close",
            "x-zendesk-api-version",
            "v2",
            "x-zendesk-application-version",
            "v18586",
            "x-frame-options",
            "SAMEORIGIN",
            "x-rate-limit",
            "700",
            "rate-limit",
            "700",
            "x-rate-limit-remaining",
            "679",
            "rate-limit-remaining",
            "679",
            "rate-limit-reset",
            "5",
            "strict-transport-security",
            "max-age=31536000; includeSubDomains",
            "cache-control",
            "no-cache",
            "set-cookie",
            "_zendesk_cookie=BAhJIhl7ImRldmljZV90b2tlbnMiOnt9fQY6BkVU--0bf2100788cb010d0183feca16aaf88ccaf719ca; path=/; expires=Mon, 07 Oct 2024 15:13:59 GMT; secure; HttpOnly; SameSite=None",
            "x-zendesk-origin-server",
            "classic-app-server-5d6b8cb99d-zmzwx",
            "x-request-id",
            "8130465308f9c582-SEA",
            "X-Request-ID",
            "8130465308f9c582-SEA",
            "x-runtime",
            "0.049953",
            "X-Zendesk-Zorg",
            "yes",
            "Content-Encoding",
            "gzip",
            "CF-Cache-Status",
            "DYNAMIC",
            "Report-To",
            "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=AsXbR4YtRXNdDYutO2%2BYLQMozMguXn7o0uRv0%2ByHFIpK6ZijbTR19OW5y2hCXZBvY0Hjt6IC%2FFejp%2F6niG%2F%2Fhn52gg4gGNu0UMTKHonfN4WvNTo4EDxluteFCiENO39JY6z44KYBFw%3D%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}",
            "NEL",
            "{\"success_fraction\":0.01,\"report_to\":\"cf-nel\",\"max_age\":604800}",
            "Set-Cookie",
            "__cfruid=bb24a1d52095006c3ea6672135116b8e5c752b1a-1696787935; path=/; domain=.nodejsapi.zendesk.com; HttpOnly; Secure; SameSite=None",
            "Server",
            "cloudflare",
            "CF-RAY",
            "8130465308f9c582-SEA"
        ],
        "responseIsBinary": false
    },
    {
        "scope": "https://nodejsapi.zendesk.com:443",
        "method": "GET",
        "path": "/api/v2/organizations/19856666513172.json",
        "body": "",
        "status": 404,
        "response": [
            "1f8b0800000000000003ab564a2d2aca2f52b2520a4a4dce2f4af1cb2f71cb2fcd4b51d2514a492d4e2eca2c28c9cccf034a032514d2c032b50072a6513234000000"
        ],
        "rawHeaders": [
            "Date",
            "Sun, 08 Oct 2023 17:58:55 GMT",
            "Content-Type",
            "application/json; charset=utf-8",
            "Transfer-Encoding",
            "chunked",
            "Connection",
            "close",
            "x-zendesk-api-version",
            "v2",
            "x-zendesk-application-version",
            "v18586",
            "x-frame-options",
            "SAMEORIGIN",
            "x-rate-limit",
            "700",
            "rate-limit",
            "700",
            "x-rate-limit-remaining",
            "678",
            "rate-limit-remaining",
            "678",
            "rate-limit-reset",
            "5",
            "strict-transport-security",
            "max-age=31536000; includeSubDomains",
            "cache-control",
            "no-cache",
            "set-cookie",
            "_zendesk_cookie=BAhJIhl7ImRldmljZV90b2tlbnMiOnt9fQY6BkVU--0bf2100788cb010d0183feca16aaf88ccaf719ca; path=/; expires=Sun, 06 Oct 2024 20:31:04 GMT; secure; HttpOnly; SameSite=None",
            "x-zendesk-origin-server",
            "classic-app-server-5d6b8cb99d-2vklm",
            "x-request-id",
            "8130465479c0c3ac-SEA",
            "X-Request-ID",
            "8130465479c0c3ac-SEA",
            "x-runtime",
            "0.053043",
            "X-Zendesk-Zorg",
            "yes",
            "Content-Encoding",
            "gzip",
            "CF-Cache-Status",
            "DYNAMIC",
            "Report-To",
            "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=Uq1D6sjVle061xGXilsgE7yOPRHexv5KbSmvx65804l92K2HBf51%2BZNgj1LSvLz%2B4o65lIZvw9QComu7VV9nYTJgGBLLQf%2BJewDswax9YecW0T0fOFw6RCWfKNca6I4vIaVbLg%2B%2FuA%3D%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}",
            "NEL",
            "{\"success_fraction\":0.01,\"report_to\":\"cf-nel\",\"max_age\":604800}",
            "Set-Cookie",
            "__cfruid=bb24a1d52095006c3ea6672135116b8e5c752b1a-1696787935; path=/; domain=.nodejsapi.zendesk.com; HttpOnly; Secure; SameSite=None",
            "Server",
            "cloudflare",
            "CF-RAY",
            "8130465479c0c3ac-SEA"
        ],
        "responseIsBinary": false
    },
    {
        "scope": "https://nodejsapi.zendesk.com:443",
        "method": "GET",
        "path": "/api/v2/organizations/19856666513556.json",
        "body": "",
        "status": 404,
        "response": [
            "1f8b0800000000000003ab564a2d2aca2f52b2520a4a4dce2f4af1cb2f71cb2fcd4b51d2514a492d4e2eca2c28c9cccf034a032514d2c032b50072a6513234000000"
        ],
        "rawHeaders": [
            "Date",
            "Sun, 08 Oct 2023 17:58:55 GMT",
            "Content-Type",
            "application/json; charset=utf-8",
            "Transfer-Encoding",
            "chunked",
            "Connection",
            "close",
            "x-zendesk-api-version",
            "v2",
            "x-zendesk-application-version",
            "v18586",
            "x-frame-options",
            "SAMEORIGIN",
            "x-rate-limit",
            "700",
            "rate-limit",
            "700",
            "x-rate-limit-remaining",
            "677",
            "rate-limit-remaining",
            "677",
            "rate-limit-reset",
            "5",
            "strict-transport-security",
            "max-age=31536000; includeSubDomains",
            "cache-control",
            "no-cache",
            "set-cookie",
            "_zendesk_cookie=BAhJIhl7ImRldmljZV90b2tlbnMiOnt9fQY6BkVU--0bf2100788cb010d0183feca16aaf88ccaf719ca; path=/; expires=Sun, 06 Oct 2024 20:36:24 GMT; secure; HttpOnly; SameSite=None",
            "x-zendesk-origin-server",
            "classic-app-server-5d6b8cb99d-94w74",
            "x-request-id",
            "81304655ef07f8d9-SEA",
            "X-Request-ID",
            "81304655ef07f8d9-SEA",
            "x-runtime",
            "0.050202",
            "X-Zendesk-Zorg",
            "yes",
            "Content-Encoding",
            "gzip",
            "CF-Cache-Status",
            "DYNAMIC",
            "Report-To",
            "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=Z%2FMgV2yYVMwItyJ1nzZhSFktUTBZaxb8C58lTUs5yHja1gdQoK%2BB3FgfSluRsYKIDg3PXw%2FZxN7VKgqJoLun17GN2a9033eJK6qghtqPLXfT%2F8i7wIYvMot7TewbpyQXdhsE7UOdkQ%3D%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}",
            "NEL",
            "{\"success_fraction\":0.01,\"report_to\":\"cf-nel\",\"max_age\":604800}",
            "Set-Cookie",
            "__cfruid=bb24a1d52095006c3ea6672135116b8e5c752b1a-1696787935; path=/; domain=.nodejsapi.zendesk.com; HttpOnly; Secure; SameSite=None",
            "Server",
            "cloudflare",
            "CF-RAY",
            "81304655ef07f8d9-SEA"
        ],
        "responseIsBinary": false
    },
    {
        "scope": "https://nodejsapi.zendesk.com:443",
        "method": "GET",
        "path": "/api/v2/organizations/19856666513684.json",
        "body": "",
        "status": 404,
        "response": [
            "1f8b0800000000000003ab564a2d2aca2f52b2520a4a4dce2f4af1cb2f71cb2fcd4b51d2514a492d4e2eca2c28c9cccf034a032514d2c032b50072a6513234000000"
        ],
        "rawHeaders": [
            "Date",
            "Sun, 08 Oct 2023 17:58:56 GMT",
            "Content-Type",
            "application/json; charset=utf-8",
            "Transfer-Encoding",
            "chunked",
            "Connection",
            "close",
            "x-zendesk-api-version",
            "v2",
            "x-zendesk-application-version",
            "v18586",
            "x-frame-options",
            "SAMEORIGIN",
            "x-rate-limit",
            "700",
            "rate-limit",
            "700",
            "x-rate-limit-remaining",
            "676",
            "rate-limit-remaining",
            "676",
            "rate-limit-reset",
            "4",
            "strict-transport-security",
            "max-age=31536000; includeSubDomains",
            "cache-control",
            "no-cache",
            "set-cookie",
            "_zendesk_cookie=BAhJIhl7ImRldmljZV90b2tlbnMiOnt9fQY6BkVU--0bf2100788cb010d0183feca16aaf88ccaf719ca; path=/; expires=Tue, 08 Oct 2024 16:31:43 GMT; secure; HttpOnly; SameSite=None",
            "x-zendesk-origin-server",
            "classic-app-server-5d6b8cb99d-474pg",
            "x-request-id",
            "813046577e106811-SEA",
            "X-Request-ID",
            "813046577e106811-SEA",
            "x-runtime",
            "0.053893",
            "X-Zendesk-Zorg",
            "yes",
            "Content-Encoding",
            "gzip",
            "CF-Cache-Status",
            "DYNAMIC",
            "Report-To",
            "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=8wApmuBhwM918TuTWfsCGaQfmaUHWYkbS8eV9%2FQ8tZO8SawYZb447VWJsZkE7tJGgcy5QrU8pEjhSB8y1i%2F8CzDOVZjE7SSk%2BSQf%2Bex8bAgArIN2LW87eibgFC%2BtetBapLWfU9qJ3Q%3D%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}",
            "NEL",
            "{\"success_fraction\":0.01,\"report_to\":\"cf-nel\",\"max_age\":604800}",
            "Set-Cookie",
            "__cfruid=e42b52336c6cff01b79eb22e0873db51a4347f01-1696787936; path=/; domain=.nodejsapi.zendesk.com; HttpOnly; Secure; SameSite=None",
            "Server",
            "cloudflare",
            "CF-RAY",
            "813046577e106811-SEA"
        ],
        "responseIsBinary": false
    },
    {
        "scope": "https://nodejsapi.zendesk.com:443",
        "method": "GET",
        "path": "/api/v2/organizations/19856666512404.json",
        "body": "",
        "status": 404,
        "response": [
            "1f8b0800000000000003ab564a2d2aca2f52b2520a4a4dce2f4af1cb2f71cb2fcd4b51d2514a492d4e2eca2c28c9cccf034a032514d2c032b50072a6513234000000"
        ],
        "rawHeaders": [
            "Date",
            "Sun, 08 Oct 2023 17:58:56 GMT",
            "Content-Type",
            "application/json; charset=utf-8",
            "Transfer-Encoding",
            "chunked",
            "Connection",
            "close",
            "x-zendesk-api-version",
            "v2",
            "x-zendesk-application-version",
            "v18586",
            "x-frame-options",
            "SAMEORIGIN",
            "x-rate-limit",
            "700",
            "rate-limit",
            "700",
            "x-rate-limit-remaining",
            "675",
            "rate-limit-remaining",
            "675",
            "rate-limit-reset",
            "4",
            "strict-transport-security",
            "max-age=31536000; includeSubDomains",
            "cache-control",
            "no-cache",
            "set-cookie",
            "_zendesk_cookie=BAhJIhl7ImRldmljZV90b2tlbnMiOnt9fQY6BkVU--0bf2100788cb010d0183feca16aaf88ccaf719ca; path=/; expires=Tue, 08 Oct 2024 17:43:47 GMT; secure; HttpOnly; SameSite=None",
            "x-zendesk-origin-server",
            "classic-app-server-5d6b8cb99d-mfvmm",
            "x-request-id",
            "81304659fa56307e-SEA",
            "X-Request-ID",
            "81304659fa56307e-SEA",
            "x-runtime",
            "0.057397",
            "X-Zendesk-Zorg",
            "yes",
            "Content-Encoding",
            "gzip",
            "CF-Cache-Status",
            "DYNAMIC",
            "Report-To",
            "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=qe%2FpVJoCn2L0IXOohIn9be8Ow3j%2BU1%2FWHN6JJNSNa5AVcwePkW3VLn3KMW9vei%2BB6RgSWWtLm1gddBIw3MydqcQbw7V4%2BgiK2rNFWeNyHTWfduAJCZjDaTNgnVKbXajd22Z9ofGyuw%3D%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}",
            "NEL",
            "{\"success_fraction\":0.01,\"report_to\":\"cf-nel\",\"max_age\":604800}",
            "Set-Cookie",
            "__cfruid=e42b52336c6cff01b79eb22e0873db51a4347f01-1696787936; path=/; domain=.nodejsapi.zendesk.com; HttpOnly; Secure; SameSite=None",
            "Server",
            "cloudflare",
            "CF-RAY",
            "81304659fa56307e-SEA"
        ],
        "responseIsBinary": false
    },
    {
        "scope": "https://nodejsapi.zendesk.com:443",
        "method": "GET",
        "path": "/api/v2/organizations/19856666511508.json",
        "body": "",
        "status": 404,
        "response": [
            "1f8b0800000000000003ab564a2d2aca2f52b2520a4a4dce2f4af1cb2f71cb2fcd4b51d2514a492d4e2eca2c28c9cccf034a032514d2c032b50072a6513234000000"
        ],
        "rawHeaders": [
            "Date",
            "Sun, 08 Oct 2023 17:58:56 GMT",
            "Content-Type",
            "application/json; charset=utf-8",
            "Transfer-Encoding",
            "chunked",
            "Connection",
            "close",
            "x-zendesk-api-version",
            "v2",
            "x-zendesk-application-version",
            "v18586",
            "x-frame-options",
            "SAMEORIGIN",
            "x-rate-limit",
            "700",
            "rate-limit",
            "700",
            "x-rate-limit-remaining",
            "674",
            "rate-limit-remaining",
            "674",
            "rate-limit-reset",
            "4",
            "strict-transport-security",
            "max-age=31536000; includeSubDomains",
            "cache-control",
            "no-cache",
            "set-cookie",
            "_zendesk_cookie=BAhJIhl7ImRldmljZV90b2tlbnMiOnt9fQY6BkVU--0bf2100788cb010d0183feca16aaf88ccaf719ca; path=/; expires=Tue, 08 Oct 2024 17:43:47 GMT; secure; HttpOnly; SameSite=None",
            "x-zendesk-origin-server",
            "classic-app-server-5d6b8cb99d-mfvmm",
            "x-request-id",
            "8130465bee82c5ac-SEA",
            "X-Request-ID",
            "8130465bee82c5ac-SEA",
            "x-runtime",
            "0.057810",
            "X-Zendesk-Zorg",
            "yes",
            "Content-Encoding",
            "gzip",
            "CF-Cache-Status",
            "DYNAMIC",
            "Report-To",
            "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=p56JrH8iPWfJdyqHmHDLtl23gjwBCyUvaIQ3zrlp99i5xOOda%2BWs31%2BY0FpFN05sRo3Cf8b6Tmy6wmQCXJmMFoPzCDxTjgrG9m2JjZNR37inBTuyPdhsGKl5KZQHl7eIurzu97Bk0Q%3D%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}",
            "NEL",
            "{\"success_fraction\":0.01,\"report_to\":\"cf-nel\",\"max_age\":604800}",
            "Set-Cookie",
            "__cfruid=e42b52336c6cff01b79eb22e0873db51a4347f01-1696787936; path=/; domain=.nodejsapi.zendesk.com; HttpOnly; Secure; SameSite=None",
            "Server",
            "cloudflare",
            "CF-RAY",
            "8130465bee82c5ac-SEA"
        ],
        "responseIsBinary": false
    },
    {
        "scope": "https://nodejsapi.zendesk.com:443",
        "method": "GET",
        "path": "/api/v2/organizations/19856666514196.json",
        "body": "",
        "status": 404,
        "response": [
            "1f8b0800000000000003ab564a2d2aca2f52b2520a4a4dce2f4af1cb2f71cb2fcd4b51d2514a492d4e2eca2c28c9cccf034a032514d2c032b50072a6513234000000"
        ],
        "rawHeaders": [
            "Date",
            "Sun, 08 Oct 2023 17:58:57 GMT",
            "Content-Type",
            "application/json; charset=utf-8",
            "Transfer-Encoding",
            "chunked",
            "Connection",
            "close",
            "x-zendesk-api-version",
            "v2",
            "x-zendesk-application-version",
            "v18586",
            "x-frame-options",
            "SAMEORIGIN",
            "x-rate-limit",
            "700",
            "rate-limit",
            "700",
            "x-rate-limit-remaining",
            "673",
            "rate-limit-remaining",
            "673",
            "rate-limit-reset",
            "3",
            "strict-transport-security",
            "max-age=31536000; includeSubDomains",
            "cache-control",
            "no-cache",
            "set-cookie",
            "_zendesk_cookie=BAhJIhl7ImRldmljZV90b2tlbnMiOnt9fQY6BkVU--0bf2100788cb010d0183feca16aaf88ccaf719ca; path=/; expires=Tue, 08 Oct 2024 17:43:46 GMT; secure; HttpOnly; SameSite=None",
            "x-zendesk-origin-server",
            "classic-app-server-5d6b8cb99d-q9bf9",
            "x-request-id",
            "8130465dbaf0eb7b-SEA",
            "X-Request-ID",
            "8130465dbaf0eb7b-SEA",
            "x-runtime",
            "0.054477",
            "X-Zendesk-Zorg",
            "yes",
            "Content-Encoding",
            "gzip",
            "CF-Cache-Status",
            "DYNAMIC",
            "Report-To",
            "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=QWxxWqxcxaVEIr6xaCqYyVnbX2XTBASRfJv9%2FQ8NzRPnMtqzKQJ2fqet7aXmMOBvlHDl7SH57WZpucsph1mMKqKc72HsHMNY4jxSchh2Qsfgztlw4%2B%2BI%2FPTC4MG6BFMVE4AMWJnBBQ%3D%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}",
            "NEL",
            "{\"success_fraction\":0.01,\"report_to\":\"cf-nel\",\"max_age\":604800}",
            "Set-Cookie",
            "__cfruid=1ffb04e101d515ae8eff55f182466a840b6fc8ed-1696787937; path=/; domain=.nodejsapi.zendesk.com; HttpOnly; Secure; SameSite=None",
            "Server",
            "cloudflare",
            "CF-RAY",
            "8130465dbaf0eb7b-SEA"
        ],
        "responseIsBinary": false
    },
    {
        "scope": "https://nodejsapi.zendesk.com:443",
        "method": "GET",
        "path": "/api/v2/organizations/19856666514580.json",
        "body": "",
        "status": 404,
        "response": [
            "1f8b0800000000000003ab564a2d2aca2f52b2520a4a4dce2f4af1cb2f71cb2fcd4b51d2514a492d4e2eca2c28c9cccf034a032514d2c032b50072a6513234000000"
        ],
        "rawHeaders": [
            "Date",
            "Sun, 08 Oct 2023 17:58:57 GMT",
            "Content-Type",
            "application/json; charset=utf-8",
            "Transfer-Encoding",
            "chunked",
            "Connection",
            "close",
            "x-zendesk-api-version",
            "v2",
            "x-zendesk-application-version",
            "v18586",
            "x-frame-options",
            "SAMEORIGIN",
            "x-rate-limit",
            "700",
            "rate-limit",
            "700",
            "x-rate-limit-remaining",
            "672",
            "rate-limit-remaining",
            "672",
            "rate-limit-reset",
            "3",
            "strict-transport-security",
            "max-age=31536000; includeSubDomains",
            "cache-control",
            "no-cache",
            "set-cookie",
            "_zendesk_cookie=BAhJIhl7ImRldmljZV90b2tlbnMiOnt9fQY6BkVU--0bf2100788cb010d0183feca16aaf88ccaf719ca; path=/; expires=Sun, 06 Oct 2024 20:35:45 GMT; secure; HttpOnly; SameSite=None",
            "x-zendesk-origin-server",
            "classic-app-server-5d6b8cb99d-9bmj2",
            "x-request-id",
            "8130465febdac624-SEA",
            "X-Request-ID",
            "8130465febdac624-SEA",
            "x-runtime",
            "0.053202",
            "X-Zendesk-Zorg",
            "yes",
            "Content-Encoding",
            "gzip",
            "CF-Cache-Status",
            "DYNAMIC",
            "Report-To",
            "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=jxUPvN2wXdtNSkJPyVipXr9FwbUxjpVwRNUjI%2FTDnDB1JboiYPQXNTXgW2drVRTT1eidOMpVdJKBBqvzx95Uab4b2yDpVRf7E5LsiM%2FLcWCt9NS0Mu75LPzO2CmuroxkhpLm9MjiPA%3D%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}",
            "NEL",
            "{\"success_fraction\":0.01,\"report_to\":\"cf-nel\",\"max_age\":604800}",
            "Set-Cookie",
            "__cfruid=1ffb04e101d515ae8eff55f182466a840b6fc8ed-1696787937; path=/; domain=.nodejsapi.zendesk.com; HttpOnly; Secure; SameSite=None",
            "Server",
            "cloudflare",
            "CF-RAY",
            "8130465febdac624-SEA"
        ],
        "responseIsBinary": false
    },
    {
        "scope": "https://nodejsapi.zendesk.com:443",
        "method": "GET",
        "path": "/api/v2/organizations/19856666512532.json",
        "body": "",
        "status": 404,
        "response": [
            "1f8b0800000000000003ab564a2d2aca2f52b2520a4a4dce2f4af1cb2f71cb2fcd4b51d2514a492d4e2eca2c28c9cccf034a032514d2c032b50072a6513234000000"
        ],
        "rawHeaders": [
            "Date",
            "Sun, 08 Oct 2023 17:58:57 GMT",
            "Content-Type",
            "application/json; charset=utf-8",
            "Transfer-Encoding",
            "chunked",
            "Connection",
            "close",
            "x-zendesk-api-version",
            "v2",
            "x-zendesk-application-version",
            "v18586",
            "x-frame-options",
            "SAMEORIGIN",
            "x-rate-limit",
            "700",
            "rate-limit",
            "700",
            "x-rate-limit-remaining",
            "671",
            "rate-limit-remaining",
            "671",
            "rate-limit-reset",
            "3",
            "strict-transport-security",
            "max-age=31536000; includeSubDomains",
            "cache-control",
            "no-cache",
            "set-cookie",
            "_zendesk_cookie=BAhJIhl7ImRldmljZV90b2tlbnMiOnt9fQY6BkVU--0bf2100788cb010d0183feca16aaf88ccaf719ca; path=/; expires=Sun, 06 Oct 2024 20:35:34 GMT; secure; HttpOnly; SameSite=None",
            "x-zendesk-origin-server",
            "classic-app-server-5d6b8cb99d-7ss7s",
            "x-request-id",
            "813046615bc5ec64-SEA",
            "X-Request-ID",
            "813046615bc5ec64-SEA",
            "x-runtime",
            "0.080399",
            "X-Zendesk-Zorg",
            "yes",
            "Content-Encoding",
            "gzip",
            "CF-Cache-Status",
            "DYNAMIC",
            "Report-To",
            "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=XLQEf%2FcruiyknoKpVcl3xedJ9s1xq6H5qBY9A%2FyhGy%2BR5dn6rO%2BtUb%2FAa5lZvtFPmy31bqf3ySB3lZvBvmWMQg8WXwDlwVr68zdROWOhGifvTGGhpy%2FaXdL5wC6%2B9%2Fm10Pb7MvM7cg%3D%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}",
            "NEL",
            "{\"success_fraction\":0.01,\"report_to\":\"cf-nel\",\"max_age\":604800}",
            "Set-Cookie",
            "__cfruid=1ffb04e101d515ae8eff55f182466a840b6fc8ed-1696787937; path=/; domain=.nodejsapi.zendesk.com; HttpOnly; Secure; SameSite=None",
            "Server",
            "cloudflare",
            "CF-RAY",
            "813046615bc5ec64-SEA"
        ],
        "responseIsBinary": false
    },
    {
        "scope": "https://nodejsapi.zendesk.com:443",
        "method": "GET",
        "path": "/api/v2/organizations/19856666513940.json",
        "body": "",
        "status": 404,
        "response": [
            "1f8b0800000000000003ab564a2d2aca2f52b2520a4a4dce2f4af1cb2f71cb2fcd4b51d2514a492d4e2eca2c28c9cccf034a032514d2c032b50072a6513234000000"
        ],
        "rawHeaders": [
            "Date",
            "Sun, 08 Oct 2023 17:58:57 GMT",
            "Content-Type",
            "application/json; charset=utf-8",
            "Transfer-Encoding",
            "chunked",
            "Connection",
            "close",
            "x-zendesk-api-version",
            "v2",
            "x-zendesk-application-version",
            "v18586",
            "x-frame-options",
            "SAMEORIGIN",
            "x-rate-limit",
            "700",
            "rate-limit",
            "700",
            "x-rate-limit-remaining",
            "670",
            "rate-limit-remaining",
            "670",
            "rate-limit-reset",
            "3",
            "strict-transport-security",
            "max-age=31536000; includeSubDomains",
            "cache-control",
            "no-cache",
            "set-cookie",
            "_zendesk_cookie=BAhJIhl7ImRldmljZV90b2tlbnMiOnt9fQY6BkVU--0bf2100788cb010d0183feca16aaf88ccaf719ca; path=/; expires=Sun, 06 Oct 2024 20:36:24 GMT; secure; HttpOnly; SameSite=None",
            "x-zendesk-origin-server",
            "classic-app-server-5d6b8cb99d-94w74",
            "x-request-id",
            "813046632b69309a-SEA",
            "X-Request-ID",
            "813046632b69309a-SEA",
            "x-runtime",
            "0.049071",
            "X-Zendesk-Zorg",
            "yes",
            "Content-Encoding",
            "gzip",
            "CF-Cache-Status",
            "DYNAMIC",
            "Report-To",
            "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=XZivS%2Bb7IK6siVKEvhc72ny08j%2F0KNVPPbR93kSnlf9twBR4fxMLtn6RcKPZmbbbpeBTL%2BAxKwMavNz77tJr%2BFcbXRv%2BovcHYk2pmqpVDhGFYBMD%2Fx5kdUYFGvCZuNz8QoMKxmPVnw%3D%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}",
            "NEL",
            "{\"success_fraction\":0.01,\"report_to\":\"cf-nel\",\"max_age\":604800}",
            "Set-Cookie",
            "__cfruid=1ffb04e101d515ae8eff55f182466a840b6fc8ed-1696787937; path=/; domain=.nodejsapi.zendesk.com; HttpOnly; Secure; SameSite=None",
            "Server",
            "cloudflare",
            "CF-RAY",
            "813046632b69309a-SEA"
        ],
        "responseIsBinary": false
    },
    {
        "scope": "https://nodejsapi.zendesk.com:443",
        "method": "GET",
        "path": "/api/v2/organizations/19856666512148.json",
        "body": "",
        "status": 404,
        "response": [
            "1f8b0800000000000003ab564a2d2aca2f52b2520a4a4dce2f4af1cb2f71cb2fcd4b51d2514a492d4e2eca2c28c9cccf034a032514d2c032b50072a6513234000000"
        ],
        "rawHeaders": [
            "Date",
            "Sun, 08 Oct 2023 17:58:58 GMT",
            "Content-Type",
            "application/json; charset=utf-8",
            "Transfer-Encoding",
            "chunked",
            "Connection",
            "close",
            "x-zendesk-api-version",
            "v2",
            "x-zendesk-application-version",
            "v18586",
            "x-frame-options",
            "SAMEORIGIN",
            "x-rate-limit",
            "700",
            "rate-limit",
            "700",
            "x-rate-limit-remaining",
            "669",
            "rate-limit-remaining",
            "669",
            "rate-limit-reset",
            "2",
            "strict-transport-security",
            "max-age=31536000; includeSubDomains",
            "cache-control",
            "no-cache",
            "set-cookie",
            "_zendesk_cookie=BAhJIhl7ImRldmljZV90b2tlbnMiOnt9fQY6BkVU--0bf2100788cb010d0183feca16aaf88ccaf719ca; path=/; expires=Sun, 06 Oct 2024 20:31:56 GMT; secure; HttpOnly; SameSite=None",
            "x-zendesk-origin-server",
            "classic-app-server-5d6b8cb99d-8nxf6",
            "x-request-id",
            "81304664bf5b30dd-SEA",
            "X-Request-ID",
            "81304664bf5b30dd-SEA",
            "x-runtime",
            "0.060724",
            "X-Zendesk-Zorg",
            "yes",
            "Content-Encoding",
            "gzip",
            "CF-Cache-Status",
            "DYNAMIC",
            "Report-To",
            "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=gm79c3G6TR%2B2SKiJQSxwuhniyKrTYzRvPxvvxUOkT56SoVIJLJSRQ%2Bsgkfw%2B11DVM88c2NC4bE81esJXglGqt9BY8gNo5oT9QzHVIL3PxKyVmXmcj6D0VChIg0C9JCEiU2DYPxS96g%3D%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}",
            "NEL",
            "{\"success_fraction\":0.01,\"report_to\":\"cf-nel\",\"max_age\":604800}",
            "Set-Cookie",
            "__cfruid=894b123b18d49b3bb3132e9afb60c08ac01efeb5-1696787938; path=/; domain=.nodejsapi.zendesk.com; HttpOnly; Secure; SameSite=None",
            "Server",
            "cloudflare",
            "CF-RAY",
            "81304664bf5b30dd-SEA"
        ],
        "responseIsBinary": false
    },
    {
        "scope": "https://nodejsapi.zendesk.com:443",
        "method": "GET",
        "path": "/api/v2/organizations/19856666512788.json",
        "body": "",
        "status": 404,
        "response": [
            "1f8b0800000000000003ab564a2d2aca2f52b2520a4a4dce2f4af1cb2f71cb2fcd4b51d2514a492d4e2eca2c28c9cccf034a032514d2c032b50072a6513234000000"
        ],
        "rawHeaders": [
            "Date",
            "Sun, 08 Oct 2023 17:58:58 GMT",
            "Content-Type",
            "application/json; charset=utf-8",
            "Transfer-Encoding",
            "chunked",
            "Connection",
            "close",
            "x-zendesk-api-version",
            "v2",
            "x-zendesk-application-version",
            "v18586",
            "x-frame-options",
            "SAMEORIGIN",
            "x-rate-limit",
            "700",
            "rate-limit",
            "700",
            "x-rate-limit-remaining",
            "668",
            "rate-limit-remaining",
            "668",
            "rate-limit-reset",
            "2",
            "strict-transport-security",
            "max-age=31536000; includeSubDomains",
            "cache-control",
            "no-cache",
            "set-cookie",
            "_zendesk_cookie=BAhJIhl7ImRldmljZV90b2tlbnMiOnt9fQY6BkVU--0bf2100788cb010d0183feca16aaf88ccaf719ca; path=/; expires=Sun, 06 Oct 2024 20:31:56 GMT; secure; HttpOnly; SameSite=None",
            "x-zendesk-origin-server",
            "classic-app-server-5d6b8cb99d-xhx7m",
            "x-request-id",
            "813046666d1627fe-SEA",
            "X-Request-ID",
            "813046666d1627fe-SEA",
            "x-runtime",
            "0.059834",
            "X-Zendesk-Zorg",
            "yes",
            "Content-Encoding",
            "gzip",
            "CF-Cache-Status",
            "DYNAMIC",
            "Report-To",
            "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=i2MT3hjXW1xa46Xqjd5h54AEclHwa38nSW18ncEbDNVb8nNhh6tDuMqd2IhMkKC16EerUkI1dYQ2Q8H0O7qGBviLt2aw6bMY%2Bw1WipaTjAScuEGkpE5ThXr4VAQAEn%2BoerTZKqdowQ%3D%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}",
            "NEL",
            "{\"success_fraction\":0.01,\"report_to\":\"cf-nel\",\"max_age\":604800}",
            "Set-Cookie",
            "__cfruid=894b123b18d49b3bb3132e9afb60c08ac01efeb5-1696787938; path=/; domain=.nodejsapi.zendesk.com; HttpOnly; Secure; SameSite=None",
            "Server",
            "cloudflare",
            "CF-RAY",
            "813046666d1627fe-SEA"
        ],
        "responseIsBinary": false
    },
    {
        "scope": "https://nodejsapi.zendesk.com:443",
        "method": "GET",
        "path": "/api/v2/organizations/19856666511252.json",
        "body": "",
        "status": 404,
        "response": [
            "1f8b0800000000000003ab564a2d2aca2f52b2520a4a4dce2f4af1cb2f71cb2fcd4b51d2514a492d4e2eca2c28c9cccf034a032514d2c032b50072a6513234000000"
        ],
        "rawHeaders": [
            "Date",
            "Sun, 08 Oct 2023 17:58:58 GMT",
            "Content-Type",
            "application/json; charset=utf-8",
            "Transfer-Encoding",
            "chunked",
            "Connection",
            "close",
            "x-zendesk-api-version",
            "v2",
            "x-zendesk-application-version",
            "v18586",
            "x-frame-options",
            "SAMEORIGIN",
            "x-rate-limit",
            "700",
            "rate-limit",
            "700",
            "x-rate-limit-remaining",
            "667",
            "rate-limit-remaining",
            "667",
            "rate-limit-reset",
            "2",
            "strict-transport-security",
            "max-age=31536000; includeSubDomains",
            "cache-control",
            "no-cache",
            "set-cookie",
            "_zendesk_cookie=BAhJIhl7ImRldmljZV90b2tlbnMiOnt9fQY6BkVU--0bf2100788cb010d0183feca16aaf88ccaf719ca; path=/; expires=Sun, 06 Oct 2024 20:36:24 GMT; secure; HttpOnly; SameSite=None",
            "x-zendesk-origin-server",
            "classic-app-server-5d6b8cb99d-94w74",
            "x-request-id",
            "813046680ea1c561-SEA",
            "X-Request-ID",
            "813046680ea1c561-SEA",
            "x-runtime",
            "0.049497",
            "X-Zendesk-Zorg",
            "yes",
            "Content-Encoding",
            "gzip",
            "CF-Cache-Status",
            "DYNAMIC",
            "Report-To",
            "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=HIYZIABELlTR3K9uWtMrlOEUMrGpfoSQEDUs%2BzC0hiuxxqD3mRat3Vl5MVfnUMf220S2beRudmMdM3k1bTssMZD%2F87lAaZB1enYL6FeXluNrPPN0drLCdFWojJRB%2BgQlsrKRqRbaQA%3D%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}",
            "NEL",
            "{\"success_fraction\":0.01,\"report_to\":\"cf-nel\",\"max_age\":604800}",
            "Set-Cookie",
            "__cfruid=894b123b18d49b3bb3132e9afb60c08ac01efeb5-1696787938; path=/; domain=.nodejsapi.zendesk.com; HttpOnly; Secure; SameSite=None",
            "Server",
            "cloudflare",
            "CF-RAY",
            "813046680ea1c561-SEA"
        ],
        "responseIsBinary": false
    },
    {
        "scope": "https://nodejsapi.zendesk.com:443",
        "method": "GET",
        "path": "/api/v2/organizations/19856666512916.json",
        "body": "",
        "status": 404,
        "response": [
            "1f8b0800000000000003ab564a2d2aca2f52b2520a4a4dce2f4af1cb2f71cb2fcd4b51d2514a492d4e2eca2c28c9cccf034a032514d2c032b50072a6513234000000"
        ],
        "rawHeaders": [
            "Date",
            "Sun, 08 Oct 2023 17:58:58 GMT",
            "Content-Type",
            "application/json; charset=utf-8",
            "Transfer-Encoding",
            "chunked",
            "Connection",
            "close",
            "x-zendesk-api-version",
            "v2",
            "x-zendesk-application-version",
            "v18586",
            "x-frame-options",
            "SAMEORIGIN",
            "x-rate-limit",
            "700",
            "rate-limit",
            "700",
            "x-rate-limit-remaining",
            "666",
            "rate-limit-remaining",
            "666",
            "rate-limit-reset",
            "2",
            "strict-transport-security",
            "max-age=31536000; includeSubDomains",
            "cache-control",
            "no-cache",
            "set-cookie",
            "_zendesk_cookie=BAhJIhl7ImRldmljZV90b2tlbnMiOnt9fQY6BkVU--0bf2100788cb010d0183feca16aaf88ccaf719ca; path=/; expires=Mon, 07 Oct 2024 16:03:48 GMT; secure; HttpOnly; SameSite=None",
            "x-zendesk-origin-server",
            "classic-app-server-5d6b8cb99d-9d9dd",
            "x-request-id",
            "8130466998ebc60e-SEA",
            "X-Request-ID",
            "8130466998ebc60e-SEA",
            "x-runtime",
            "0.062787",
            "X-Zendesk-Zorg",
            "yes",
            "Content-Encoding",
            "gzip",
            "CF-Cache-Status",
            "DYNAMIC",
            "Report-To",
            "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=gPEAa%2FGIUK1qWOjflzZ0dBwiEKUxNM6gJGCi1lenh3meJzA%2BbrrlMraruPRZg3QvK6qjgvXX9C61SLFMOmBzxXfYPuQ9hBH60naVbsCLMjju0YPe2Uu1Zxcjz72Z2WY0AKZ9pWt4Ig%3D%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}",
            "NEL",
            "{\"success_fraction\":0.01,\"report_to\":\"cf-nel\",\"max_age\":604800}",
            "Set-Cookie",
            "__cfruid=894b123b18d49b3bb3132e9afb60c08ac01efeb5-1696787938; path=/; domain=.nodejsapi.zendesk.com; HttpOnly; Secure; SameSite=None",
            "Server",
            "cloudflare",
            "CF-RAY",
            "8130466998ebc60e-SEA"
        ],
        "responseIsBinary": false
    },
    {
        "scope": "https://nodejsapi.zendesk.com:443",
        "method": "GET",
        "path": "/api/v2/organizations/19856666512276.json",
        "body": "",
        "status": 404,
        "response": [
            "1f8b0800000000000003ab564a2d2aca2f52b2520a4a4dce2f4af1cb2f71cb2fcd4b51d2514a492d4e2eca2c28c9cccf034a032514d2c032b50072a6513234000000"
        ],
        "rawHeaders": [
            "Date",
            "Sun, 08 Oct 2023 17:58:59 GMT",
            "Content-Type",
            "application/json; charset=utf-8",
            "Transfer-Encoding",
            "chunked",
            "Connection",
            "close",
            "x-zendesk-api-version",
            "v2",
            "x-zendesk-application-version",
            "v18586",
            "x-frame-options",
            "SAMEORIGIN",
            "x-rate-limit",
            "700",
            "rate-limit",
            "700",
            "x-rate-limit-remaining",
            "665",
            "rate-limit-remaining",
            "665",
            "rate-limit-reset",
            "1",
            "strict-transport-security",
            "max-age=31536000; includeSubDomains",
            "cache-control",
            "no-cache",
            "set-cookie",
            "_zendesk_cookie=BAhJIhl7ImRldmljZV90b2tlbnMiOnt9fQY6BkVU--0bf2100788cb010d0183feca16aaf88ccaf719ca; path=/; expires=Sun, 06 Oct 2024 20:34:04 GMT; secure; HttpOnly; SameSite=None",
            "x-zendesk-origin-server",
            "classic-app-server-5d6b8cb99d-c2lkx",
            "x-request-id",
            "8130466b0ff26829-SEA",
            "X-Request-ID",
            "8130466b0ff26829-SEA",
            "x-runtime",
            "0.058416",
            "X-Zendesk-Zorg",
            "yes",
            "Content-Encoding",
            "gzip",
            "CF-Cache-Status",
            "DYNAMIC",
            "Report-To",
            "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=lyvCHea0BtGK5MRWHVR5pfsKQ7hbFLNuXXBcPaF2iw6P%2BqJCM4eb2lZYNR1W1b4mHv0hNA9ARqz66lXUfFTiWX3r%2FkfYgcy14fagEpfMJOfBM2DRBmpJI1yJFgthZCn15pyJtToIaA%3D%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}",
            "NEL",
            "{\"success_fraction\":0.01,\"report_to\":\"cf-nel\",\"max_age\":604800}",
            "Set-Cookie",
            "__cfruid=7f6ef2fcd3fb03d69eb2592f844fec5358850575-1696787939; path=/; domain=.nodejsapi.zendesk.com; HttpOnly; Secure; SameSite=None",
            "Server",
            "cloudflare",
            "CF-RAY",
            "8130466b0ff26829-SEA"
        ],
        "responseIsBinary": false
    },
    {
        "scope": "https://nodejsapi.zendesk.com:443",
        "method": "GET",
        "path": "/api/v2/organizations/19856666511764.json",
        "body": "",
        "status": 404,
        "response": [
            "1f8b0800000000000003ab564a2d2aca2f52b2520a4a4dce2f4af1cb2f71cb2fcd4b51d2514a492d4e2eca2c28c9cccf034a032514d2c032b50072a6513234000000"
        ],
        "rawHeaders": [
            "Date",
            "Sun, 08 Oct 2023 17:58:59 GMT",
            "Content-Type",
            "application/json; charset=utf-8",
            "Transfer-Encoding",
            "chunked",
            "Connection",
            "close",
            "x-zendesk-api-version",
            "v2",
            "x-zendesk-application-version",
            "v18586",
            "x-frame-options",
            "SAMEORIGIN",
            "x-rate-limit",
            "700",
            "rate-limit",
            "700",
            "x-rate-limit-remaining",
            "664",
            "rate-limit-remaining",
            "664",
            "rate-limit-reset",
            "1",
            "strict-transport-security",
            "max-age=31536000; includeSubDomains",
            "cache-control",
            "no-cache",
            "set-cookie",
            "_zendesk_cookie=BAhJIhl7ImRldmljZV90b2tlbnMiOnt9fQY6BkVU--0bf2100788cb010d0183feca16aaf88ccaf719ca; path=/; expires=Mon, 07 Oct 2024 15:13:59 GMT; secure; HttpOnly; SameSite=None",
            "x-zendesk-origin-server",
            "classic-app-server-5d6b8cb99d-zmzwx",
            "x-request-id",
            "8130466d3b42279c-SEA",
            "X-Request-ID",
            "8130466d3b42279c-SEA",
            "x-runtime",
            "0.050222",
            "X-Zendesk-Zorg",
            "yes",
            "Content-Encoding",
            "gzip",
            "CF-Cache-Status",
            "DYNAMIC",
            "Report-To",
            "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=ioQoQ2Wl7voxKAKkzhe5vH85NdD2D75pfeObVvkXacf2yBTgzlvxRzVWPwIzkefEOXeB5tPtuyPT9LshrQntiBnLvJpeVSSCS5oTw12e9P2NnvaxRetjnZRCSagcQmBTfYZTP8RH7w%3D%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}",
            "NEL",
            "{\"success_fraction\":0.01,\"report_to\":\"cf-nel\",\"max_age\":604800}",
            "Set-Cookie",
            "__cfruid=7f6ef2fcd3fb03d69eb2592f844fec5358850575-1696787939; path=/; domain=.nodejsapi.zendesk.com; HttpOnly; Secure; SameSite=None",
            "Server",
            "cloudflare",
            "CF-RAY",
            "8130466d3b42279c-SEA"
        ],
        "responseIsBinary": false
    },
    {
        "scope": "https://nodejsapi.zendesk.com:443",
        "method": "GET",
        "path": "/api/v2/organizations/19856666511124.json",
        "body": "",
        "status": 404,
        "response": [
            "1f8b0800000000000003ab564a2d2aca2f52b2520a4a4dce2f4af1cb2f71cb2fcd4b51d2514a492d4e2eca2c28c9cccf034a032514d2c032b50072a6513234000000"
        ],
        "rawHeaders": [
            "Date",
            "Sun, 08 Oct 2023 17:58:59 GMT",
            "Content-Type",
            "application/json; charset=utf-8",
            "Transfer-Encoding",
            "chunked",
            "Connection",
            "close",
            "x-zendesk-api-version",
            "v2",
            "x-zendesk-application-version",
            "v18586",
            "x-frame-options",
            "SAMEORIGIN",
            "x-rate-limit",
            "700",
            "rate-limit",
            "700",
            "x-rate-limit-remaining",
            "663",
            "rate-limit-remaining",
            "663",
            "rate-limit-reset",
            "1",
            "strict-transport-security",
            "max-age=31536000; includeSubDomains",
            "cache-control",
            "no-cache",
            "set-cookie",
            "_zendesk_cookie=BAhJIhl7ImRldmljZV90b2tlbnMiOnt9fQY6BkVU--0bf2100788cb010d0183feca16aaf88ccaf719ca; path=/; expires=Sun, 06 Oct 2024 20:34:04 GMT; secure; HttpOnly; SameSite=None",
            "x-zendesk-origin-server",
            "classic-app-server-5d6b8cb99d-qr7d6",
            "x-request-id",
            "8130466e888b2843-SEA",
            "X-Request-ID",
            "8130466e888b2843-SEA",
            "x-runtime",
            "0.050612",
            "X-Zendesk-Zorg",
            "yes",
            "Content-Encoding",
            "gzip",
            "CF-Cache-Status",
            "DYNAMIC",
            "Report-To",
            "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=2RyAWTbtWwLJ0Krz4JHZAoF1QSA%2FV0OCHEIViskZGvd9%2BgBfsUGMUsD9v8xxTAhy%2BDafgoZ6UaDzydv71EKUYmk1VySX9L8MJ1QrMiuAYFJwc2IPGJmud3f%2FD3ZEbN%2FJ7tcJTvfTJw%3D%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}",
            "NEL",
            "{\"success_fraction\":0.01,\"report_to\":\"cf-nel\",\"max_age\":604800}",
            "Set-Cookie",
            "__cfruid=7f6ef2fcd3fb03d69eb2592f844fec5358850575-1696787939; path=/; domain=.nodejsapi.zendesk.com; HttpOnly; Secure; SameSite=None",
            "Server",
            "cloudflare",
            "CF-RAY",
            "8130466e888b2843-SEA"
        ],
        "responseIsBinary": false
    },
    {
        "scope": "https://nodejsapi.zendesk.com:443",
        "method": "GET",
        "path": "/api/v2/organizations/19856666510996.json",
        "body": "",
        "status": 404,
        "response": [
            "1f8b0800000000000003ab564a2d2aca2f52b2520a4a4dce2f4af1cb2f71cb2fcd4b51d2514a492d4e2eca2c28c9cccf034a032514d2c032b50072a6513234000000"
        ],
        "rawHeaders": [
            "Date",
            "Sun, 08 Oct 2023 17:58:59 GMT",
            "Content-Type",
            "application/json; charset=utf-8",
            "Transfer-Encoding",
            "chunked",
            "Connection",
            "close",
            "x-zendesk-api-version",
            "v2",
            "x-zendesk-application-version",
            "v18586",
            "x-frame-options",
            "SAMEORIGIN",
            "x-rate-limit",
            "700",
            "rate-limit",
            "700",
            "x-rate-limit-remaining",
            "662",
            "rate-limit-remaining",
            "662",
            "rate-limit-reset",
            "1",
            "strict-transport-security",
            "max-age=31536000; includeSubDomains",
            "cache-control",
            "no-cache",
            "set-cookie",
            "_zendesk_cookie=BAhJIhl7ImRldmljZV90b2tlbnMiOnt9fQY6BkVU--0bf2100788cb010d0183feca16aaf88ccaf719ca; path=/; expires=Sun, 06 Oct 2024 23:14:34 GMT; secure; HttpOnly; SameSite=None",
            "x-zendesk-origin-server",
            "classic-app-server-5d6b8cb99d-5dm8s",
            "x-request-id",
            "8130466fe90330a0-SEA",
            "X-Request-ID",
            "8130466fe90330a0-SEA",
            "x-runtime",
            "0.049793",
            "X-Zendesk-Zorg",
            "yes",
            "Content-Encoding",
            "gzip",
            "CF-Cache-Status",
            "DYNAMIC",
            "Report-To",
            "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=inPfqVqlfV38vW94%2FVd%2FJjEU%2Bg75JvqNyn2FQPv3aXAvQ0rfz8e27UBp5Xb%2FmALy1JvCBr3hERs9LygpAX82eDIioGuOHIPTxvntPAUXnqkGNbEvgpfa4%2BxbVDpJhLNT9o5cSKCusA%3D%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}",
            "NEL",
            "{\"success_fraction\":0.01,\"report_to\":\"cf-nel\",\"max_age\":604800}",
            "Set-Cookie",
            "__cfruid=7f6ef2fcd3fb03d69eb2592f844fec5358850575-1696787939; path=/; domain=.nodejsapi.zendesk.com; HttpOnly; Secure; SameSite=None",
            "Server",
            "cloudflare",
            "CF-RAY",
            "8130466fe90330a0-SEA"
        ],
        "responseIsBinary": false
    },
    {
        "scope": "https://nodejsapi.zendesk.com:443",
        "method": "GET",
        "path": "/api/v2/organizations/19856666514452.json",
        "body": "",
        "status": 404,
        "response": [
            "1f8b0800000000000003ab564a2d2aca2f52b2520a4a4dce2f4af1cb2f71cb2fcd4b51d2514a492d4e2eca2c28c9cccf034a032514d2c032b50072a6513234000000"
        ],
        "rawHeaders": [
            "Date",
            "Sun, 08 Oct 2023 17:59:00 GMT",
            "Content-Type",
            "application/json; charset=utf-8",
            "Transfer-Encoding",
            "chunked",
            "Connection",
            "close",
            "x-zendesk-api-version",
            "v2",
            "x-zendesk-application-version",
            "v18586",
            "x-frame-options",
            "SAMEORIGIN",
            "x-rate-limit",
            "700",
            "rate-limit",
            "700",
            "x-rate-limit-remaining",
            "699",
            "rate-limit-remaining",
            "699",
            "rate-limit-reset",
            "60",
            "strict-transport-security",
            "max-age=31536000; includeSubDomains",
            "cache-control",
            "no-cache",
            "set-cookie",
            "_zendesk_cookie=BAhJIhl7ImRldmljZV90b2tlbnMiOnt9fQY6BkVU--0bf2100788cb010d0183feca16aaf88ccaf719ca; path=/; expires=Sun, 06 Oct 2024 20:34:04 GMT; secure; HttpOnly; SameSite=None",
            "x-zendesk-origin-server",
            "classic-app-server-5d6b8cb99d-qr7d6",
            "x-request-id",
            "81304671680a309a-SEA",
            "X-Request-ID",
            "81304671680a309a-SEA",
            "x-runtime",
            "0.055513",
            "X-Zendesk-Zorg",
            "yes",
            "Content-Encoding",
            "gzip",
            "CF-Cache-Status",
            "DYNAMIC",
            "Report-To",
            "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=1Uh3mBxaU%2FQGBNbN%2BGXW8c5t8jqT8ySYpQ7KjhXqermyvBNSJE9IexsHSH8%2BXQcAf%2FXhz0KmcmEgBfdG7xWgRRF7LY3Fos2Jv%2Fuk8R7rlFpFVdJ6f4Kryr9Ft3Q961rL767XlTPUuA%3D%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}",
            "NEL",
            "{\"success_fraction\":0.01,\"report_to\":\"cf-nel\",\"max_age\":604800}",
            "Set-Cookie",
            "__cfruid=d17e45d8a220c6ccdb09f7237faf4b3b77818090-1696787940; path=/; domain=.nodejsapi.zendesk.com; HttpOnly; Secure; SameSite=None",
            "Server",
            "cloudflare",
            "CF-RAY",
            "81304671680a309a-SEA"
        ],
        "responseIsBinary": false
    },
    {
        "scope": "https://nodejsapi.zendesk.com:443",
        "method": "GET",
        "path": "/api/v2/organizations/19856666513428.json",
        "body": "",
        "status": 404,
        "response": [
            "1f8b0800000000000003ab564a2d2aca2f52b2520a4a4dce2f4af1cb2f71cb2fcd4b51d2514a492d4e2eca2c28c9cccf034a032514d2c032b50072a6513234000000"
        ],
        "rawHeaders": [
            "Date",
            "Sun, 08 Oct 2023 17:59:00 GMT",
            "Content-Type",
            "application/json; charset=utf-8",
            "Transfer-Encoding",
            "chunked",
            "Connection",
            "close",
            "x-zendesk-api-version",
            "v2",
            "x-zendesk-application-version",
            "v18586",
            "x-frame-options",
            "SAMEORIGIN",
            "x-rate-limit",
            "700",
            "rate-limit",
            "700",
            "x-rate-limit-remaining",
            "698",
            "rate-limit-remaining",
            "698",
            "rate-limit-reset",
            "60",
            "strict-transport-security",
            "max-age=31536000; includeSubDomains",
            "cache-control",
            "no-cache",
            "set-cookie",
            "_zendesk_cookie=BAhJIhl7ImRldmljZV90b2tlbnMiOnt9fQY6BkVU--0bf2100788cb010d0183feca16aaf88ccaf719ca; path=/; expires=Mon, 07 Oct 2024 03:51:51 GMT; secure; HttpOnly; SameSite=None",
            "x-zendesk-origin-server",
            "classic-app-server-5d6b8cb99d-mc86m",
            "x-request-id",
            "81304672bce3281c-SEA",
            "X-Request-ID",
            "81304672bce3281c-SEA",
            "x-runtime",
            "0.052565",
            "X-Zendesk-Zorg",
            "yes",
            "Content-Encoding",
            "gzip",
            "CF-Cache-Status",
            "DYNAMIC",
            "Report-To",
            "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=xi8333plzKCLhDY9lS6fBEEPep165aIqKXWI%2FByg%2F9p4ObYrOBmhpJeiyD2J2mubmpeK8nofKS5mSd34ibRUenJtMcOXpAofWm9qI9VHLwHDNvoHNyeE7HVXiyhkli1qJ7bTIaFAwA%3D%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}",
            "NEL",
            "{\"success_fraction\":0.01,\"report_to\":\"cf-nel\",\"max_age\":604800}",
            "Set-Cookie",
            "__cfruid=d17e45d8a220c6ccdb09f7237faf4b3b77818090-1696787940; path=/; domain=.nodejsapi.zendesk.com; HttpOnly; Secure; SameSite=None",
            "Server",
            "cloudflare",
            "CF-RAY",
            "81304672bce3281c-SEA"
        ],
        "responseIsBinary": false
    },
    {
        "scope": "https://nodejsapi.zendesk.com:443",
        "method": "GET",
        "path": "/api/v2/organizations/19856666513812.json",
        "body": "",
        "status": 404,
        "response": [
            "1f8b0800000000000003ab564a2d2aca2f52b2520a4a4dce2f4af1cb2f71cb2fcd4b51d2514a492d4e2eca2c28c9cccf034a032514d2c032b50072a6513234000000"
        ],
        "rawHeaders": [
            "Date",
            "Sun, 08 Oct 2023 17:59:00 GMT",
            "Content-Type",
            "application/json; charset=utf-8",
            "Transfer-Encoding",
            "chunked",
            "Connection",
            "close",
            "x-zendesk-api-version",
            "v2",
            "x-zendesk-application-version",
            "v18586",
            "x-frame-options",
            "SAMEORIGIN",
            "x-rate-limit",
            "700",
            "rate-limit",
            "700",
            "x-rate-limit-remaining",
            "697",
            "rate-limit-remaining",
            "697",
            "rate-limit-reset",
            "60",
            "strict-transport-security",
            "max-age=31536000; includeSubDomains",
            "cache-control",
            "no-cache",
            "set-cookie",
            "_zendesk_cookie=BAhJIhl7ImRldmljZV90b2tlbnMiOnt9fQY6BkVU--0bf2100788cb010d0183feca16aaf88ccaf719ca; path=/; expires=Mon, 07 Oct 2024 15:13:59 GMT; secure; HttpOnly; SameSite=None",
            "x-zendesk-origin-server",
            "classic-app-server-5d6b8cb99d-zmzwx",
            "x-request-id",
            "813046741828306f-SEA",
            "X-Request-ID",
            "813046741828306f-SEA",
            "x-runtime",
            "0.053293",
            "X-Zendesk-Zorg",
            "yes",
            "Content-Encoding",
            "gzip",
            "CF-Cache-Status",
            "DYNAMIC",
            "Report-To",
            "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=tOG%2Fd3dTdq0nUsc0zsZwMcQtIaNN7zSNekyW0kyrpaXoqFIyhAPJEJ7q%2B5yrN2ReO0w7j3XUDw2k43dazAfFG1HdPfgrmRwe0GfpLhtf5WMQTwCUIem1QIE8lsNTUwwIe1UeVi3%2BLg%3D%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}",
            "NEL",
            "{\"success_fraction\":0.01,\"report_to\":\"cf-nel\",\"max_age\":604800}",
            "Set-Cookie",
            "__cfruid=d17e45d8a220c6ccdb09f7237faf4b3b77818090-1696787940; path=/; domain=.nodejsapi.zendesk.com; HttpOnly; Secure; SameSite=None",
            "Server",
            "cloudflare",
            "CF-RAY",
            "813046741828306f-SEA"
        ],
        "responseIsBinary": false
    },
    {
        "scope": "https://nodejsapi.zendesk.com:443",
        "method": "GET",
        "path": "/api/v2/organizations/19856666512020.json",
        "body": "",
        "status": 404,
        "response": [
            "1f8b0800000000000003ab564a2d2aca2f52b2520a4a4dce2f4af1cb2f71cb2fcd4b51d2514a492d4e2eca2c28c9cccf034a032514d2c032b50072a6513234000000"
        ],
        "rawHeaders": [
            "Date",
            "Sun, 08 Oct 2023 17:59:00 GMT",
            "Content-Type",
            "application/json; charset=utf-8",
            "Transfer-Encoding",
            "chunked",
            "Connection",
            "close",
            "x-zendesk-api-version",
            "v2",
            "x-zendesk-application-version",
            "v18586",
            "x-frame-options",
            "SAMEORIGIN",
            "x-rate-limit",
            "700",
            "rate-limit",
            "700",
            "x-rate-limit-remaining",
            "696",
            "rate-limit-remaining",
            "696",
            "rate-limit-reset",
            "60",
            "strict-transport-security",
            "max-age=31536000; includeSubDomains",
            "cache-control",
            "no-cache",
            "set-cookie",
            "_zendesk_cookie=BAhJIhl7ImRldmljZV90b2tlbnMiOnt9fQY6BkVU--0bf2100788cb010d0183feca16aaf88ccaf719ca; path=/; expires=Tue, 08 Oct 2024 16:42:17 GMT; secure; HttpOnly; SameSite=None",
            "x-zendesk-origin-server",
            "classic-app-server-5d6b8cb99d-7bvsw",
            "x-request-id",
            "813046756c252846-SEA",
            "X-Request-ID",
            "813046756c252846-SEA",
            "x-runtime",
            "0.054782",
            "X-Zendesk-Zorg",
            "yes",
            "Content-Encoding",
            "gzip",
            "CF-Cache-Status",
            "DYNAMIC",
            "Report-To",
            "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=3S7Uh%2FOhrKpGD53Zp24MQkV%2Bxw2PXedhdaRE6%2BsvAUReuiYRYAWHZR7h1iDzjo8BvSZjBox0Je2rbw9FujjKhYIHIqViVotmpv8dT%2BLZE89%2BnirlUwO1t9WoYZo68iBgh44xKfDeDQ%3D%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}",
            "NEL",
            "{\"success_fraction\":0.01,\"report_to\":\"cf-nel\",\"max_age\":604800}",
            "Set-Cookie",
            "__cfruid=d17e45d8a220c6ccdb09f7237faf4b3b77818090-1696787940; path=/; domain=.nodejsapi.zendesk.com; HttpOnly; Secure; SameSite=None",
            "Server",
            "cloudflare",
            "CF-RAY",
            "813046756c252846-SEA"
        ],
        "responseIsBinary": false
    },
    {
        "scope": "https://nodejsapi.zendesk.com:443",
        "method": "GET",
        "path": "/api/v2/organizations/19856666513300.json",
        "body": "",
        "status": 404,
        "response": [
            "1f8b0800000000000003ab564a2d2aca2f52b2520a4a4dce2f4af1cb2f71cb2fcd4b51d2514a492d4e2eca2c28c9cccf034a032514d2c032b50072a6513234000000"
        ],
        "rawHeaders": [
            "Date",
            "Sun, 08 Oct 2023 17:59:01 GMT",
            "Content-Type",
            "application/json; charset=utf-8",
            "Transfer-Encoding",
            "chunked",
            "Connection",
            "close",
            "x-zendesk-api-version",
            "v2",
            "x-zendesk-application-version",
            "v18586",
            "x-frame-options",
            "SAMEORIGIN",
            "x-rate-limit",
            "700",
            "rate-limit",
            "700",
            "x-rate-limit-remaining",
            "695",
            "rate-limit-remaining",
            "695",
            "rate-limit-reset",
            "59",
            "strict-transport-security",
            "max-age=31536000; includeSubDomains",
            "cache-control",
            "no-cache",
            "set-cookie",
            "_zendesk_cookie=BAhJIhl7ImRldmljZV90b2tlbnMiOnt9fQY6BkVU--0bf2100788cb010d0183feca16aaf88ccaf719ca; path=/; expires=Mon, 07 Oct 2024 20:43:48 GMT; secure; HttpOnly; SameSite=None",
            "x-zendesk-origin-server",
            "classic-app-server-5d6b8cb99d-zvbpc",
            "x-request-id",
            "81304676dec0c375-SEA",
            "X-Request-ID",
            "81304676dec0c375-SEA",
            "x-runtime",
            "0.054979",
            "X-Zendesk-Zorg",
            "yes",
            "Content-Encoding",
            "gzip",
            "CF-Cache-Status",
            "DYNAMIC",
            "Report-To",
            "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=2KxGUlXWy59skZssNe%2BINVwDAG5utYeqfqpmqtv7UxN54P7jLLjtfaDriAYEcW0bsLIR2XQD00zwhNcEfrNhzwyEg6WLMoxGaEs%2B6Iik7nHuc2Fy%2FcEnVmxmbjyQYRPHDRbKwyeYUw%3D%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}",
            "NEL",
            "{\"success_fraction\":0.01,\"report_to\":\"cf-nel\",\"max_age\":604800}",
            "Set-Cookie",
            "__cfruid=1fe289302acc943b8cee3882a7d5aa6b4992e472-1696787941; path=/; domain=.nodejsapi.zendesk.com; HttpOnly; Secure; SameSite=None",
            "Server",
            "cloudflare",
            "CF-RAY",
            "81304676dec0c375-SEA"
        ],
        "responseIsBinary": false
    },
    {
        "scope": "https://nodejsapi.zendesk.com:443",
        "method": "GET",
        "path": "/api/v2/organizations/19856666511892.json",
        "body": "",
        "status": 404,
        "response": [
            "1f8b0800000000000003ab564a2d2aca2f52b2520a4a4dce2f4af1cb2f71cb2fcd4b51d2514a492d4e2eca2c28c9cccf034a032514d2c032b50072a6513234000000"
        ],
        "rawHeaders": [
            "Date",
            "Sun, 08 Oct 2023 17:59:01 GMT",
            "Content-Type",
            "application/json; charset=utf-8",
            "Transfer-Encoding",
            "chunked",
            "Connection",
            "close",
            "x-zendesk-api-version",
            "v2",
            "x-zendesk-application-version",
            "v18586",
            "x-frame-options",
            "SAMEORIGIN",
            "x-rate-limit",
            "700",
            "rate-limit",
            "700",
            "x-rate-limit-remaining",
            "694",
            "rate-limit-remaining",
            "694",
            "rate-limit-reset",
            "59",
            "strict-transport-security",
            "max-age=31536000; includeSubDomains",
            "cache-control",
            "no-cache",
            "set-cookie",
            "_zendesk_cookie=BAhJIhl7ImRldmljZV90b2tlbnMiOnt9fQY6BkVU--0bf2100788cb010d0183feca16aaf88ccaf719ca; path=/; expires=Sun, 06 Oct 2024 20:34:02 GMT; secure; HttpOnly; SameSite=None",
            "x-zendesk-origin-server",
            "classic-app-server-5d6b8cb99d-95hvv",
            "x-request-id",
            "813046783c550903-SEA",
            "X-Request-ID",
            "813046783c550903-SEA",
            "x-runtime",
            "0.056113",
            "X-Zendesk-Zorg",
            "yes",
            "Content-Encoding",
            "gzip",
            "CF-Cache-Status",
            "DYNAMIC",
            "Report-To",
            "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=hIvGN2cI5amxKtMGIu%2Bw%2BAcOOZFKME%2B2UnNwENczKqx768qvCDmKlKo1iruVWpLxAIa9ivJyzSfEDsbXiOEVV6aJdhVTavy%2FZRoh1V43KJZvScNmnQ9rKShR4xrlRNIg2NIBDh6fMw%3D%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}",
            "NEL",
            "{\"success_fraction\":0.01,\"report_to\":\"cf-nel\",\"max_age\":604800}",
            "Set-Cookie",
            "__cfruid=1fe289302acc943b8cee3882a7d5aa6b4992e472-1696787941; path=/; domain=.nodejsapi.zendesk.com; HttpOnly; Secure; SameSite=None",
            "Server",
            "cloudflare",
            "CF-RAY",
            "813046783c550903-SEA"
        ],
        "responseIsBinary": false
    },
    {
        "scope": "https://nodejsapi.zendesk.com:443",
        "method": "GET",
        "path": "/api/v2/organizations/19856666510868.json",
        "body": "",
        "status": 404,
        "response": [
            "1f8b0800000000000003ab564a2d2aca2f52b2520a4a4dce2f4af1cb2f71cb2fcd4b51d2514a492d4e2eca2c28c9cccf034a032514d2c032b50072a6513234000000"
        ],
        "rawHeaders": [
            "Date",
            "Sun, 08 Oct 2023 17:59:01 GMT",
            "Content-Type",
            "application/json; charset=utf-8",
            "Transfer-Encoding",
            "chunked",
            "Connection",
            "close",
            "x-zendesk-api-version",
            "v2",
            "x-zendesk-application-version",
            "v18586",
            "x-frame-options",
            "SAMEORIGIN",
            "x-rate-limit",
            "700",
            "rate-limit",
            "700",
            "x-rate-limit-remaining",
            "693",
            "rate-limit-remaining",
            "693",
            "rate-limit-reset",
            "59",
            "strict-transport-security",
            "max-age=31536000; includeSubDomains",
            "cache-control",
            "no-cache",
            "set-cookie",
            "_zendesk_cookie=BAhJIhl7ImRldmljZV90b2tlbnMiOnt9fQY6BkVU--0bf2100788cb010d0183feca16aaf88ccaf719ca; path=/; expires=Mon, 07 Oct 2024 02:40:48 GMT; secure; HttpOnly; SameSite=None",
            "x-zendesk-origin-server",
            "classic-app-server-5d6b8cb99d-pc4z6",
            "x-request-id",
            "8130467a9df5c4e3-SEA",
            "X-Request-ID",
            "8130467a9df5c4e3-SEA",
            "x-runtime",
            "0.053923",
            "X-Zendesk-Zorg",
            "yes",
            "Content-Encoding",
            "gzip",
            "CF-Cache-Status",
            "DYNAMIC",
            "Report-To",
            "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=RY%2BYMiIKGpjp1uCIiYDIWQdh9lZ%2FpdB1ldOxrwqo%2BPPWImYkJ%2B0%2FZm1%2BN55qoc2AZyae5EhLkNyx7JQIkbRQGzmtXnLLlCnJZWJTZyhEDLgEPKZBEjX4HuDwx%2FYtIFQaV6btQq%2FY%2FA%3D%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}",
            "NEL",
            "{\"success_fraction\":0.01,\"report_to\":\"cf-nel\",\"max_age\":604800}",
            "Set-Cookie",
            "__cfruid=1fe289302acc943b8cee3882a7d5aa6b4992e472-1696787941; path=/; domain=.nodejsapi.zendesk.com; HttpOnly; Secure; SameSite=None",
            "Server",
            "cloudflare",
            "CF-RAY",
            "8130467a9df5c4e3-SEA"
        ],
        "responseIsBinary": false
    }
]
</file>

<file path="test/fixtures/organizations_many_test_create_multiple.json">
[
    {
        "scope": "https://nodejsapi.zendesk.com:443",
        "method": "POST",
        "path": "/api/v2/organizations/create_many.json",
        "body": {
            "organizations": [
                {
                    "name": "Test Organization 0"
                },
                {
                    "name": "Test Organization 1"
                },
                {
                    "name": "Test Organization 2"
                },
                {
                    "name": "Test Organization 3"
                },
                {
                    "name": "Test Organization 4"
                },
                {
                    "name": "Test Organization 5"
                },
                {
                    "name": "Test Organization 6"
                },
                {
                    "name": "Test Organization 7"
                },
                {
                    "name": "Test Organization 8"
                },
                {
                    "name": "Test Organization 9"
                },
                {
                    "name": "Test Organization 10"
                },
                {
                    "name": "Test Organization 11"
                },
                {
                    "name": "Test Organization 12"
                },
                {
                    "name": "Test Organization 13"
                },
                {
                    "name": "Test Organization 14"
                },
                {
                    "name": "Test Organization 15"
                },
                {
                    "name": "Test Organization 16"
                },
                {
                    "name": "Test Organization 17"
                },
                {
                    "name": "Test Organization 18"
                },
                {
                    "name": "Test Organization 19"
                },
                {
                    "name": "Test Organization 20"
                },
                {
                    "name": "Test Organization 21"
                },
                {
                    "name": "Test Organization 22"
                },
                {
                    "name": "Test Organization 23"
                },
                {
                    "name": "Test Organization 24"
                },
                {
                    "name": "Test Organization 25"
                },
                {
                    "name": "Test Organization 26"
                },
                {
                    "name": "Test Organization 27"
                },
                {
                    "name": "Test Organization 28"
                },
                {
                    "name": "Test Organization 29"
                }
            ]
        },
        "status": 200,
        "response": [
            "1f8b08000000000000038d8e410e82301045ef326ba4d896801cc4ad69e904c1d222337521e1eed644e3d6e5645efe7b1b4cd15e880d27826e83d14107677568ac9646f5b5d6d5f164ad52ba91b56e748bce48dd3a2820ad3eb357e6853a214274389159c6f289c121ddca3ece22dfe221c5cf8124fe582f278a212b38b2c9125515b0ac715891726448de17f04d867bc284ef9e397fcd805f20c3c9f387dff717a544a66de9000000"
        ],
        "rawHeaders": [
            "Date",
            "Sun, 08 Oct 2023 17:22:33 GMT",
            "Content-Type",
            "application/json; charset=utf-8",
            "Transfer-Encoding",
            "chunked",
            "Connection",
            "close",
            "x-zendesk-api-version",
            "v2",
            "x-zendesk-application-version",
            "v18586",
            "x-frame-options",
            "SAMEORIGIN",
            "x-rate-limit",
            "700",
            "rate-limit",
            "700",
            "x-rate-limit-remaining",
            "699",
            "rate-limit-remaining",
            "699",
            "rate-limit-reset",
            "27",
            "strict-transport-security",
            "max-age=31536000; includeSubDomains",
            "etag",
            "W/\"c396ee0dd9f8614ce95b03260420d98a\"",
            "cache-control",
            "max-age=0, private, must-revalidate",
            "set-cookie",
            "_zendesk_cookie=BAhJIhl7ImRldmljZV90b2tlbnMiOnt9fQY6BkVU--0bf2100788cb010d0183feca16aaf88ccaf719ca; path=/; expires=Mon, 07 Oct 2024 16:03:48 GMT; secure; HttpOnly; SameSite=None",
            "x-zendesk-origin-server",
            "classic-app-server-5d6b8cb99d-9d9dd",
            "x-request-id",
            "8130110eee89c660-SEA",
            "X-Request-ID",
            "8130110eee89c660-SEA",
            "x-runtime",
            "0.140363",
            "X-Zendesk-Zorg",
            "yes",
            "Content-Encoding",
            "gzip",
            "CF-Cache-Status",
            "DYNAMIC",
            "Report-To",
            "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=%2BTLHoClR8EbzvxNvcZYbRdlwffo%2BBONTDUO4CgrYafdciXH8ukEiIkNOWsS3gZ9BQDbLR8kUdxBtcs8Js8cvCCSUtdSMvLaZozOtfV8bRzut48XNBtKNOsu3CkGR9S8Nf%2FHYsL2avA%3D%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}",
            "NEL",
            "{\"success_fraction\":0.01,\"report_to\":\"cf-nel\",\"max_age\":604800}",
            "Set-Cookie",
            "__cfruid=33b454a463c5e856df3ffe7dd8cc0017642168ed-1696785753; path=/; domain=.nodejsapi.zendesk.com; HttpOnly; Secure; SameSite=None",
            "Server",
            "cloudflare",
            "CF-RAY",
            "8130110eee89c660-SEA"
        ],
        "responseIsBinary": false
    },
    {
        "scope": "https://nodejsapi.zendesk.com:443",
        "method": "GET",
        "path": "/api/v2/job_statuses/V3-7b42a3c544019bb3347254748eda248d.json",
        "body": "",
        "status": 200,
        "response": [
            "1f8b08000000000000038d8ecd0e823010845f85ac57a4404b50aebe8357d3d2a6969f2e698b2610deddbd18af1e677676bed96140f58849a63542b783d3d0c19d9f5b256ac9fb4688b2ba2ac5b968eb46b4e262b4acc545430e6b9828fb4c69891d631eb519a25c5cb119af4d1c8b1e67469abd6af66398c8fe682f86889e10099324082f735802da60228dac487d07c31bc3e8bca5ec4c47690d79b760642233c360a5771b09f4d9a92a294515eb94e8d3afd3741c1f6f0f6c36ff000000"
        ],
        "rawHeaders": [
            "Date",
            "Sun, 08 Oct 2023 17:22:34 GMT",
            "Content-Type",
            "application/json; charset=utf-8",
            "Transfer-Encoding",
            "chunked",
            "Connection",
            "close",
            "x-zendesk-api-version",
            "v2",
            "x-zendesk-application-version",
            "v18586",
            "x-frame-options",
            "SAMEORIGIN",
            "x-rate-limit",
            "700",
            "rate-limit",
            "700",
            "x-rate-limit-remaining",
            "698",
            "rate-limit-remaining",
            "698",
            "rate-limit-reset",
            "26",
            "strict-transport-security",
            "max-age=31536000; includeSubDomains",
            "etag",
            "W/\"c293a7939f9c97f15d3b2ae7999940a5\"",
            "cache-control",
            "max-age=0, private, must-revalidate",
            "set-cookie",
            "_zendesk_cookie=BAhJIhl7ImRldmljZV90b2tlbnMiOnt9fQY6BkVU--0bf2100788cb010d0183feca16aaf88ccaf719ca; path=/; expires=Sun, 06 Oct 2024 20:36:24 GMT; secure; HttpOnly; SameSite=None",
            "x-zendesk-origin-server",
            "classic-app-server-5d6b8cb99d-94w74",
            "x-request-id",
            "8130111768ffc77a-SEA",
            "X-Request-ID",
            "8130111768ffc77a-SEA",
            "x-runtime",
            "0.049177",
            "X-Zendesk-Zorg",
            "yes",
            "Content-Encoding",
            "gzip",
            "CF-Cache-Status",
            "DYNAMIC",
            "Report-To",
            "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=FgVjgTzfaqS66RqZJ1UCAwn5uhP6Nf1WoFAsYxiE6FVnkZgcv6oTzm40rxwyTaHFWhe55nfqo05uBbcSwAOXkY%2BZNy8GbAM1aWiOSDGq1mJfrX4JiPIYxYglPo3fxJOhgrjHWC56Jg%3D%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}",
            "NEL",
            "{\"success_fraction\":0.01,\"report_to\":\"cf-nel\",\"max_age\":604800}",
            "Set-Cookie",
            "__cfruid=9c8f756df6c72183a3b909ff36eccbaa46002820-1696785754; path=/; domain=.nodejsapi.zendesk.com; HttpOnly; Secure; SameSite=None",
            "Server",
            "cloudflare",
            "CF-RAY",
            "8130111768ffc77a-SEA"
        ],
        "responseIsBinary": false
    },
    {
        "scope": "https://nodejsapi.zendesk.com:443",
        "method": "GET",
        "path": "/api/v2/job_statuses/V3-7b42a3c544019bb3347254748eda248d.json",
        "body": "",
        "status": 200,
        "response": [
            "1f8b08000000000000038d934d6ec2301085af12795b20f6ccf82f5beed04d55550eb128299028365d14e5ee3502c432939ded97efcd3c7baea21fdaaf9443be24d15cc5a1138d78c7b56d0902ee349154be6d11c982264b2e7601c87562252ed3b168bf731e5353d7e7a18b7d0ae361f317cf5d4c3f9bdd70aacbbafe85fae51153cda06ffa349c8b451e7228262857629c86fd1453baaf9e058b62321e638eb7824ee538ec63d9dd3e77ab902b90806b25d7d255ca36000deaea4d96affc528897632ea08feb8bb99d62b8136f6928efb4510056234a39af3842e3684148464b8b566bc3221269e0091196ac1f42691caf196e8d48c0242acb6b063d2d05fec87139f007d129a6b524668ecaf3e2d1d2f3acb545e65d3b645a7bc7bb19f286d7b536922924cbabd100337083ccd7535e066f5c8d52cc29d48e472cb3c00b5c3bc32402f08464a59b3fe7f91f585ca99ed9050000"
        ],
        "rawHeaders": [
            "Date",
            "Sun, 08 Oct 2023 17:22:35 GMT",
            "Content-Type",
            "application/json; charset=utf-8",
            "Transfer-Encoding",
            "chunked",
            "Connection",
            "close",
            "x-zendesk-api-version",
            "v2",
            "x-zendesk-application-version",
            "v18586",
            "x-frame-options",
            "SAMEORIGIN",
            "x-rate-limit",
            "700",
            "rate-limit",
            "700",
            "x-rate-limit-remaining",
            "697",
            "rate-limit-remaining",
            "697",
            "rate-limit-reset",
            "25",
            "strict-transport-security",
            "max-age=31536000; includeSubDomains",
            "etag",
            "W/\"75ba92b04ef83af625e0ee86c3370a85\"",
            "cache-control",
            "max-age=0, private, must-revalidate",
            "set-cookie",
            "_zendesk_cookie=BAhJIhl7ImRldmljZV90b2tlbnMiOnt9fQY6BkVU--0bf2100788cb010d0183feca16aaf88ccaf719ca; path=/; expires=Mon, 07 Oct 2024 02:40:48 GMT; secure; HttpOnly; SameSite=None",
            "x-zendesk-origin-server",
            "classic-app-server-5d6b8cb99d-pc4z6",
            "x-request-id",
            "8130111dbd323084-SEA",
            "X-Request-ID",
            "8130111dbd323084-SEA",
            "x-runtime",
            "0.055164",
            "X-Zendesk-Zorg",
            "yes",
            "Content-Encoding",
            "gzip",
            "CF-Cache-Status",
            "DYNAMIC",
            "Report-To",
            "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=Vxx6euxLrqPWpZr%2Bv492rZxxcJOHkW2pdknvUqMzs4FYaly02fvg5USNIWxQEkdgteLnJdVgyUZYVNB7Z3U2o1LS6rEa78QCV3zCHtJ5YuMeYiHcq%2BgNvNb%2BFNJWQz8wU8jV9hwSzQ%3D%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}",
            "NEL",
            "{\"success_fraction\":0.01,\"report_to\":\"cf-nel\",\"max_age\":604800}",
            "Set-Cookie",
            "__cfruid=edc9a9f8223a51aef903dd12dfeb59653696660c-1696785755; path=/; domain=.nodejsapi.zendesk.com; HttpOnly; Secure; SameSite=None",
            "Server",
            "cloudflare",
            "CF-RAY",
            "8130111dbd323084-SEA"
        ],
        "responseIsBinary": false
    },
    {
        "scope": "https://nodejsapi.zendesk.com:443",
        "method": "GET",
        "path": "/api/v2/organizations/show_many.json?ids=19856122753300%2C19856122753684%2C19854650737556%2C19856122754452%2C19856122754324%2C19856122754068%2C19856122753556%2C19856122753428%2C19856122753172%2C19856122753940%2C19854650737684%2C19856122753812%2C19856122753044%2C19856122754196%2C19856122755092%2C19856122755732%2C19856122754836%2C19856122755988%2C19856122754964%2C19856122755604%2C19856122755476%2C19856122756244%2C19856122756372%2C19856122756500%2C19856122756116%2C19856122754580%2C19856122755348%2C19856122755860%2C19856122755220%2C19856122754708",
        "body": "",
        "status": 200,
        "response": [
            "1f8b0800000000000003eddadd6adb301407f05729be4e6359923f5f6237bdda1841c46aead6918d2d97d19077df115bdb047ace6653c4667419ffe348fc3828e7383945dd7050a67951b6e9cc1855df4ed134b451153d58db8f551c9baed68fa3ea9bed8b36b51e9fb6fbee18c3ebf899c75737c74959a459c2799e0ac1d8f671ec4cb4899a3aaaae934d64d451c31a777ab4375f2e3ee386c10de3831a74bdb3cdfe495bd8d2bd6a47fd7619563f6a73715dffb07a30aaddb985ccd4b69b683f6865e1bdcac2229c71719bb05b56dc2579c57925e4575865eaeb3fbea7ee8eaa313bb75b47f31dae68ab9a767c5dc87456bfbd380cddd45fecc2aac3efbb2e9976f78d6e6b084ee7f3e673b0b34222d89010d849c09e812db394e522ff00fb3da1b043692f28ed22e1486943426987da5ea0cd247690404269f3a03d5b5b2665f6b1b64b286d11b4676ba7ac444e129750dad28776fa17dae97fa49d0b4c1b124a3b0ddaf34f924260270924947616b4e7d7765914486d434269e7417b7e6d9719d293b884d22e82f6fcdace18a2ed124abb0cdaf36749504566494808edd06e2f286d99235f922ea1b0bd0ceeab29ed5fa619c746499750da5e06f7b5698b1c69b75d42697b3949d6a69d620fb75d42697b19dcd7a69d24c8b9ed124a3b0cee0bdaedb4406adb25947618dc17f4244262a32424947618dc1768171952db2ea1b4c3e0be409b734c1b124a3b0cee0bceed9c2127894b28ed30b82fd09629d26fbb84d00ebfdc2cc0161c7b02080981eda5ff5b1b36cbb073041202db4bfbb7326cf1c1f3bff784c0f6d2fdad0d5b72a4b25d42607b69fed6869d600fa45c42607be9fdd6865d4aeccf969010d85e5abf7f061b2203dbdff5eaa05fefea07fddc74d3787571df4d06f629d8f92714a0a7541e2b0000"
        ],
        "rawHeaders": [
            "Date",
            "Sun, 08 Oct 2023 17:22:36 GMT",
            "Content-Type",
            "application/json; charset=utf-8",
            "Transfer-Encoding",
            "chunked",
            "Connection",
            "close",
            "x-zendesk-api-version",
            "v2",
            "x-zendesk-application-version",
            "v18586",
            "x-frame-options",
            "SAMEORIGIN",
            "x-rate-limit",
            "700",
            "rate-limit",
            "700",
            "x-rate-limit-remaining",
            "696",
            "rate-limit-remaining",
            "696",
            "rate-limit-reset",
            "24",
            "strict-transport-security",
            "max-age=31536000; includeSubDomains",
            "etag",
            "W/\"560953883edc6e6072103eed6623d66a\"",
            "cache-control",
            "max-age=0, private, must-revalidate",
            "set-cookie",
            "_zendesk_cookie=BAhJIhl7ImRldmljZV90b2tlbnMiOnt9fQY6BkVU--0bf2100788cb010d0183feca16aaf88ccaf719ca; path=/; expires=Sun, 06 Oct 2024 23:24:47 GMT; secure; HttpOnly; SameSite=None",
            "x-zendesk-origin-server",
            "classic-app-server-5d6b8cb99d-n8gsl",
            "x-request-id",
            "8130111f2e9fc63c-SEA",
            "X-Request-ID",
            "8130111f2e9fc63c-SEA",
            "x-runtime",
            "0.121299",
            "X-Zendesk-Zorg",
            "yes",
            "Content-Encoding",
            "gzip",
            "CF-Cache-Status",
            "DYNAMIC",
            "Report-To",
            "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=cAW1liOvGXSEnxZPtDSPrt%2By7vzVQMphDsRPNn068tXKbb6xxaAAkSjWbNli%2BT8fIoKF0%2Fj9JjxsMry9jttokt5FC7QJBp4qrV2D7Go6H%2BH0yEkQdrH%2FVhJZBUdovI8fbWf3SS2REw%3D%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}",
            "NEL",
            "{\"success_fraction\":0.01,\"report_to\":\"cf-nel\",\"max_age\":604800}",
            "Set-Cookie",
            "__cfruid=35fb304b2c204e2c99290abfeb216079575cb1ef-1696785756; path=/; domain=.nodejsapi.zendesk.com; HttpOnly; Secure; SameSite=None",
            "Server",
            "cloudflare",
            "CF-RAY",
            "8130111f2e9fc63c-SEA"
        ],
        "responseIsBinary": false
    }
]
</file>

<file path="test/fixtures/organizations_many_test_update_multiple.json">
[
    {
        "scope": "https://nodejsapi.zendesk.com:443",
        "method": "PUT",
        "path": "/api/v2/organizations/update_many.json",
        "body": {
            "organizations": [
                {
                    "id": 19856122753300,
                    "notes": "updatedFoo"
                },
                {
                    "id": 19856122753684,
                    "notes": "updatedBar"
                }
            ]
        },
        "status": 200,
        "response": [
            "1f8b08000000000000038d8eb11282301044ffe56a241808021f62eb0473201812e0120b19fedd2b646c2d77f6cdbedd60f4ed8d820e91a0d96030d0c0353f95755e64b2eb542655a98ccada735b5daa4a2a5da80e6b4820ae96d94708333542386f70243d0fe91b9d417aa6773f09cee225c5cf8124fe584f47f28e15c107cd1299c0bcfa7e45e28f2e5a9bc0f1189688110db313b7bac7036038daf0e5f7fd03fadfa17ce8000000"
        ],
        "rawHeaders": [
            "Date",
            "Sun, 08 Oct 2023 17:22:36 GMT",
            "Content-Type",
            "application/json; charset=utf-8",
            "Transfer-Encoding",
            "chunked",
            "Connection",
            "close",
            "x-zendesk-api-version",
            "v2",
            "x-zendesk-application-version",
            "v18586",
            "x-frame-options",
            "SAMEORIGIN",
            "x-rate-limit",
            "700",
            "rate-limit",
            "700",
            "x-rate-limit-remaining",
            "695",
            "rate-limit-remaining",
            "695",
            "rate-limit-reset",
            "24",
            "strict-transport-security",
            "max-age=31536000; includeSubDomains",
            "etag",
            "W/\"8c8dece83d6c2650f4e365a382381167\"",
            "cache-control",
            "max-age=0, private, must-revalidate",
            "set-cookie",
            "_zendesk_cookie=BAhJIhl7ImRldmljZV90b2tlbnMiOnt9fQY6BkVU--0bf2100788cb010d0183feca16aaf88ccaf719ca; path=/; expires=Mon, 07 Oct 2024 01:56:41 GMT; secure; HttpOnly; SameSite=None",
            "x-zendesk-origin-server",
            "classic-app-server-5d6b8cb99d-rkn2h",
            "x-request-id",
            "813011210a01eb8f-SEA",
            "X-Request-ID",
            "813011210a01eb8f-SEA",
            "x-runtime",
            "0.094014",
            "X-Zendesk-Zorg",
            "yes",
            "Content-Encoding",
            "gzip",
            "CF-Cache-Status",
            "DYNAMIC",
            "Report-To",
            "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=jIAomHBupQvioiOvwMWM%2FRmrcnPZ3YUSsdkqK%2B14m5VFqZRS5KgCUGmn%2FTLPBvZSYcc152cDXFxxDP08GytF%2BPVbwYAQGIpJ1igKSR9IuomxhSgtMOQnkJPHn3MvZZYfZlcd9%2F2tEQ%3D%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}",
            "NEL",
            "{\"success_fraction\":0.01,\"report_to\":\"cf-nel\",\"max_age\":604800}",
            "Set-Cookie",
            "__cfruid=35fb304b2c204e2c99290abfeb216079575cb1ef-1696785756; path=/; domain=.nodejsapi.zendesk.com; HttpOnly; Secure; SameSite=None",
            "Server",
            "cloudflare",
            "CF-RAY",
            "813011210a01eb8f-SEA"
        ],
        "responseIsBinary": false
    },
    {
        "scope": "https://nodejsapi.zendesk.com:443",
        "method": "GET",
        "path": "/api/v2/job_statuses/V3-693402ff502565d50b1b878825a45fe9.json",
        "body": "",
        "status": 200,
        "response": [
            "1f8b08000000000000038d8eb11282301044ffe56a241808021f62eb0473201812e0120b19fedd2b646c2d77f6cdbedd60f4ed8d820e91a0d96030d0c0353f95755e64b2eb542655a98ccada735b5daa4a2a5da80e6b4820ae96d94708333542386f70243d0fe91b9d417aa6773f09cee225c5cf8124fe584f47f28e15c107cd1299c0bcfa7e45e28f2e5a9bc0f1189688110db313b7bac7036038daf0e5f7fd03fadfa17ce8000000"
        ],
        "rawHeaders": [
            "Date",
            "Sun, 08 Oct 2023 17:22:37 GMT",
            "Content-Type",
            "application/json; charset=utf-8",
            "Transfer-Encoding",
            "chunked",
            "Connection",
            "close",
            "x-zendesk-api-version",
            "v2",
            "x-zendesk-application-version",
            "v18586",
            "x-frame-options",
            "SAMEORIGIN",
            "x-rate-limit",
            "700",
            "rate-limit",
            "700",
            "x-rate-limit-remaining",
            "694",
            "rate-limit-remaining",
            "694",
            "rate-limit-reset",
            "23",
            "strict-transport-security",
            "max-age=31536000; includeSubDomains",
            "etag",
            "W/\"8c8dece83d6c2650f4e365a382381167\"",
            "cache-control",
            "max-age=0, private, must-revalidate",
            "set-cookie",
            "_zendesk_cookie=BAhJIhl7ImRldmljZV90b2tlbnMiOnt9fQY6BkVU--0bf2100788cb010d0183feca16aaf88ccaf719ca; path=/; expires=Sun, 06 Oct 2024 23:39:29 GMT; secure; HttpOnly; SameSite=None",
            "x-zendesk-origin-server",
            "classic-app-server-5d6b8cb99d-lcp4k",
            "x-request-id",
            "813011290f7708a1-SEA",
            "X-Request-ID",
            "813011290f7708a1-SEA",
            "x-runtime",
            "0.066207",
            "X-Zendesk-Zorg",
            "yes",
            "Content-Encoding",
            "gzip",
            "CF-Cache-Status",
            "DYNAMIC",
            "Report-To",
            "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=m%2BTRHKI2IZleAm7Qp4go5MWu8YFOm%2BzJOSjXzaxXov9fzLuKq8Wc9L09rIJlpaAiJb6aVwHLA%2FiV85b%2FMi47vgebLloSWDMJHoI42onL7XuilpBPRrC8Nk%2FbW8ovSJD1o5NtFUMKGg%3D%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}",
            "NEL",
            "{\"success_fraction\":0.01,\"report_to\":\"cf-nel\",\"max_age\":604800}",
            "Set-Cookie",
            "__cfruid=af5122ac8024320e1baed0abfcc8cf836f67fabb-1696785757; path=/; domain=.nodejsapi.zendesk.com; HttpOnly; Secure; SameSite=None",
            "Server",
            "cloudflare",
            "CF-RAY",
            "813011290f7708a1-SEA"
        ],
        "responseIsBinary": false
    },
    {
        "scope": "https://nodejsapi.zendesk.com:443",
        "method": "GET",
        "path": "/api/v2/job_statuses/V3-693402ff502565d50b1b878825a45fe9.json",
        "body": "",
        "status": 200,
        "response": [
            "1f8b08000000000000038d90c16e842010865fc570ad0a822872ed33742f4dd3a0e056eb8a91610f35be7b674d36ed516e33f3f37d93d9c8e8dbcf000662207a2383259a5c445635a264bcef25e3b29256b2b66855ad1497a694bd6b484ae23a61f60b60099ad2d95b3706b30cf98f9bad0bdf79e76f146b7ae7f4cfe1023d41cfc7e06754800783129e9265f5d7d5857014cf75092a96c981b398bde1d45c1d765f9fddc440c2191759c132a692a2d69c6ba19217860fbf20304e80a0f78d980e06746a12176bc0e1f4718aa251b22a38afa5108cfd33bf1da98737c4ae3b168335ba3d3d41aa547982f4b1efbf3fd1ca4d9d010000"
        ],
        "rawHeaders": [
            "Date",
            "Sun, 08 Oct 2023 17:22:38 GMT",
            "Content-Type",
            "application/json; charset=utf-8",
            "Transfer-Encoding",
            "chunked",
            "Connection",
            "close",
            "x-zendesk-api-version",
            "v2",
            "x-zendesk-application-version",
            "v18586",
            "x-frame-options",
            "SAMEORIGIN",
            "x-rate-limit",
            "700",
            "rate-limit",
            "700",
            "x-rate-limit-remaining",
            "693",
            "rate-limit-remaining",
            "693",
            "rate-limit-reset",
            "22",
            "strict-transport-security",
            "max-age=31536000; includeSubDomains",
            "etag",
            "W/\"3c762e58a8f248a69072a451f070ce8a\"",
            "cache-control",
            "max-age=0, private, must-revalidate",
            "set-cookie",
            "_zendesk_cookie=BAhJIhl7ImRldmljZV90b2tlbnMiOnt9fQY6BkVU--0bf2100788cb010d0183feca16aaf88ccaf719ca; path=/; expires=Sun, 06 Oct 2024 20:34:19 GMT; secure; HttpOnly; SameSite=None",
            "x-zendesk-origin-server",
            "classic-app-server-5d6b8cb99d-8m82j",
            "x-request-id",
            "8130112f49d930a8-SEA",
            "X-Request-ID",
            "8130112f49d930a8-SEA",
            "x-runtime",
            "0.056313",
            "X-Zendesk-Zorg",
            "yes",
            "Content-Encoding",
            "gzip",
            "CF-Cache-Status",
            "DYNAMIC",
            "Report-To",
            "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=zr%2BttgPi5xdmL7FhiDpo%2F8s9RSj8ZRBgbEcQtdLh38rynpJ%2BZrY101p5hs0KxzAIgg7v3nalMQanNZYa37UBkuE1jtE4kPvlW%2F2Q8E6CM24y8RrJuK4jMkl1o0xl7GxJcbSqZa9S9w%3D%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}",
            "NEL",
            "{\"success_fraction\":0.01,\"report_to\":\"cf-nel\",\"max_age\":604800}",
            "Set-Cookie",
            "__cfruid=692cd9fce62016df3930b64181ec7867c6100d26-1696785758; path=/; domain=.nodejsapi.zendesk.com; HttpOnly; Secure; SameSite=None",
            "Server",
            "cloudflare",
            "CF-RAY",
            "8130112f49d930a8-SEA"
        ],
        "responseIsBinary": false
    },
    {
        "scope": "https://nodejsapi.zendesk.com:443",
        "method": "GET",
        "path": "/api/v2/organizations/show_many.json?ids=19856122753300%2C19856122753684",
        "body": "",
        "status": 200,
        "response": [
            "1f8b0800000000000003d550bb6e833014fd95c833e161f2208c1dba76c9d4aa4257f8863831d7c8365115c4bff7223515199aa1ead2d1e771cff11984750d90be42d096bc28df06d13b234a710ca1f36592905578f2d0e9f88aa4d09fe3dab609bf938b4ceecc49b62bd69b4ccaed3acfd3343e794b22125a89f29e8904418b9cb1471f162fb31b8b940dfe080e5515747dc6c0950e603c7ec39cde22cd70fc08e8084c3505516f4c246a8710580b8143642af365962ed3629f6d4b29cb7cf5ca297da71e698a49a36c0b9aaaa9ed34cd3b2318401b7f0b221b26e676ecd95a7635cef6ddac4d80e6cb3d9fab3a68348a89611ca3bf197d53ac7e189d9907a367ff7af42770bf1a9d29e26f541d347873750e2fdaf6fe0eac6d4fdc578e9f0fea63c52d030000"
        ],
        "rawHeaders": [
            "Date",
            "Sun, 08 Oct 2023 17:22:39 GMT",
            "Content-Type",
            "application/json; charset=utf-8",
            "Transfer-Encoding",
            "chunked",
            "Connection",
            "close",
            "x-zendesk-api-version",
            "v2",
            "x-zendesk-application-version",
            "v18586",
            "x-frame-options",
            "SAMEORIGIN",
            "x-rate-limit",
            "700",
            "rate-limit",
            "700",
            "x-rate-limit-remaining",
            "692",
            "rate-limit-remaining",
            "692",
            "rate-limit-reset",
            "21",
            "strict-transport-security",
            "max-age=31536000; includeSubDomains",
            "etag",
            "W/\"598ce5e098d304b3fd2a4fb4062d473a\"",
            "cache-control",
            "max-age=0, private, must-revalidate",
            "set-cookie",
            "_zendesk_cookie=BAhJIhl7ImRldmljZV90b2tlbnMiOnt9fQY6BkVU--0bf2100788cb010d0183feca16aaf88ccaf719ca; path=/; expires=Sun, 06 Oct 2024 20:31:56 GMT; secure; HttpOnly; SameSite=None",
            "x-zendesk-origin-server",
            "classic-app-server-5d6b8cb99d-8nxf6",
            "x-request-id",
            "81301130bb3330a5-SEA",
            "X-Request-ID",
            "81301130bb3330a5-SEA",
            "x-runtime",
            "0.099439",
            "X-Zendesk-Zorg",
            "yes",
            "Content-Encoding",
            "gzip",
            "CF-Cache-Status",
            "DYNAMIC",
            "Report-To",
            "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=%2FKgGG%2FiwyZmwNjdrwlIGq9F3y9Y7tdsleWuaLrPTz1U%2BUPN3K5Kw9xGyMT58dfmx4ux9ZkKW%2BCnbgMjvZFdWMaFYwgZViPVkWMcUWPTKMOqujA8S%2FrFuUGXPzhi5BvUJW4MXLOS04A%3D%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}",
            "NEL",
            "{\"success_fraction\":0.01,\"report_to\":\"cf-nel\",\"max_age\":604800}",
            "Set-Cookie",
            "__cfruid=460ae20c011e229796984aa963280181d1114017-1696785759; path=/; domain=.nodejsapi.zendesk.com; HttpOnly; Secure; SameSite=None",
            "Server",
            "cloudflare",
            "CF-RAY",
            "81301130bb3330a5-SEA"
        ],
        "responseIsBinary": false
    }
]
</file>

<file path="test/fixtures/organizations_test_autocomplete_organization.json">
[
    {
        "scope": "https://nodejsapi.zendesk.com:443",
        "method": "GET",
        "path": "/api/v2/organizations/autocomplete.json?name=xTes",
        "body": "",
        "status": 200,
        "response": [
            "1f8b0800000000000003ab56ca2f4a4fcccbac4a2cc9cccf2b56b28a8ed551ca4bad28892f484c4f55b2ca2bcdc9d1512a284a2dcbcc2f2d46114cce2fcd2b51b232a805002842d5b244000000"
        ],
        "rawHeaders": [
            "Date",
            "Sun, 08 Oct 2023 17:18:00 GMT",
            "Content-Type",
            "application/json; charset=utf-8",
            "Transfer-Encoding",
            "chunked",
            "Connection",
            "close",
            "x-zendesk-api-version",
            "v2",
            "x-zendesk-application-version",
            "v18586",
            "x-frame-options",
            "SAMEORIGIN",
            "x-rate-limit",
            "700",
            "rate-limit",
            "700",
            "x-rate-limit-remaining",
            "695",
            "rate-limit-remaining",
            "695",
            "rate-limit-reset",
            "60",
            "strict-transport-security",
            "max-age=31536000; includeSubDomains",
            "etag",
            "W/\"59a18f90e776ea29df3949752102ecfe\"",
            "cache-control",
            "max-age=0, private, must-revalidate",
            "set-cookie",
            "_zendesk_cookie=BAhJIhl7ImRldmljZV90b2tlbnMiOnt9fQY6BkVU--0bf2100788cb010d0183feca16aaf88ccaf719ca; path=/; expires=Mon, 07 Oct 2024 16:03:48 GMT; secure; HttpOnly; SameSite=None",
            "x-zendesk-origin-server",
            "classic-app-server-5d6b8cb99d-9d9dd",
            "x-request-id",
            "81300a650e47ec74-SEA",
            "X-Request-ID",
            "81300a650e47ec74-SEA",
            "x-runtime",
            "0.106503",
            "X-Zendesk-Zorg",
            "yes",
            "Content-Encoding",
            "gzip",
            "CF-Cache-Status",
            "DYNAMIC",
            "Report-To",
            "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=0gLpypucHDIUBx7mLs1Q4TM%2BTb9LkZ7vmdE%2BIQGRLGQfAeChSg9%2FXY9VMqtzvO%2FbLgmD8Q0NwbvZ%2BKiWGo3KBRyDQ9Mo0AStmxCTmcSp%2BhW6ZRvI%2FRkIm6RIPqMtaRpBmlplM2zDlw%3D%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}",
            "NEL",
            "{\"success_fraction\":0.01,\"report_to\":\"cf-nel\",\"max_age\":604800}",
            "Set-Cookie",
            "__cfruid=61e5bdec06c74ed3b43af0edd3efe6b764d2ada5-1696785480; path=/; domain=.nodejsapi.zendesk.com; HttpOnly; Secure; SameSite=None",
            "Server",
            "cloudflare",
            "CF-RAY",
            "81300a650e47ec74-SEA"
        ],
        "responseIsBinary": false
    }
]
</file>

<file path="test/fixtures/organizations_test_create.json">
[
    {
        "scope": "https://nodejsapi.zendesk.com:443",
        "method": "POST",
        "path": "/api/v2/organizations.json",
        "body": {
            "organization": {
                "name": "xTestx Organization node-zendesk"
            }
        },
        "status": 201,
        "response": {
            "organization": {
                "url": "https://nodejsapi.zendesk.com/api/v2/organizations/19442893058196.json",
                "id": 19442893058196,
                "name": "xTestx Organization node-zendesk",
                "shared_tickets": false,
                "shared_comments": false,
                "external_id": null,
                "created_at": "2023-09-23T00:16:16Z",
                "updated_at": "2023-09-23T00:16:16Z",
                "domain_names": [],
                "details": null,
                "notes": null,
                "group_id": null,
                "tags": [],
                "organization_fields": {}
            }
        },
        "rawHeaders": [
            "Date",
            "Sat, 23 Sep 2023 00:16:17 GMT",
            "Content-Type",
            "application/json; charset=utf-8",
            "Content-Length",
            "394",
            "Connection",
            "close",
            "x-zendesk-api-version",
            "v2",
            "x-zendesk-application-version",
            "v18457",
            "x-frame-options",
            "SAMEORIGIN",
            "location",
            "https://nodejsapi.zendesk.com/api/v2/organizations/19442893058196.json",
            "x-rate-limit",
            "700",
            "rate-limit",
            "700",
            "x-rate-limit-remaining",
            "696",
            "rate-limit-remaining",
            "696",
            "rate-limit-reset",
            "43",
            "strict-transport-security",
            "max-age=31536000; includeSubDomains",
            "etag",
            "W/\"63ad5b78e8c602ac6573a8cf2fa664a9\"",
            "cache-control",
            "max-age=0, private, must-revalidate",
            "set-cookie",
            "_zendesk_cookie=BAhJIhl7ImRldmljZV90b2tlbnMiOnt9fQY6BkVU--0bf2100788cb010d0183feca16aaf88ccaf719ca; path=/; expires=Mon, 23 Sep 2024 00:02:20 GMT; secure; HttpOnly; SameSite=None",
            "x-zendesk-origin-server",
            "classic-app-server-59c5666bb9-cck25",
            "x-request-id",
            "80ae9918ce8c30a1-SEA",
            "X-Request-ID",
            "80ae9918ce8c30a1-SEA",
            "x-runtime",
            "0.117232",
            "X-Zendesk-Zorg",
            "yes",
            "CF-Cache-Status",
            "DYNAMIC",
            "Report-To",
            "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=oEqABAop2xiodkKGYnyZ3dx2hz5Va2fdGAfvJwnvan2GkKpfXdIZTE5PXsIYbDm00Mp3giIVsL4aPzx1pO6%2BGU9e8GjslWG%2F%2FjLP%2F0zpRL0EbWXjrIbObeD6hVK8HlYqhfG0rpgr1g%3D%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}",
            "NEL",
            "{\"success_fraction\":0.01,\"report_to\":\"cf-nel\",\"max_age\":604800}",
            "Set-Cookie",
            "__cfruid=80bf5f8d9a0826d36ceb162e1c4f6557c9e7cbaf-1695428177; path=/; domain=.nodejsapi.zendesk.com; HttpOnly; Secure; SameSite=None",
            "Server",
            "cloudflare",
            "CF-RAY",
            "80ae9918ce8c30a1-SEA"
        ],
        "responseIsBinary": false
    }
]
</file>

<file path="test/fixtures/organizations_test_delete_not_found_organization.json">
[
    {
        "scope": "https://nodejsapi.zendesk.com:443",
        "method": "DELETE",
        "path": "/api/v2/organizations/4819136400.json",
        "body": "",
        "status": 404,
        "response": {
            "error": "RecordNotFound",
            "description": "Not found"
        },
        "rawHeaders": [
            "Date",
            "Sat, 23 Sep 2023 00:16:19 GMT",
            "Content-Type",
            "application/json; charset=utf-8",
            "Transfer-Encoding",
            "chunked",
            "Connection",
            "close",
            "x-zendesk-api-version",
            "v2",
            "x-zendesk-application-version",
            "v18457",
            "x-frame-options",
            "SAMEORIGIN",
            "x-rate-limit",
            "700",
            "rate-limit",
            "700",
            "x-rate-limit-remaining",
            "676",
            "rate-limit-remaining",
            "676",
            "rate-limit-reset",
            "41",
            "strict-transport-security",
            "max-age=31536000; includeSubDomains",
            "cache-control",
            "no-cache",
            "set-cookie",
            "_zendesk_cookie=BAhJIhl7ImRldmljZV90b2tlbnMiOnt9fQY6BkVU--0bf2100788cb010d0183feca16aaf88ccaf719ca; path=/; expires=Mon, 23 Sep 2024 00:14:11 GMT; secure; HttpOnly; SameSite=None",
            "x-zendesk-origin-server",
            "classic-app-server-59c5666bb9-xmlw6",
            "x-request-id",
            "80ae99284fd23082-SEA",
            "X-Request-ID",
            "80ae99284fd23082-SEA",
            "x-runtime",
            "0.077380",
            "X-Zendesk-Zorg",
            "yes",
            "CF-Cache-Status",
            "DYNAMIC",
            "Report-To",
            "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=Tb7PtJNa5AMnz4Mj1wsHNkTxZqPmNPs8VIjUPa14YZdxAQ8ksCTxBiCt5QuSk7q1MgxxCQPT9zcj%2B4%2BYOuFQxnL6k7F54qlktmII1T1WxZGbqCbc0ilYeHESITNRBb%2BNandtX3N8cw%3D%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}",
            "NEL",
            "{\"success_fraction\":0.01,\"report_to\":\"cf-nel\",\"max_age\":604800}",
            "Set-Cookie",
            "__cfruid=9fe0aa3da14661fa59e7fde17780f9489d980c47-1695428179; path=/; domain=.nodejsapi.zendesk.com; HttpOnly; Secure; SameSite=None",
            "Server",
            "cloudflare",
            "CF-RAY",
            "80ae99284fd23082-SEA"
        ],
        "responseIsBinary": false
    }
]
</file>

<file path="test/fixtures/organizations_test_delete_organization.json">
[
    {
        "scope": "https://nodejsapi.zendesk.com:443",
        "method": "DELETE",
        "path": "/api/v2/organizations/19442893058196.json",
        "body": "",
        "status": 204,
        "response": "",
        "rawHeaders": [
            "Date",
            "Sat, 23 Sep 2023 00:16:19 GMT",
            "Connection",
            "close",
            "x-zendesk-api-version",
            "v2",
            "x-zendesk-application-version",
            "v18457",
            "x-frame-options",
            "SAMEORIGIN",
            "x-rate-limit",
            "700",
            "rate-limit",
            "700",
            "x-rate-limit-remaining",
            "679",
            "rate-limit-remaining",
            "679",
            "rate-limit-reset",
            "41",
            "strict-transport-security",
            "max-age=31536000; includeSubDomains",
            "cache-control",
            "no-cache",
            "set-cookie",
            "_zendesk_cookie=BAhJIhl7ImRldmljZV90b2tlbnMiOnt9fQY6BkVU--0bf2100788cb010d0183feca16aaf88ccaf719ca; path=/; expires=Mon, 23 Sep 2024 00:03:31 GMT; secure; HttpOnly; SameSite=None",
            "x-zendesk-origin-server",
            "classic-app-server-59c5666bb9-qzpmv",
            "x-request-id",
            "80ae99268831279c-SEA",
            "X-Request-ID",
            "80ae99268831279c-SEA",
            "x-runtime",
            "0.130440",
            "X-Zendesk-Zorg",
            "yes",
            "CF-Cache-Status",
            "DYNAMIC",
            "Report-To",
            "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=KlEG1wItkPDMdIlCbprWKEzU4ZxHzGM%2Fu%2F7%2FOTUWGbb0iScUnaosOajdtri5DT8AcmnHkB6A%2B2%2FhtRaGkiWNrzoVNxuKHw2Mxe6LaKckasanSmAu6oOmIik%2BjwfahFNJ5k682p40iw%3D%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}",
            "NEL",
            "{\"success_fraction\":0.01,\"report_to\":\"cf-nel\",\"max_age\":604800}",
            "Set-Cookie",
            "__cfruid=9fe0aa3da14661fa59e7fde17780f9489d980c47-1695428179; path=/; domain=.nodejsapi.zendesk.com; HttpOnly; Secure; SameSite=None",
            "Server",
            "cloudflare",
            "CF-RAY",
            "80ae99268831279c-SEA"
        ],
        "responseIsBinary": false
    }
]
</file>

<file path="test/fixtures/organizations_test_list_all.json">
[
    {
        "scope": "https://nodejsapi.zendesk.com:443",
        "method": "GET",
        "path": "/api/v2/organizations.json?page%5Bsize%5D=100",
        "body": "",
        "status": 200,
        "response": {
            "organizations": [
                {
                    "url": "https://nodejsapi.zendesk.com/api/v2/organizations/26917874.json",
                    "id": 26917874,
                    "name": "Farrin Reid",
                    "shared_tickets": false,
                    "shared_comments": false,
                    "external_id": null,
                    "created_at": "2014-04-22T18:10:12Z",
                    "updated_at": "2014-04-22T18:10:12Z",
                    "domain_names": [],
                    "details": null,
                    "notes": null,
                    "group_id": null,
                    "tags": [],
                    "organization_fields": {}
                },
                {
                    "url": "https://nodejsapi.zendesk.com/api/v2/organizations/18416262917908.json",
                    "id": 18416262917908,
                    "name": "My Organization",
                    "shared_tickets": false,
                    "shared_comments": false,
                    "external_id": null,
                    "created_at": "2023-08-18T22:44:23Z",
                    "updated_at": "2023-08-18T22:44:23Z",
                    "domain_names": [],
                    "details": null,
                    "notes": null,
                    "group_id": null,
                    "tags": [],
                    "organization_fields": {}
                },
                {
                    "url": "https://nodejsapi.zendesk.com/api/v2/organizations/18416333516052.json",
                    "id": 18416333516052,
                    "name": "My Organization 2",
                    "shared_tickets": false,
                    "shared_comments": false,
                    "external_id": null,
                    "created_at": "2023-08-18T22:45:21Z",
                    "updated_at": "2023-08-18T22:45:21Z",
                    "domain_names": [],
                    "details": null,
                    "notes": null,
                    "group_id": null,
                    "tags": [],
                    "organization_fields": {}
                },
                {
                    "url": "https://nodejsapi.zendesk.com/api/v2/organizations/19442861792916.json",
                    "id": 19442861792916,
                    "name": "Test Organization The Quick Brown Foxx1",
                    "shared_tickets": false,
                    "shared_comments": false,
                    "external_id": null,
                    "created_at": "2023-09-23T00:16:16Z",
                    "updated_at": "2023-09-23T00:16:16Z",
                    "domain_names": [],
                    "details": null,
                    "notes": null,
                    "group_id": null,
                    "tags": [],
                    "organization_fields": {}
                },
                {
                    "url": "https://nodejsapi.zendesk.com/api/v2/organizations/19442893058196.json",
                    "id": 19442893058196,
                    "name": "xTestx Organization node-zendesk",
                    "shared_tickets": false,
                    "shared_comments": false,
                    "external_id": null,
                    "created_at": "2023-09-23T00:16:16Z",
                    "updated_at": "2023-09-23T00:16:16Z",
                    "domain_names": [],
                    "details": null,
                    "notes": null,
                    "group_id": null,
                    "tags": [],
                    "organization_fields": {}
                },
                {
                    "url": "https://nodejsapi.zendesk.com/api/v2/organizations/19442893058452.json",
                    "id": 19442893058452,
                    "name": "Test Organization The Quick Brown Foxx2",
                    "shared_tickets": false,
                    "shared_comments": false,
                    "external_id": null,
                    "created_at": "2023-09-23T00:16:16Z",
                    "updated_at": "2023-09-23T00:16:16Z",
                    "domain_names": [],
                    "details": null,
                    "notes": null,
                    "group_id": null,
                    "tags": [],
                    "organization_fields": {}
                }
            ],
            "meta": {
                "has_more": false,
                "after_cursor": "eyJvIjoiaWQiLCJ2IjoiYVpUeHUrYXVFUUFBIn0=",
                "before_cursor": "eyJvIjoiaWQiLCJ2IjoiYWZLN21nRUFBQUFBIn0="
            },
            "links": {
                "prev": "https://nodejsapi.zendesk.com/api/v2/organizations.json?page%5Bbefore%5D=eyJvIjoiaWQiLCJ2IjoiYWZLN21nRUFBQUFBIn0%3D&page%5Bsize%5D=100",
                "next": "https://nodejsapi.zendesk.com/api/v2/organizations.json?page%5Bafter%5D=eyJvIjoiaWQiLCJ2IjoiYVpUeHUrYXVFUUFBIn0%3D&page%5Bsize%5D=100"
            }
        },
        "rawHeaders": [
            "Date",
            "Sat, 23 Sep 2023 00:16:17 GMT",
            "Content-Type",
            "application/json; charset=utf-8",
            "Transfer-Encoding",
            "chunked",
            "Connection",
            "close",
            "x-zendesk-api-version",
            "v2",
            "x-zendesk-application-version",
            "v18457",
            "x-frame-options",
            "SAMEORIGIN",
            "etag",
            "W/\"3ceb83512b148cacbd7dbf3c9238ce96\"",
            "cache-control",
            "max-age=30, private",
            "x-rate-limit",
            "700",
            "rate-limit",
            "700",
            "x-rate-limit-remaining",
            "694",
            "rate-limit-remaining",
            "694",
            "rate-limit-reset",
            "43",
            "strict-transport-security",
            "max-age=31536000; includeSubDomains",
            "set-cookie",
            "_zendesk_cookie=BAhJIhl7ImRldmljZV90b2tlbnMiOnt9fQY6BkVU--0bf2100788cb010d0183feca16aaf88ccaf719ca; path=/; expires=Sun, 22 Sep 2024 07:09:01 GMT; secure; HttpOnly; SameSite=None",
            "x-zendesk-origin-server",
            "classic-app-server-59c5666bb9-frxs4",
            "x-request-id",
            "80ae991b4fc2ec78-SEA",
            "X-Request-ID",
            "80ae991b4fc2ec78-SEA",
            "x-runtime",
            "0.097471",
            "X-Zendesk-Zorg",
            "yes",
            "CF-Cache-Status",
            "DYNAMIC",
            "Report-To",
            "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=35vuGlRsIgNu1qbIHSTalBwn0HkY%2FGyFG0dETlUhofN7ZI6dyTTWwzQG93Fh1Jk0nEpHA1Td7l5ECe5fys6211L%2Bstw%2BGreoLCdjIHw86tDSzCBNdkNxqdEml2Dp6R5yspcoEUc3Xw%3D%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}",
            "NEL",
            "{\"success_fraction\":0.01,\"report_to\":\"cf-nel\",\"max_age\":604800}",
            "Set-Cookie",
            "__cfruid=80bf5f8d9a0826d36ceb162e1c4f6557c9e7cbaf-1695428177; path=/; domain=.nodejsapi.zendesk.com; HttpOnly; Secure; SameSite=None",
            "Server",
            "cloudflare",
            "CF-RAY",
            "80ae991b4fc2ec78-SEA"
        ],
        "responseIsBinary": false
    },
    {
        "scope": "https://nodejsapi.zendesk.com:443",
        "method": "GET",
        "path": "/api/v2/organizations.json?page%5Bafter%5D=eyJvIjoiaWQiLCJ2IjoiYVpUeHUrYXVFUUFBIn0%3D&page%5Bsize%5D=100",
        "body": "",
        "status": 200,
        "response": {
            "organizations": [],
            "meta": {
                "has_more": false,
                "after_cursor": null,
                "before_cursor": null
            },
            "links": {
                "prev": null,
                "next": null
            }
        },
        "rawHeaders": [
            "Date",
            "Sat, 23 Sep 2023 00:16:17 GMT",
            "Content-Type",
            "application/json; charset=utf-8",
            "Transfer-Encoding",
            "chunked",
            "Connection",
            "close",
            "x-zendesk-api-version",
            "v2",
            "x-zendesk-application-version",
            "v18457",
            "x-frame-options",
            "SAMEORIGIN",
            "etag",
            "W/\"da39a3ee5e6b4b0d3255bfef95601890\"",
            "cache-control",
            "max-age=30, private",
            "x-rate-limit",
            "700",
            "rate-limit",
            "700",
            "x-rate-limit-remaining",
            "693",
            "rate-limit-remaining",
            "693",
            "rate-limit-reset",
            "43",
            "strict-transport-security",
            "max-age=31536000; includeSubDomains",
            "set-cookie",
            "_zendesk_cookie=BAhJIhl7ImRldmljZV90b2tlbnMiOnt9fQY6BkVU--0bf2100788cb010d0183feca16aaf88ccaf719ca; path=/; expires=Sun, 22 Sep 2024 07:08:55 GMT; secure; HttpOnly; SameSite=None",
            "x-zendesk-origin-server",
            "classic-app-server-59c5666bb9-kwkw2",
            "x-request-id",
            "80ae991ddf2127f8-SEA",
            "X-Request-ID",
            "80ae991ddf2127f8-SEA",
            "x-runtime",
            "0.066251",
            "X-Zendesk-Zorg",
            "yes",
            "CF-Cache-Status",
            "DYNAMIC",
            "Report-To",
            "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=Z%2FU9r15WvX3y2POSi5Qdq012uTjdAh6cBLw3MnVRq6yifxkE8RatKvJ82Ef2YKcxqxA9kJHIeTB9CyMLlGz5pgkJ8bXIgkCPVFK%2BOJm%2FljLtHc37BgxjBYicGSCXTcUpdZOEv19Wbw%3D%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}",
            "NEL",
            "{\"success_fraction\":0.01,\"report_to\":\"cf-nel\",\"max_age\":604800}",
            "Set-Cookie",
            "__cfruid=80bf5f8d9a0826d36ceb162e1c4f6557c9e7cbaf-1695428177; path=/; domain=.nodejsapi.zendesk.com; HttpOnly; Secure; SameSite=None",
            "Server",
            "cloudflare",
            "CF-RAY",
            "80ae991ddf2127f8-SEA"
        ],
        "responseIsBinary": false
    }
]
</file>

<file path="test/fixtures/organizations_test_search_organization.json">
[
    {
        "scope": "https://nodejsapi.zendesk.com:443",
        "method": "GET",
        "path": "/api/v2/organizations/search.json?external_id=69420",
        "body": "",
        "status": 200,
        "response": {
            "organizations": [
                {
                    "url": "https://nodejsapi.zendesk.com/api/v2/organizations/19442893058196.json",
                    "id": 19442893058196,
                    "name": "xTestx Organization node-zendesk",
                    "shared_tickets": false,
                    "shared_comments": false,
                    "external_id": "69420",
                    "created_at": "2023-09-23T00:16:16Z",
                    "updated_at": "2023-09-23T00:16:18Z",
                    "domain_names": [],
                    "details": null,
                    "notes": "foo",
                    "group_id": null,
                    "tags": [],
                    "organization_fields": {}
                }
            ],
            "next_page": null,
            "previous_page": null,
            "count": 1
        },
        "rawHeaders": [
            "Date",
            "Sat, 23 Sep 2023 00:16:18 GMT",
            "Content-Type",
            "application/json; charset=utf-8",
            "Transfer-Encoding",
            "chunked",
            "Connection",
            "close",
            "x-zendesk-api-version",
            "v2",
            "x-zendesk-application-version",
            "v18457",
            "x-frame-options",
            "SAMEORIGIN",
            "x-rate-limit",
            "700",
            "rate-limit",
            "700",
            "x-rate-limit-remaining",
            "683",
            "rate-limit-remaining",
            "683",
            "rate-limit-reset",
            "42",
            "strict-transport-security",
            "max-age=31536000; includeSubDomains",
            "etag",
            "W/\"e2378755ca72c07c855b1f0a1182df84\"",
            "cache-control",
            "max-age=0, private, must-revalidate",
            "set-cookie",
            "_zendesk_cookie=BAhJIhl7ImRldmljZV90b2tlbnMiOnt9fQY6BkVU--0bf2100788cb010d0183feca16aaf88ccaf719ca; path=/; expires=Mon, 23 Sep 2024 00:03:46 GMT; secure; HttpOnly; SameSite=None",
            "x-zendesk-origin-server",
            "classic-app-server-59c5666bb9-tvb76",
            "x-request-id",
            "80ae9922cbfbc6c5-SEA",
            "X-Request-ID",
            "80ae9922cbfbc6c5-SEA",
            "x-runtime",
            "0.104008",
            "X-Zendesk-Zorg",
            "yes",
            "CF-Cache-Status",
            "DYNAMIC",
            "Report-To",
            "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=WH7nlGoE%2BrXFJ6ANnEwOGyLimZqZu4UGpmUkovB6y9NWQUGx1fg7XtrAdJFOC86tIE8pJfrCp%2BPjeErOS1yqsKY1BGF6tO%2B%2BANezAli%2FSEEPhvC35jPEmjvOnU0VOsOvllEcD2nirA%3D%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}",
            "NEL",
            "{\"success_fraction\":0.01,\"report_to\":\"cf-nel\",\"max_age\":604800}",
            "Set-Cookie",
            "__cfruid=b0f212948dc69c5976618b752ed96a4ba426e1d0-1695428178; path=/; domain=.nodejsapi.zendesk.com; HttpOnly; Secure; SameSite=None",
            "Server",
            "cloudflare",
            "CF-RAY",
            "80ae9922cbfbc6c5-SEA"
        ],
        "responseIsBinary": false
    }
]
</file>

<file path="test/fixtures/organizations_test_show_single.json">
[
    {
        "scope": "https://nodejsapi.zendesk.com:443",
        "method": "GET",
        "path": "/api/v2/organizations/19442893058196.json",
        "body": "",
        "status": 200,
        "response": {
            "organization": {
                "url": "https://nodejsapi.zendesk.com/api/v2/organizations/19442893058196.json",
                "id": 19442893058196,
                "name": "xTestx Organization node-zendesk",
                "shared_tickets": false,
                "shared_comments": false,
                "external_id": null,
                "created_at": "2023-09-23T00:16:16Z",
                "updated_at": "2023-09-23T00:16:16Z",
                "domain_names": [],
                "details": null,
                "notes": null,
                "group_id": null,
                "tags": [],
                "organization_fields": {}
            }
        },
        "rawHeaders": [
            "Date",
            "Sat, 23 Sep 2023 00:16:17 GMT",
            "Content-Type",
            "application/json; charset=utf-8",
            "Transfer-Encoding",
            "chunked",
            "Connection",
            "close",
            "x-zendesk-api-version",
            "v2",
            "x-zendesk-application-version",
            "v18457",
            "x-frame-options",
            "SAMEORIGIN",
            "x-rate-limit",
            "700",
            "rate-limit",
            "700",
            "x-rate-limit-remaining",
            "690",
            "rate-limit-remaining",
            "690",
            "rate-limit-reset",
            "43",
            "strict-transport-security",
            "max-age=31536000; includeSubDomains",
            "etag",
            "W/\"63ad5b78e8c602ac6573a8cf2fa664a9\"",
            "cache-control",
            "max-age=0, private, must-revalidate",
            "set-cookie",
            "_zendesk_cookie=BAhJIhl7ImRldmljZV90b2tlbnMiOnt9fQY6BkVU--0bf2100788cb010d0183feca16aaf88ccaf719ca; path=/; expires=Mon, 23 Sep 2024 00:03:33 GMT; secure; HttpOnly; SameSite=None",
            "x-zendesk-origin-server",
            "classic-app-server-59c5666bb9-qmrqp",
            "x-request-id",
            "80ae991f6913ec54-SEA",
            "X-Request-ID",
            "80ae991f6913ec54-SEA",
            "x-runtime",
            "0.100362",
            "X-Zendesk-Zorg",
            "yes",
            "CF-Cache-Status",
            "DYNAMIC",
            "Report-To",
            "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=cemIwmpAhUL8EHR5wcsMCmKdzKlm4LuiSmgmRDTyPbRLTo5CJ64gBUpELaaiTb%2FLckDI1IhS%2BMmlkmCU7HzlAmyUib%2B6EAzCIKIn6vgbzV8YyTzpJ4NEjN3nsOekz6vSD1zvATAW3g%3D%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}",
            "NEL",
            "{\"success_fraction\":0.01,\"report_to\":\"cf-nel\",\"max_age\":604800}",
            "Set-Cookie",
            "__cfruid=80bf5f8d9a0826d36ceb162e1c4f6557c9e7cbaf-1695428177; path=/; domain=.nodejsapi.zendesk.com; HttpOnly; Secure; SameSite=None",
            "Server",
            "cloudflare",
            "CF-RAY",
            "80ae991f6913ec54-SEA"
        ],
        "responseIsBinary": false
    }
]
</file>

<file path="test/fixtures/organizations_test_update_organization.json">
[
    {
        "scope": "https://nodejsapi.zendesk.com:443",
        "method": "PUT",
        "path": "/api/v2/organizations/19442893058196.json",
        "body": {
            "organization": {
                "notes": "foo",
                "external_id": "69420"
            }
        },
        "status": 200,
        "response": {
            "organization": {
                "url": "https://nodejsapi.zendesk.com/api/v2/organizations/19442893058196.json",
                "id": 19442893058196,
                "name": "xTestx Organization node-zendesk",
                "shared_tickets": false,
                "shared_comments": false,
                "external_id": "69420",
                "created_at": "2023-09-23T00:16:16Z",
                "updated_at": "2023-09-23T00:16:18Z",
                "domain_names": [],
                "details": null,
                "notes": "foo",
                "group_id": null,
                "tags": [],
                "organization_fields": {}
            }
        },
        "rawHeaders": [
            "Date",
            "Sat, 23 Sep 2023 00:16:18 GMT",
            "Content-Type",
            "application/json; charset=utf-8",
            "Transfer-Encoding",
            "chunked",
            "Connection",
            "close",
            "x-zendesk-api-version",
            "v2",
            "x-zendesk-application-version",
            "v18457",
            "x-frame-options",
            "SAMEORIGIN",
            "x-rate-limit",
            "700",
            "rate-limit",
            "700",
            "x-rate-limit-remaining",
            "687",
            "rate-limit-remaining",
            "687",
            "rate-limit-reset",
            "42",
            "strict-transport-security",
            "max-age=31536000; includeSubDomains",
            "etag",
            "W/\"78912b012399d683537697c21e092cdd\"",
            "cache-control",
            "max-age=0, private, must-revalidate",
            "set-cookie",
            "_zendesk_cookie=BAhJIhl7ImRldmljZV90b2tlbnMiOnt9fQY6BkVU--0bf2100788cb010d0183feca16aaf88ccaf719ca; path=/; expires=Sun, 22 Sep 2024 07:06:30 GMT; secure; HttpOnly; SameSite=None",
            "x-zendesk-origin-server",
            "classic-app-server-59c5666bb9-tthft",
            "x-request-id",
            "80ae99210c61ec88-SEA",
            "X-Request-ID",
            "80ae99210c61ec88-SEA",
            "x-runtime",
            "0.096281",
            "X-Zendesk-Zorg",
            "yes",
            "CF-Cache-Status",
            "DYNAMIC",
            "Report-To",
            "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=mKmwHYlqXdZSGUe5xHdrDUAmdc6Ao3NQ4CiDBGhB0aX6d7NvAjgtS5%2BavYpvtg89ofY93Nm30xD30czonWPZweokSO%2FRnipBGfhsChYYatF67ExjxhyuuTZk13GBvGFZxKY4xIngAA%3D%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}",
            "NEL",
            "{\"success_fraction\":0.01,\"report_to\":\"cf-nel\",\"max_age\":604800}",
            "Set-Cookie",
            "__cfruid=b0f212948dc69c5976618b752ed96a4ba426e1d0-1695428178; path=/; domain=.nodejsapi.zendesk.com; HttpOnly; Secure; SameSite=None",
            "Server",
            "cloudflare",
            "CF-RAY",
            "80ae99210c61ec88-SEA"
        ],
        "responseIsBinary": false
    }
]
</file>

<file path="test/fixtures/pagination_test_cleanup.json">
[
    {
        "scope": "https://nodejsapi.zendesk.com:443",
        "method": "DELETE",
        "path": "/api/v2/organizations/19856049018004.json",
        "body": "",
        "status": 204,
        "response": "",
        "rawHeaders": [
            "Date",
            "Sun, 08 Oct 2023 17:18:07 GMT",
            "Connection",
            "close",
            "x-zendesk-api-version",
            "v2",
            "x-zendesk-application-version",
            "v18586",
            "x-frame-options",
            "SAMEORIGIN",
            "x-rate-limit",
            "700",
            "rate-limit",
            "700",
            "x-rate-limit-remaining",
            "660",
            "rate-limit-remaining",
            "660",
            "rate-limit-reset",
            "53",
            "strict-transport-security",
            "max-age=31536000; includeSubDomains",
            "cache-control",
            "no-cache",
            "set-cookie",
            "_zendesk_cookie=BAhJIhl7ImRldmljZV90b2tlbnMiOnt9fQY6BkVU--0bf2100788cb010d0183feca16aaf88ccaf719ca; path=/; expires=Mon, 07 Oct 2024 16:29:49 GMT; secure; HttpOnly; SameSite=None",
            "x-zendesk-origin-server",
            "classic-app-server-5d6b8cb99d-nj48v",
            "x-request-id",
            "81300a9309d3c382-SEA",
            "X-Request-ID",
            "81300a9309d3c382-SEA",
            "x-runtime",
            "0.097696",
            "X-Zendesk-Zorg",
            "yes",
            "CF-Cache-Status",
            "DYNAMIC",
            "Report-To",
            "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=Szf9%2FIFQMOo0ujcauLanlFEOPwoattwTFxHH6CwvgLshf9WWV8vtdAaZtZesV6u1yZJilC4451oGPmP07ZFoheVvzIjujiEeN%2FDIF6g0SQ1KwP49R%2Fuk8hSVDkLxUYnMYgnHsVNBtA%3D%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}",
            "NEL",
            "{\"success_fraction\":0.01,\"report_to\":\"cf-nel\",\"max_age\":604800}",
            "Set-Cookie",
            "__cfruid=5f265e77549f206c01e88ac6a6cb31fe009a28c4-1696785487; path=/; domain=.nodejsapi.zendesk.com; HttpOnly; Secure; SameSite=None",
            "Server",
            "cloudflare",
            "CF-RAY",
            "81300a9309d3c382-SEA"
        ],
        "responseIsBinary": false
    },
    {
        "scope": "https://nodejsapi.zendesk.com:443",
        "method": "DELETE",
        "path": "/api/v2/organizations/19856027378324.json",
        "body": "",
        "status": 204,
        "response": "",
        "rawHeaders": [
            "Date",
            "Sun, 08 Oct 2023 17:18:08 GMT",
            "Connection",
            "close",
            "x-zendesk-api-version",
            "v2",
            "x-zendesk-application-version",
            "v18586",
            "x-frame-options",
            "SAMEORIGIN",
            "x-rate-limit",
            "700",
            "rate-limit",
            "700",
            "x-rate-limit-remaining",
            "659",
            "rate-limit-remaining",
            "659",
            "rate-limit-reset",
            "52",
            "strict-transport-security",
            "max-age=31536000; includeSubDomains",
            "cache-control",
            "no-cache",
            "set-cookie",
            "_zendesk_cookie=BAhJIhl7ImRldmljZV90b2tlbnMiOnt9fQY6BkVU--0bf2100788cb010d0183feca16aaf88ccaf719ca; path=/; expires=Sun, 06 Oct 2024 20:35:34 GMT; secure; HttpOnly; SameSite=None",
            "x-zendesk-origin-server",
            "classic-app-server-5d6b8cb99d-7ss7s",
            "x-request-id",
            "81300a933ee33075-SEA",
            "X-Request-ID",
            "81300a933ee33075-SEA",
            "x-runtime",
            "0.100311",
            "X-Zendesk-Zorg",
            "yes",
            "CF-Cache-Status",
            "DYNAMIC",
            "Report-To",
            "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=%2BWnxs%2FegAKZI%2FuNfElvLgE0IzBO9uFNX9DvdiXay9ouSgh%2FPLSYKxa9EjYEDcwBS21%2Bvk5BcCydLUzvPa3btYa5t4hZl9641Ky%2FE3mY5T8XeN5eG9gepmgHtURIGQW%2FCCPk4i9dCMQ%3D%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}",
            "NEL",
            "{\"success_fraction\":0.01,\"report_to\":\"cf-nel\",\"max_age\":604800}",
            "Set-Cookie",
            "__cfruid=d5151c920ca79121974dc73065d88cfade1d6bf7-1696785488; path=/; domain=.nodejsapi.zendesk.com; HttpOnly; Secure; SameSite=None",
            "Server",
            "cloudflare",
            "CF-RAY",
            "81300a933ee33075-SEA"
        ],
        "responseIsBinary": false
    }
]
</file>

<file path="test/fixtures/pagination_test_execute.json">
[
    {
        "scope": "https://nodejsapi.zendesk.com:443",
        "method": "GET",
        "path": "/api/v2/organizations.json?page%5Bsize%5D=1",
        "body": "",
        "status": 200,
        "response": [
            "1f8b0800000000000003a591616bc2301086ffca08b84fd5da4ca72bc8c089a0c840d9903946b9b5d71a6d9392a4b229fdefbb3a15f769637e08247779df7bee6ec7944e408a2d58a1a461feeb8e153a653e5b5a9b1bdf75a58a706520178d2dca08cdba11aacca5b7bbe1ee0fb1cb6fefbc4eb7d36aac8c92cc612262fe31e630091992ef10b416f26a869475985982c628b0225ca3a5f231a4064f61aa94a13c8be387452d210d2a6b59a4a9c3428d60e92f5832e74daf556fb6ea9c3f795ddf6bfa1e5f5095228f7efd13a90c840c2aca6a0c6f14410b2235c74252593c3d12ad8afc8cc24272509d8f248805a61125766549a98c0ce9ce9660824c699a86d50575053175158485364a13207e8e37a39512309f8ac9c39857f797f962f2c83d397b1ef6a77446b2d923e8778cc9e71fd2d261a990eb0a8de51a37ff5af87ecff73924586bf7bf516aed41ef8f10b59bc1f5416bc476aff4a825493bbe9c663fd24b61caf20bcf07348b1f030000"
        ],
        "rawHeaders": [
            "Date",
            "Sun, 08 Oct 2023 17:17:59 GMT",
            "Content-Type",
            "application/json; charset=utf-8",
            "Transfer-Encoding",
            "chunked",
            "Connection",
            "close",
            "x-zendesk-api-version",
            "v2",
            "x-zendesk-application-version",
            "v18586",
            "x-frame-options",
            "SAMEORIGIN",
            "etag",
            "W/\"625f98e9a875b80daa825c1d6ebfd91c\"",
            "cache-control",
            "max-age=30, private",
            "x-rate-limit",
            "700",
            "rate-limit",
            "700",
            "x-rate-limit-remaining",
            "695",
            "rate-limit-remaining",
            "695",
            "rate-limit-reset",
            "1",
            "strict-transport-security",
            "max-age=31536000; includeSubDomains",
            "set-cookie",
            "_zendesk_cookie=BAhJIhl7ImRldmljZV90b2tlbnMiOnt9fQY6BkVU--0bf2100788cb010d0183feca16aaf88ccaf719ca; path=/; expires=Tue, 08 Oct 2024 17:17:15 GMT; secure; HttpOnly; SameSite=None",
            "x-zendesk-origin-server",
            "classic-app-server-5d6b8cb99d-jrw7t",
            "x-request-id",
            "81300a5bcc06c3dc-SEA",
            "X-Request-ID",
            "81300a5bcc06c3dc-SEA",
            "x-runtime",
            "0.070469",
            "X-Zendesk-Zorg",
            "yes",
            "Content-Encoding",
            "gzip",
            "CF-Cache-Status",
            "DYNAMIC",
            "Report-To",
            "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=%2Bwui58xXrwyGEHpEspRq4vEViPHZCFIzkdgF%2Fs%2FLNsITs26cv7GGBntkHg%2ByEEepKnHxIZrYW8XtkSnY%2FPqfzLS2wEbCwjWusk%2Ff%2Fk2Up%2FzAJs%2BTt3DlVC8j6zoZhD22Oo3Nkw36lg%3D%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}",
            "NEL",
            "{\"success_fraction\":0.01,\"report_to\":\"cf-nel\",\"max_age\":604800}",
            "Set-Cookie",
            "__cfruid=5923f3e02679a1db6071218af67319639280f993-1696785479; path=/; domain=.nodejsapi.zendesk.com; HttpOnly; Secure; SameSite=None",
            "Server",
            "cloudflare",
            "CF-RAY",
            "81300a5bcc06c3dc-SEA"
        ],
        "responseIsBinary": false
    },
    {
        "scope": "https://nodejsapi.zendesk.com:443",
        "method": "GET",
        "path": "/api/v2/organizations.json?page%5Bafter%5D=eyJvIjoiaWQiLCJ2IjoiYWZLN21nRUFBQUFBIn0%3D&page%5Bsize%5D=1",
        "body": "",
        "status": 200,
        "response": [
            "1f8b0800000000000003a5926d6bc23010c7bfca08b857d5b6f161b520032782b2071c7b601ba364edb546dba424a94ca5df7d57e7a4beda98ef92bbfbdfff77976c895409137cc30c974213ff6d4b0a95129fcc8dc9b56fdb4246b0d02ce7ad0d8808f4b215caccc6bbbda2f691d876bd8edba33dda772ffa8ed75a682988457844fce38c4504cb003d6ed66777b50e58ace74c4114181e2ec1204ecc520d87303a67206a71f834a0044b83ca4414696a9150013358cb0c1a5087b69b8ed774bd074afd4ec7a7ed577429f2e8d79a48668c8ba022add6f28e11308ca7fac7484803874ba26491d7280c4bf6aafa8a8298431a61625b9698cab0219ec99ce920930a3762548153b118a70ac24269a91010d6d3d56421397b9ef1ebab29adce2f4fd3fb48c8ee2def8f678fe3e144380384fe8018fbfc435a5a24e56259a1915cc1ea5f1f60f7e297394ba0d11d7ea334baa3c11f211aedd1f95eabf966a7747124816f7c3acd6ea5a7c294e517a2e0631d2f030000"
        ],
        "rawHeaders": [
            "Date",
            "Sun, 08 Oct 2023 17:17:59 GMT",
            "Content-Type",
            "application/json; charset=utf-8",
            "Transfer-Encoding",
            "chunked",
            "Connection",
            "close",
            "x-zendesk-api-version",
            "v2",
            "x-zendesk-application-version",
            "v18586",
            "x-frame-options",
            "SAMEORIGIN",
            "etag",
            "W/\"110662708546c4f5a95d0e8b75e5ecdb\"",
            "cache-control",
            "max-age=30, private",
            "x-rate-limit",
            "700",
            "rate-limit",
            "700",
            "x-rate-limit-remaining",
            "692",
            "rate-limit-remaining",
            "692",
            "rate-limit-reset",
            "1",
            "strict-transport-security",
            "max-age=31536000; includeSubDomains",
            "set-cookie",
            "_zendesk_cookie=BAhJIhl7ImRldmljZV90b2tlbnMiOnt9fQY6BkVU--0bf2100788cb010d0183feca16aaf88ccaf719ca; path=/; expires=Tue, 08 Oct 2024 16:31:44 GMT; secure; HttpOnly; SameSite=None",
            "x-zendesk-origin-server",
            "classic-app-server-5d6b8cb99d-2jctf",
            "x-request-id",
            "81300a5d8e4230a6-SEA",
            "X-Request-ID",
            "81300a5d8e4230a6-SEA",
            "x-runtime",
            "0.100714",
            "X-Zendesk-Zorg",
            "yes",
            "Content-Encoding",
            "gzip",
            "CF-Cache-Status",
            "DYNAMIC",
            "Report-To",
            "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=8Ze%2FI3CIAAaGP79p4mRQvAoUdDAArvbiPFNPiHRmEInxiByzuba4rIFxjYr9idDrZSpEv5TNCDhJVtjBSLNpHVUR%2By0EpuTna%2F8zv7YRs4Tin%2Fey4iXjX%2BvfUJY7aKZmWhXQOgdycA%3D%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}",
            "NEL",
            "{\"success_fraction\":0.01,\"report_to\":\"cf-nel\",\"max_age\":604800}",
            "Set-Cookie",
            "__cfruid=5923f3e02679a1db6071218af67319639280f993-1696785479; path=/; domain=.nodejsapi.zendesk.com; HttpOnly; Secure; SameSite=None",
            "Server",
            "cloudflare",
            "CF-RAY",
            "81300a5d8e4230a6-SEA"
        ],
        "responseIsBinary": false
    },
    {
        "scope": "https://nodejsapi.zendesk.com:443",
        "method": "GET",
        "path": "/api/v2/organizations.json?page%5Bafter%5D=eyJvIjoiaWQiLCJ2IjoiYVJRdno5Ni9FQUFBIn0%3D&page%5Bsize%5D=1",
        "body": "",
        "status": 200,
        "response": [
            "1f8b0800000000000003a592614fc2301086ff0a69829f806d1d23b88498209240344a448d1ab3547640a16b97b62302d97ff78648c6270d7c6befeebdf7b96bb744e919937cc32c57d290f07d4b322d4848e6d6a626741ca962581896f2c606640c66d998a8c4c1bbb3a2ce91d8f1da4dafe5fb7ee0b5dc803616464952233c26e171a646244b003deed695fb52870ac57233671ae2c8f2c9122c024d99307008a37702b214872f0b5a321115363213a246261a98c55a66d182bad4afbbedbad71e531a3683907a6fe892a5f19f35b14a189751c15a2ce60323601917e6d7482a0b87cb4cab2c2d515836dbabca4b8aa61c448c896d9e632ac18678267366a24469dc89d5194ec5a6385534c9b4511a01613d5c0d168ab39711bfbd1ed2e2fcfa3c7c8c6f860fe3f5657ff4d4ef0ea4db41e84f98629f13a4798d082e97051a4935ac4efa02bb37bf4ad90caa41f707a51af43aff84a8fabd8bbdd6f0cd4ee9e14812dff87c9add4acf85c9f36fa452ed7531030000"
        ],
        "rawHeaders": [
            "Date",
            "Sun, 08 Oct 2023 17:17:59 GMT",
            "Content-Type",
            "application/json; charset=utf-8",
            "Transfer-Encoding",
            "chunked",
            "Connection",
            "close",
            "x-zendesk-api-version",
            "v2",
            "x-zendesk-application-version",
            "v18586",
            "x-frame-options",
            "SAMEORIGIN",
            "etag",
            "W/\"ba7d92a2aac553bb103046efe78bb5a2\"",
            "cache-control",
            "max-age=30, private",
            "x-rate-limit",
            "700",
            "rate-limit",
            "700",
            "x-rate-limit-remaining",
            "690",
            "rate-limit-remaining",
            "690",
            "rate-limit-reset",
            "1",
            "strict-transport-security",
            "max-age=31536000; includeSubDomains",
            "set-cookie",
            "_zendesk_cookie=BAhJIhl7ImRldmljZV90b2tlbnMiOnt9fQY6BkVU--0bf2100788cb010d0183feca16aaf88ccaf719ca; path=/; expires=Sun, 06 Oct 2024 20:36:24 GMT; secure; HttpOnly; SameSite=None",
            "x-zendesk-origin-server",
            "classic-app-server-5d6b8cb99d-94w74",
            "x-request-id",
            "81300a5fbf28eb8f-SEA",
            "X-Request-ID",
            "81300a5fbf28eb8f-SEA",
            "x-runtime",
            "0.070715",
            "X-Zendesk-Zorg",
            "yes",
            "Content-Encoding",
            "gzip",
            "CF-Cache-Status",
            "DYNAMIC",
            "Report-To",
            "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=ldwcyOP1C9XFsNw%2BeKNM4%2Fsm%2Bu%2BwYszUVHjKDz%2FmcCte7prlCQp0tk4IilqgQ6KIw2LIKVq8VFdXJXItCsUdY1%2FVNlWZGqtwtfmyFT8OQ5O6hAxYWBDSnpLJSWZHwI6RcEivpg798Q%3D%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}",
            "NEL",
            "{\"success_fraction\":0.01,\"report_to\":\"cf-nel\",\"max_age\":604800}",
            "Set-Cookie",
            "__cfruid=5923f3e02679a1db6071218af67319639280f993-1696785479; path=/; domain=.nodejsapi.zendesk.com; HttpOnly; Secure; SameSite=None",
            "Server",
            "cloudflare",
            "CF-RAY",
            "81300a5fbf28eb8f-SEA"
        ],
        "responseIsBinary": false
    },
    {
        "scope": "https://nodejsapi.zendesk.com:443",
        "method": "GET",
        "path": "/api/v2/organizations.json?page%5Bafter%5D=eyJvIjoiaWQiLCJ2IjoiYVJSdEJPTy9FQUFBIn0%3D&page%5Bsize%5D=1",
        "body": "",
        "status": 200,
        "response": [
            "1f8b0800000000000003a5926f6bc23010c6bf8a04dcab6affadb31664e044500643981b738c92b5d71a6d9392a46e53fadd77754eeaab0d85bc48eef2dcf3bb4b7644c89472b6a59a09ae48f0ba23a5cc4840965a172a304d2e6258295ab0ee16780c6add8d446ee2d9dc38e689d8b4fbbee7f63cdfbdb12cffbabb52821383b09804a71983709a037a3c82d2ad87468d96dd43855a520971a859b4068d4c09cd141cc3689f036fc4e15383e4340b6b275e669941220954e35daad1c5b11cb7635b1dcb7fb47b012eafbf4097b288ffbc138b9c321ed6b8f56cde30029ab24cfd1a71a1e17848a5288b0685a6e941d59c539830c8624cecaa0a533916c43d595215e642e258b42cb12b9a605761544a252402c2d774335909469f67ecfe6eead4fb97a7e93c9a7b1fb3797fbcb0c6c309b70608fd0e09d639435a1924637c5da39142c2e6ac5fb07ff6db82a6d0f6863f286d6f34f82744db1d5d1db48a6df74a1b5be2f8c697d3ec477a294c557d03836f968134030000"
        ],
        "rawHeaders": [
            "Date",
            "Sun, 08 Oct 2023 17:18:00 GMT",
            "Content-Type",
            "application/json; charset=utf-8",
            "Transfer-Encoding",
            "chunked",
            "Connection",
            "close",
            "x-zendesk-api-version",
            "v2",
            "x-zendesk-application-version",
            "v18586",
            "x-frame-options",
            "SAMEORIGIN",
            "etag",
            "W/\"e7ec8fe69affe0a7b8e6ab015c21cdb5\"",
            "cache-control",
            "max-age=30, private",
            "x-rate-limit",
            "700",
            "rate-limit",
            "700",
            "x-rate-limit-remaining",
            "688",
            "rate-limit-remaining",
            "688",
            "rate-limit-reset",
            "1",
            "strict-transport-security",
            "max-age=31536000; includeSubDomains",
            "set-cookie",
            "_zendesk_cookie=BAhJIhl7ImRldmljZV90b2tlbnMiOnt9fQY6BkVU--0bf2100788cb010d0183feca16aaf88ccaf719ca; path=/; expires=Sun, 06 Oct 2024 20:34:19 GMT; secure; HttpOnly; SameSite=None",
            "x-zendesk-origin-server",
            "classic-app-server-5d6b8cb99d-8m82j",
            "x-request-id",
            "81300a615d0f30a8-SEA",
            "X-Request-ID",
            "81300a615d0f30a8-SEA",
            "x-runtime",
            "0.067178",
            "X-Zendesk-Zorg",
            "yes",
            "Content-Encoding",
            "gzip",
            "CF-Cache-Status",
            "DYNAMIC",
            "Report-To",
            "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=VatL8p%2FCGJvoMOHzmOgdlthjwxfvK8L1FYNH%2BqcnDK8NCzBPFU5HRCtQ4m1HMd0NKslvTh61mJzW83%2F1lL1IMw1s9usVnE1y0lj1X92c2SONK2iBJVSXp5scNElL5xdTFNdxiJw%2FIQ%3D%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}",
            "NEL",
            "{\"success_fraction\":0.01,\"report_to\":\"cf-nel\",\"max_age\":604800}",
            "Set-Cookie",
            "__cfruid=61e5bdec06c74ed3b43af0edd3efe6b764d2ada5-1696785480; path=/; domain=.nodejsapi.zendesk.com; HttpOnly; Secure; SameSite=None",
            "Server",
            "cloudflare",
            "CF-RAY",
            "81300a615d0f30a8-SEA"
        ],
        "responseIsBinary": false
    },
    {
        "scope": "https://nodejsapi.zendesk.com:443",
        "method": "GET",
        "path": "/api/v2/organizations.json?page%5Bafter%5D=eyJvIjoiaWQiLCJ2IjoiYVJUcU5wQU9FZ0FBIn0%3D&page%5Bsize%5D=1",
        "body": "",
        "status": 200,
        "response": [
            "1f8b0800000000000003a5926f6bc23010c6bf8a04dcab6aff48a71664e044500643d08d3946c9da6b8da6494952b729fdeebb3a27f5d586425e247779eef9dd257b22554a05db51c3a4d02478dd93427112909531b90e6c5bc818d69ae6acbd031183deb42399d978b6b79e7d26b6dd7ecfef74fd5ee7d6f15cafbdd652108bb09804e7198b089a017acc419bc663ad46c343815e5105716858b401834809e51a4e6174cf40d4e2f0694009cac3ca48149c5b2452400ddea5064d3cc7ebb45ca7e5f4e66e37c0e5f797e852e4f19f7762995126c28ab61acd1b46c050c6f5af9190064e8754c922af51189a1e55f5318509031e63625f9698cab020eec98aea30930aa76254815dd104bb0aa34269a91010bea6dbc95a32fa3c630ff753afdabf3ce58b68e17fcc16fdf1d2190f27c21920f43b2458e702696911cec4a64223b982ed459fe0f0ea77394da1e90f7f509afe68f04f8866677473d46ab63b285d6c49e01b5f4f7318e9b53065f90ddc415f4c33030000"
        ],
        "rawHeaders": [
            "Date",
            "Sun, 08 Oct 2023 17:18:00 GMT",
            "Content-Type",
            "application/json; charset=utf-8",
            "Transfer-Encoding",
            "chunked",
            "Connection",
            "close",
            "x-zendesk-api-version",
            "v2",
            "x-zendesk-application-version",
            "v18586",
            "x-frame-options",
            "SAMEORIGIN",
            "etag",
            "W/\"ee18a5782f8540ba5a9dc2ba9d32ed33\"",
            "cache-control",
            "max-age=30, private",
            "x-rate-limit",
            "700",
            "rate-limit",
            "700",
            "x-rate-limit-remaining",
            "697",
            "rate-limit-remaining",
            "697",
            "rate-limit-reset",
            "60",
            "strict-transport-security",
            "max-age=31536000; includeSubDomains",
            "set-cookie",
            "_zendesk_cookie=BAhJIhl7ImRldmljZV90b2tlbnMiOnt9fQY6BkVU--0bf2100788cb010d0183feca16aaf88ccaf719ca; path=/; expires=Sun, 06 Oct 2024 20:32:47 GMT; secure; HttpOnly; SameSite=None",
            "x-zendesk-origin-server",
            "classic-app-server-5d6b8cb99d-n5g5b",
            "x-request-id",
            "81300a636bdcc77a-SEA",
            "X-Request-ID",
            "81300a636bdcc77a-SEA",
            "x-runtime",
            "0.075625",
            "X-Zendesk-Zorg",
            "yes",
            "Content-Encoding",
            "gzip",
            "CF-Cache-Status",
            "DYNAMIC",
            "Report-To",
            "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=wkpnfGdiLVPWljkks5QWi8aUzTU5G6JbKG3XfVH6QDLMKvvvwqGZxL0Gugdzr0l1n8EuFilO9Wx0CIOaZFfOV36PeNRcHl%2F8zrnXf%2Bt1CNFJGw4DWnAv9mv827XT0iG9ctOmaRXD%2Fw%3D%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}",
            "NEL",
            "{\"success_fraction\":0.01,\"report_to\":\"cf-nel\",\"max_age\":604800}",
            "Set-Cookie",
            "__cfruid=61e5bdec06c74ed3b43af0edd3efe6b764d2ada5-1696785480; path=/; domain=.nodejsapi.zendesk.com; HttpOnly; Secure; SameSite=None",
            "Server",
            "cloudflare",
            "CF-RAY",
            "81300a636bdcc77a-SEA"
        ],
        "responseIsBinary": false
    },
    {
        "scope": "https://nodejsapi.zendesk.com:443",
        "method": "GET",
        "path": "/api/v2/organizations.json?page%5Bafter%5D=eyJvIjoiaWQiLCJ2IjoiYVpUcU5wQU9FZ0FBIn0%3D&page%5Bsize%5D=1",
        "body": "",
        "status": 200,
        "response": [
            "1f8b0800000000000003a5926f6bc23010c6bf8a04dcab6affd9a90519381194c11074638e51b2f65aa36d5292d46d4abffbaece497db5a19017c95d9e7b7e77c99e089950ce765433c115f15ff7a49029f1c94aeb5cf9a6c945046b4573d6de018f406ddaa1c84c3c9b5bc73c139b76bfe7b95dafe7de5a6ec76aaf95e0c4202c22fe79c6209c66801e7350baf158abd1b03ba8502b2a210a340b37a09129a6a9825318ed33e0b5387c6a909ca641e5c48b34354828816abc4b35ba3896e3b66cab65f5e676d7c7e5f597e852e4d19f77229151c6830ab79acd1b46405396aa5f232e349c0e8914455ea3d03439aaea730a62066984897d59622ac382b8272baa824c481c8b9605764563ec2a080ba9844440f89a6e276bc1e8f38c3ddc4f9d6afff2345d841bef63b6e88f97d67838e1d600a1df21c63a17484b83a48c6f2a34924bd85ef40b0ecf7e97d3049adef007a5e98d06ff8468baa39ba356b1dd4169634b1cdff87a9ac348af8529cb6fcb821e0234030000"
        ],
        "rawHeaders": [
            "Date",
            "Sun, 08 Oct 2023 17:18:00 GMT",
            "Content-Type",
            "application/json; charset=utf-8",
            "Transfer-Encoding",
            "chunked",
            "Connection",
            "close",
            "x-zendesk-api-version",
            "v2",
            "x-zendesk-application-version",
            "v18586",
            "x-frame-options",
            "SAMEORIGIN",
            "etag",
            "W/\"da3545cf20d04f191a29dab19800f3b8\"",
            "cache-control",
            "max-age=30, private",
            "x-rate-limit",
            "700",
            "rate-limit",
            "700",
            "x-rate-limit-remaining",
            "694",
            "rate-limit-remaining",
            "694",
            "rate-limit-reset",
            "60",
            "strict-transport-security",
            "max-age=31536000; includeSubDomains",
            "set-cookie",
            "_zendesk_cookie=BAhJIhl7ImRldmljZV90b2tlbnMiOnt9fQY6BkVU--0bf2100788cb010d0183feca16aaf88ccaf719ca; path=/; expires=Sun, 06 Oct 2024 20:34:02 GMT; secure; HttpOnly; SameSite=None",
            "x-zendesk-origin-server",
            "classic-app-server-5d6b8cb99d-95hvv",
            "x-request-id",
            "81300a650f22c5bf-SEA",
            "X-Request-ID",
            "81300a650f22c5bf-SEA",
            "x-runtime",
            "0.085260",
            "X-Zendesk-Zorg",
            "yes",
            "Content-Encoding",
            "gzip",
            "CF-Cache-Status",
            "DYNAMIC",
            "Report-To",
            "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=aCPcJxQEUWu4NMVyXgmrsMS858LSMbeRzC7sGSWqSY0QQ2B2yvJ08nQ6uENprh8nOL5%2B1CPoNIqYtb5xohsGGbfHOrhwd%2FXIgsIdDx3g3jnOlX3M08UaUr1OAGmq7lWYdN6e3JNsjA%3D%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}",
            "NEL",
            "{\"success_fraction\":0.01,\"report_to\":\"cf-nel\",\"max_age\":604800}",
            "Set-Cookie",
            "__cfruid=61e5bdec06c74ed3b43af0edd3efe6b764d2ada5-1696785480; path=/; domain=.nodejsapi.zendesk.com; HttpOnly; Secure; SameSite=None",
            "Server",
            "cloudflare",
            "CF-RAY",
            "81300a650f22c5bf-SEA"
        ],
        "responseIsBinary": false
    },
    {
        "scope": "https://nodejsapi.zendesk.com:443",
        "method": "GET",
        "path": "/api/v2/organizations.json?page%5Bafter%5D=eyJvIjoiaWQiLCJ2IjoiYVJUck5wQU9FZ0FBIn0%3D&page%5Bsize%5D=1",
        "body": "",
        "status": 200,
        "response": [
            "1f8b0800000000000003a5926d6bc23010c7bfca08b857d53e687d28c8c089a00c86a01b738c92b5d71adb262549dda6f4bbefea9cd4571b0a7991dce57fffdf5db22742c694b31dd54c7045bcd73d29644a3cb2d63a579e697211c246d19cb576c04350492b1099896773eb986762d31ef4dd76cfedb7bb56a7db6f6d94e0c4202c24de79c6209c66801e0b50fae6b156e3a68302b5a612425fb320018d48114d159cc2e89e01afc5e15383e434f52b235ea4a941020954e35daad1c4b19c76d3b69a567f61f73c5cee60852e451efe7927141965dcaf68abd1bc61043465a9fa35e242c3e9104b51e4350a4de3a3aa3e263f62908698d89725a6322c887bb2a6cacf84c4a96859605734c2aefca0904a480484afd976ba118c3ecfd9c3fdcca9f62f4ff93248dc8ff97230595993d1945b43847e8708eb5c202d0d92329e54682497b0bde8131c5efd2ea73134dcd10f4ac31d0fff09d1688f6f8f5ac57607a58d2d717ce3eb690e23bd16a62cbf0120b1505533030000"
        ],
        "rawHeaders": [
            "Date",
            "Sun, 08 Oct 2023 17:18:00 GMT",
            "Content-Type",
            "application/json; charset=utf-8",
            "Transfer-Encoding",
            "chunked",
            "Connection",
            "close",
            "x-zendesk-api-version",
            "v2",
            "x-zendesk-application-version",
            "v18586",
            "x-frame-options",
            "SAMEORIGIN",
            "etag",
            "W/\"116146fe7a4b54d0682820f54e18e8ec\"",
            "cache-control",
            "max-age=30, private",
            "x-rate-limit",
            "700",
            "rate-limit",
            "700",
            "x-rate-limit-remaining",
            "692",
            "rate-limit-remaining",
            "692",
            "rate-limit-reset",
            "60",
            "strict-transport-security",
            "max-age=31536000; includeSubDomains",
            "set-cookie",
            "_zendesk_cookie=BAhJIhl7ImRldmljZV90b2tlbnMiOnt9fQY6BkVU--0bf2100788cb010d0183feca16aaf88ccaf719ca; path=/; expires=Sun, 06 Oct 2024 20:33:26 GMT; secure; HttpOnly; SameSite=None",
            "x-zendesk-origin-server",
            "classic-app-server-5d6b8cb99d-jzwb8",
            "x-request-id",
            "81300a66be6e681d-SEA",
            "X-Request-ID",
            "81300a66be6e681d-SEA",
            "x-runtime",
            "0.077565",
            "X-Zendesk-Zorg",
            "yes",
            "Content-Encoding",
            "gzip",
            "CF-Cache-Status",
            "DYNAMIC",
            "Report-To",
            "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=CaHyGnRX61vCxypHtn57evNNYvoYjB6BNa2ZedpgiMrYWyJE2WhovPOGJ5zr87wP%2Bn8ZVevrns4%2B0HSXw1aBu2lTBllmR925ID2MOMA2cN0dKH5ojmBE21WLeHO%2BUf7%2F4S4kshl2VA%3D%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}",
            "NEL",
            "{\"success_fraction\":0.01,\"report_to\":\"cf-nel\",\"max_age\":604800}",
            "Set-Cookie",
            "__cfruid=61e5bdec06c74ed3b43af0edd3efe6b764d2ada5-1696785480; path=/; domain=.nodejsapi.zendesk.com; HttpOnly; Secure; SameSite=None",
            "Server",
            "cloudflare",
            "CF-RAY",
            "81300a66be6e681d-SEA"
        ],
        "responseIsBinary": false
    },
    {
        "scope": "https://nodejsapi.zendesk.com:443",
        "method": "GET",
        "path": "/api/v2/organizations.json?page%5Bafter%5D=eyJvIjoiaWQiLCJ2IjoiYVpUck5wQU9FZ0FBIn0%3D&page%5Bsize%5D=1",
        "body": "",
        "status": 200,
        "response": [
            "1f8b0800000000000003a5926f6bc23010c6bfca08b857d5fea36a0b327022288321e8c61ca364edb546dba424a9db947ef75d9d93fa6a43212f92bb3cf7fcee923d1132a59ceda866822b12bcee492933129095d6850a4c938b18d68a16acb3031e83da7422919b7836b78e7926366dbfefb93dafef762dcfef76d64a7062101693e03c63104e73408f39287df3d8a871637751a15654421c6a166d402353423305a730dae7c01b71f8d42039cdc2da89975966904802d578976a74712cc76ddb56dbeacfed5e80cbf397e85216f19f77629153c6c31ab79ecd1b46405396a95f232e349c0ea91465d1a0d0343daa9a730a1306598c897d55612ac782b8272baac25c481c8b9625764513ec2a8c4aa9844440f89a6e276bc1e8f38c3ddc4f9d7afff2345d4496f7315bf8e3a5351e4eb83540e87748b0ce05d2ca2019e39b1a8d1412b617fd82c3b3df1534859637fc416979a3c13f215aeee8f6a8556c7750dad812c737be9ee630d26b61aaea1b708e971e34030000"
        ],
        "rawHeaders": [
            "Date",
            "Sun, 08 Oct 2023 17:18:01 GMT",
            "Content-Type",
            "application/json; charset=utf-8",
            "Transfer-Encoding",
            "chunked",
            "Connection",
            "close",
            "x-zendesk-api-version",
            "v2",
            "x-zendesk-application-version",
            "v18586",
            "x-frame-options",
            "SAMEORIGIN",
            "etag",
            "W/\"5df7cdb6d82e56c25ec58aed10c595ab\"",
            "cache-control",
            "max-age=30, private",
            "x-rate-limit",
            "700",
            "rate-limit",
            "700",
            "x-rate-limit-remaining",
            "689",
            "rate-limit-remaining",
            "689",
            "rate-limit-reset",
            "59",
            "strict-transport-security",
            "max-age=31536000; includeSubDomains",
            "set-cookie",
            "_zendesk_cookie=BAhJIhl7ImRldmljZV90b2tlbnMiOnt9fQY6BkVU--0bf2100788cb010d0183feca16aaf88ccaf719ca; path=/; expires=Sun, 06 Oct 2024 20:33:31 GMT; secure; HttpOnly; SameSite=None",
            "x-zendesk-origin-server",
            "classic-app-server-5d6b8cb99d-kh2g7",
            "x-request-id",
            "81300a685e7b08df-SEA",
            "X-Request-ID",
            "81300a685e7b08df-SEA",
            "x-runtime",
            "0.108764",
            "X-Zendesk-Zorg",
            "yes",
            "Content-Encoding",
            "gzip",
            "CF-Cache-Status",
            "DYNAMIC",
            "Report-To",
            "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=tv5Ik4aBhwlZYru6IJKhx7e50hwZ78PSp6a%2BGdKYlZo%2BQmkSLhl94eEcU9g%2FzZxsoX1tVkEiUyk0a0CJprvWG2wJUz7LS9DZKR8kKNF0tFMqoYdTi9eAuelHvfTj8W%2F78cz8imB6QQ%3D%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}",
            "NEL",
            "{\"success_fraction\":0.01,\"report_to\":\"cf-nel\",\"max_age\":604800}",
            "Set-Cookie",
            "__cfruid=74144319c9917f6cd443fb3e71aaf64e420522b1-1696785481; path=/; domain=.nodejsapi.zendesk.com; HttpOnly; Secure; SameSite=None",
            "Server",
            "cloudflare",
            "CF-RAY",
            "81300a685e7b08df-SEA"
        ],
        "responseIsBinary": false
    },
    {
        "scope": "https://nodejsapi.zendesk.com:443",
        "method": "GET",
        "path": "/api/v2/organizations.json?page%5Bafter%5D=eyJvIjoiaWQiLCJ2IjoiYVJUc05wQU9FZ0FBIn0%3D&page%5Bsize%5D=1",
        "body": "",
        "status": 200,
        "response": [
            "1f8b0800000000000003a5926f6bc23010c6bf4a09b8576aff38675790811341190ca74c748c72b3a746dba424a9734abffbaece89beda50c88be42ecf3dbfbb64c7a49a83e05b305c0acd82b71dcb54cc02b63026d5816d0b19e15243caab5b1411ea55752a139bcef6dab3cfc4b67befd7ef1caf516bf835efb6bad452b032e3110bce3365262041f218a236d6f3490d6bb840ab9ff1e9ca6a29f929ac8edc6c3c2aa217a0300a0d65d010e60c628dc7301125284ee2b831a804c461612eb2382eb3a9423074170c197b8e57abb84ec5f1876e23a055f727e492a5d19f772299001761d14131ae778aa0011eeb5f23210d1e0f7325b3f484c2c0fca03a1d5d38e3184794d8e539a5122a487bb6001d2652d1a48ccaa82b985157e134535a2a02c4afdebabb941c467dfef4d8f38afdf8351dc0e86530765b9d89d3697585d324e80f9c519d0ba47999c55cac0a34962a5c5ff431f63fe121853996eaad1f9452bdddfc2744a9d6be396835dfee952eb524e88dafa7d98ff45a983cff06376dd98d47030000"
        ],
        "rawHeaders": [
            "Date",
            "Sun, 08 Oct 2023 17:18:01 GMT",
            "Content-Type",
            "application/json; charset=utf-8",
            "Transfer-Encoding",
            "chunked",
            "Connection",
            "close",
            "x-zendesk-api-version",
            "v2",
            "x-zendesk-application-version",
            "v18586",
            "x-frame-options",
            "SAMEORIGIN",
            "etag",
            "W/\"2190adcac3756a5a969b10a6a2d492d1\"",
            "cache-control",
            "max-age=30, private",
            "x-rate-limit",
            "700",
            "rate-limit",
            "700",
            "x-rate-limit-remaining",
            "686",
            "rate-limit-remaining",
            "686",
            "rate-limit-reset",
            "59",
            "strict-transport-security",
            "max-age=31536000; includeSubDomains",
            "set-cookie",
            "_zendesk_cookie=BAhJIhl7ImRldmljZV90b2tlbnMiOnt9fQY6BkVU--0bf2100788cb010d0183feca16aaf88ccaf719ca; path=/; expires=Tue, 08 Oct 2024 16:43:53 GMT; secure; HttpOnly; SameSite=None",
            "x-zendesk-origin-server",
            "classic-app-server-5d6b8cb99d-wv8ks",
            "x-request-id",
            "81300a6a6ef108fb-SEA",
            "X-Request-ID",
            "81300a6a6ef108fb-SEA",
            "x-runtime",
            "0.084151",
            "X-Zendesk-Zorg",
            "yes",
            "Content-Encoding",
            "gzip",
            "CF-Cache-Status",
            "DYNAMIC",
            "Report-To",
            "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=JImGxUGKwzU4jnmgcDru5RFN9k0jO8BJ2Scc8MBjkussT0Px1vRgdxwOBwSIskxj5sZD94edI2mkrTs8fFRTPxC20MBN2YBSSDpP9UNfiYNiqFrtRJ5I5tg%2Fj6WRYaEJYwTYSlBNJA%3D%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}",
            "NEL",
            "{\"success_fraction\":0.01,\"report_to\":\"cf-nel\",\"max_age\":604800}",
            "Set-Cookie",
            "__cfruid=74144319c9917f6cd443fb3e71aaf64e420522b1-1696785481; path=/; domain=.nodejsapi.zendesk.com; HttpOnly; Secure; SameSite=None",
            "Server",
            "cloudflare",
            "CF-RAY",
            "81300a6a6ef108fb-SEA"
        ],
        "responseIsBinary": false
    },
    {
        "scope": "https://nodejsapi.zendesk.com:443",
        "method": "GET",
        "path": "/api/v2/organizations.json?page%5Bafter%5D=eyJvIjoiaWQiLCJ2IjoiYVpSaWRSY1BFZ0FBIn0%3D&page%5Bsize%5D=1",
        "body": "",
        "status": 200,
        "response": [
            "1f8b0800000000000003a592616bc2301086ff4a09b84fd5a66ab75a90811341190c41dcd6314a664f8db6494952e794fef75d9d93fa6943a11f92bbbcf73e77bd3d916ac104df31c3a5d02478db935c2524204b63321d388e9031ac34cb7863072206bd6ecc64eae0ddd9349d33b1e3767cef96b63bd4f5296d37565a0a62131e93e03c6313c152408f0968633d556a58932558e39ccfd6564fc94f610de476eb6211bd640ae2c860060c62ce59a2e11446a21444250e5b034ab0242acd459e243699296006df3283c64dda6cd55d5aa7fec4bd0bf0f3fc105df22cfef34d2c53c6455476508eeb1d2360184ff4af9190064e9785927956a1306c7154554717cd39243126f64581a9140be2992c998e52a9705246e5d8159b6357d12c575a2a0484afd166b8929c3d8ff9e3c3a8599e5fa7d964fa12b643b73708e9a03714b48bd01f30c73a17480b9b245cac4b349229d85cb418874db8cfd8026a5eef07a5e6f5bbff84a8b5fa3747ade6bb83b2dc0881fff87a9ac348af85298a6f6415af5e47030000"
        ],
        "rawHeaders": [
            "Date",
            "Sun, 08 Oct 2023 17:18:01 GMT",
            "Content-Type",
            "application/json; charset=utf-8",
            "Transfer-Encoding",
            "chunked",
            "Connection",
            "close",
            "x-zendesk-api-version",
            "v2",
            "x-zendesk-application-version",
            "v18586",
            "x-frame-options",
            "SAMEORIGIN",
            "etag",
            "W/\"c6bf0ea61d1d502bfe5fb7ed5343bc1e\"",
            "cache-control",
            "max-age=30, private",
            "x-rate-limit",
            "700",
            "rate-limit",
            "700",
            "x-rate-limit-remaining",
            "684",
            "rate-limit-remaining",
            "684",
            "rate-limit-reset",
            "59",
            "strict-transport-security",
            "max-age=31536000; includeSubDomains",
            "set-cookie",
            "_zendesk_cookie=BAhJIhl7ImRldmljZV90b2tlbnMiOnt9fQY6BkVU--0bf2100788cb010d0183feca16aaf88ccaf719ca; path=/; expires=Tue, 08 Oct 2024 17:13:58 GMT; secure; HttpOnly; SameSite=None",
            "x-zendesk-origin-server",
            "classic-app-server-5d6b8cb99d-lcs9b",
            "x-request-id",
            "81300a6c1938c378-SEA",
            "X-Request-ID",
            "81300a6c1938c378-SEA",
            "x-runtime",
            "0.085118",
            "X-Zendesk-Zorg",
            "yes",
            "Content-Encoding",
            "gzip",
            "CF-Cache-Status",
            "DYNAMIC",
            "Report-To",
            "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=et3t0lo5AB7uOydVb2mBNA%2BTJfr41qJGz6ZQfPhAjjD5KCouGnqARPsDa0cR64qUCDTX8Az%2BuvgrUgffePtr6VJyOV6w1YJRgxW%2FGnZou48M6kJu4ktewZo0SatBV%2Bn2izFDgBkumw%3D%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}",
            "NEL",
            "{\"success_fraction\":0.01,\"report_to\":\"cf-nel\",\"max_age\":604800}",
            "Set-Cookie",
            "__cfruid=74144319c9917f6cd443fb3e71aaf64e420522b1-1696785481; path=/; domain=.nodejsapi.zendesk.com; HttpOnly; Secure; SameSite=None",
            "Server",
            "cloudflare",
            "CF-RAY",
            "81300a6c1938c378-SEA"
        ],
        "responseIsBinary": false
    },
    {
        "scope": "https://nodejsapi.zendesk.com:443",
        "method": "GET",
        "path": "/api/v2/organizations.json?page%5Bafter%5D=eyJvIjoiaWQiLCJ2IjoiYVpTVXZ4Z1BFZ0FBIn0%3D&page%5Bsize%5D=1",
        "body": "",
        "status": 200,
        "response": [
            "1f8b0800000000000003a5926f6bc23010c6bf8a04dc2bb57f5cb75a90811341198c0d71cc31caadbd6ab44d4a92caa6f4bbefea9cd4571b0a7991dce5b9e77797ec98540b107c0b864ba159f0b663854a59c096c6e43ab02c21635c69c879678b2246bdee4432b3e86c6d5ceb446c393ddfbbb13dbfdbf35cffbab3d252b016e3310b4e332d262043f298a2368dc75a8d86e392422f41611c1a1eadd1105302a9c66398ec3314b5387e1a5402d2b07212459ab658a4100cdd05432eaeed76db8eddb6fda9731bd0f27a737229f2f8cf3bb1cc808bb0c2ad66f34e1134c053fd6b24a4c1e361a16491d7280c2c0eaafa9cc284631a5362579694caa820edd912749849456331aaa0ae20a1aec2a8505a2a02c4afc966bc921c5e9ef8c3fdc4adf6afb37c1acd9e253883d1dc1e0dc6c2ee13f4072654e70c69d9622917eb0a8de50a3767fd82fdb3dfe5b0c0a637f841697ac3fe3f219adde1d541abf976af74a825416f7c39cd7ea497c294e537768610dc34030000"
        ],
        "rawHeaders": [
            "Date",
            "Sun, 08 Oct 2023 17:18:02 GMT",
            "Content-Type",
            "application/json; charset=utf-8",
            "Transfer-Encoding",
            "chunked",
            "Connection",
            "close",
            "x-zendesk-api-version",
            "v2",
            "x-zendesk-application-version",
            "v18586",
            "x-frame-options",
            "SAMEORIGIN",
            "etag",
            "W/\"88558d78b8c5929b579b253974f66f40\"",
            "cache-control",
            "max-age=30, private",
            "x-rate-limit",
            "700",
            "rate-limit",
            "700",
            "x-rate-limit-remaining",
            "682",
            "rate-limit-remaining",
            "682",
            "rate-limit-reset",
            "58",
            "strict-transport-security",
            "max-age=31536000; includeSubDomains",
            "set-cookie",
            "_zendesk_cookie=BAhJIhl7ImRldmljZV90b2tlbnMiOnt9fQY6BkVU--0bf2100788cb010d0183feca16aaf88ccaf719ca; path=/; expires=Mon, 07 Oct 2024 02:40:48 GMT; secure; HttpOnly; SameSite=None",
            "x-zendesk-origin-server",
            "classic-app-server-5d6b8cb99d-pc4z6",
            "x-request-id",
            "81300a6dccd9c62c-SEA",
            "X-Request-ID",
            "81300a6dccd9c62c-SEA",
            "x-runtime",
            "0.074136",
            "X-Zendesk-Zorg",
            "yes",
            "Content-Encoding",
            "gzip",
            "CF-Cache-Status",
            "DYNAMIC",
            "Report-To",
            "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=xpaCkJfNhyVbwb1AGLdmNmagavgbazMLRsYEjBFBiwsxH%2Ferup8OffZkl1yYrSl7MwIkhFX1%2BC9mVlcWofrUC99uv53iU3SF%2FyjOCKoVJNHnqb3voei94MMRlpwgBm7hfzq9HTlIVA%3D%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}",
            "NEL",
            "{\"success_fraction\":0.01,\"report_to\":\"cf-nel\",\"max_age\":604800}",
            "Set-Cookie",
            "__cfruid=277bffe91ac2b11f3054b3bc3139ea22416b53fd-1696785482; path=/; domain=.nodejsapi.zendesk.com; HttpOnly; Secure; SameSite=None",
            "Server",
            "cloudflare",
            "CF-RAY",
            "81300a6dccd9c62c-SEA"
        ],
        "responseIsBinary": false
    },
    {
        "scope": "https://nodejsapi.zendesk.com:443",
        "method": "GET",
        "path": "/api/v2/organizations.json?page%5Bafter%5D=eyJvIjoiaWQiLCJ2IjoiYVpTcVRoa1BFZ0FBIn0%3D&page%5Bsize%5D=1",
        "body": "",
        "status": 200,
        "response": [
            "1f8b0800000000000003a5926f6bc23010c6bfca08b8576affb86e5a90811341198c0dd99863945b7badd13429492a9bd2efbeab73a2af3614f222b9cb73cfef2ed930a533907c0d962b6958f8b661a5162c64736b0b133a8e54092e0c14bcbd4699a059b663953b747656be732476bc5e37b876836ea7175c797e7b6194644dc613161e679a4c428ee43145632f1e0e6a5cf44860e6a031892c8f976809290561701f26f71ce5411c3f2d6a0922aa8d64294493c51ac1d25db064e2bb7ea7e5b92db73bf56e425a416f462e6591fc792751397019d5b4f568de298216b830bf465259dc1f32adcae280c242b6531d8e294a398a84129baaa2544e0569cfe660a25c699a8ad5257505297515c5a5364a13207e4d56e385e2f0f2c8efef267ebd7f7d9e4c63f1a4c01b8c66ee6830966e9fa03f30a53a2748ab26135c2e6b3456685c9df409b6af7e5b40868d60f083d20886fd7f42343ac3cb9dd6f0f556e9514b92def87c9aed48cf85a9aa6fd1d01aec33030000"
        ],
        "rawHeaders": [
            "Date",
            "Sun, 08 Oct 2023 17:18:02 GMT",
            "Content-Type",
            "application/json; charset=utf-8",
            "Transfer-Encoding",
            "chunked",
            "Connection",
            "close",
            "x-zendesk-api-version",
            "v2",
            "x-zendesk-application-version",
            "v18586",
            "x-frame-options",
            "SAMEORIGIN",
            "etag",
            "W/\"3609316aa469f76f5d56b0748cd9eeec\"",
            "cache-control",
            "max-age=30, private",
            "x-rate-limit",
            "700",
            "rate-limit",
            "700",
            "x-rate-limit-remaining",
            "681",
            "rate-limit-remaining",
            "681",
            "rate-limit-reset",
            "58",
            "strict-transport-security",
            "max-age=31536000; includeSubDomains",
            "set-cookie",
            "_zendesk_cookie=BAhJIhl7ImRldmljZV90b2tlbnMiOnt9fQY6BkVU--0bf2100788cb010d0183feca16aaf88ccaf719ca; path=/; expires=Tue, 08 Oct 2024 16:43:57 GMT; secure; HttpOnly; SameSite=None",
            "x-zendesk-origin-server",
            "classic-app-server-5d6b8cb99d-ntqn5",
            "x-request-id",
            "81300a708a6dec08-SEA",
            "X-Request-ID",
            "81300a708a6dec08-SEA",
            "x-runtime",
            "0.074063",
            "X-Zendesk-Zorg",
            "yes",
            "Content-Encoding",
            "gzip",
            "CF-Cache-Status",
            "DYNAMIC",
            "Report-To",
            "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=poq24bO2nwLGmhcundv6kcsdpUiszkijVItyCqiELztDAh41GIr2Q4ThI0TrLYk8fUYU8t%2Bs%2BOBJh63nCg5YGH5EmWs9CVfcet52sAqjhjHwu08iRb6fV72J42dhYu8Ff30FSzjtqg%3D%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}",
            "NEL",
            "{\"success_fraction\":0.01,\"report_to\":\"cf-nel\",\"max_age\":604800}",
            "Set-Cookie",
            "__cfruid=277bffe91ac2b11f3054b3bc3139ea22416b53fd-1696785482; path=/; domain=.nodejsapi.zendesk.com; HttpOnly; Secure; SameSite=None",
            "Server",
            "cloudflare",
            "CF-RAY",
            "81300a708a6dec08-SEA"
        ],
        "responseIsBinary": false
    },
    {
        "scope": "https://nodejsapi.zendesk.com:443",
        "method": "GET",
        "path": "/api/v2/organizations.json?page%5Bafter%5D=eyJvIjoiaWQiLCJ2IjoiYVJTclRoa1BFZ0FBIn0%3D&page%5Bsize%5D=1",
        "body": "",
        "status": 200,
        "response": [
            "1f8b0800000000000003a592616bc2301086ffca08b84f6a535db75a90811341198c0dd99863945b7b6a344d4a92caa6f4bfefea9ce8a70dfd96bbcb7bef93bb6c98363350620d4e686559f4b66185912c6273e7721b799ed2292e2ce4a2b94695a25d36139d79147bab967724f6fc4e185cf3206c7782e08a3717562b56672265d171a5ce1464481e63b4eee2e1a0c785ef93c2cec1601a3b912cd111d314a4c57d9aec33540779fc746814c8b872528594759618044777c1914b8bb7da0d9f377838f66f223f8c389f904b91a77fde49750642c5156e359b77caa00321edaf91d20ef7c1cce8223fa07030dba90ee7144f05ca940a9bb2a452460de9cce660e34c1b1a8b3305bd0aa6f4aa38298cd58600f16bb41a2eb4809747717f376a55e7d7e77c9cc8270d7e6f30e183de50f12e417fe094fa9c202deb4c0ab5acd0586e7075d22fd8aefd368719d682de0f4a2de877ff09516bf72f775a2bd65b65f52314edf87c9aed48cf8529cb6fd16599d634030000"
        ],
        "rawHeaders": [
            "Date",
            "Sun, 08 Oct 2023 17:18:02 GMT",
            "Content-Type",
            "application/json; charset=utf-8",
            "Transfer-Encoding",
            "chunked",
            "Connection",
            "close",
            "x-zendesk-api-version",
            "v2",
            "x-zendesk-application-version",
            "v18586",
            "x-frame-options",
            "SAMEORIGIN",
            "etag",
            "W/\"7ed051aa65bba210d9c408712508535a\"",
            "cache-control",
            "max-age=30, private",
            "x-rate-limit",
            "700",
            "rate-limit",
            "700",
            "x-rate-limit-remaining",
            "680",
            "rate-limit-remaining",
            "680",
            "rate-limit-reset",
            "58",
            "strict-transport-security",
            "max-age=31536000; includeSubDomains",
            "set-cookie",
            "_zendesk_cookie=BAhJIhl7ImRldmljZV90b2tlbnMiOnt9fQY6BkVU--0bf2100788cb010d0183feca16aaf88ccaf719ca; path=/; expires=Sun, 06 Oct 2024 20:34:17 GMT; secure; HttpOnly; SameSite=None",
            "x-zendesk-origin-server",
            "classic-app-server-5d6b8cb99d-g6kk5",
            "x-request-id",
            "81300a722cc5ec54-SEA",
            "X-Request-ID",
            "81300a722cc5ec54-SEA",
            "x-runtime",
            "0.080790",
            "X-Zendesk-Zorg",
            "yes",
            "Content-Encoding",
            "gzip",
            "CF-Cache-Status",
            "DYNAMIC",
            "Report-To",
            "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=LjNx4S2OqWt%2FJDSqMNHgloMHHIsc6e6zPcSHAHYgfj5WVQWdapcnXyiZ5TaESaMNK7V%2FgkWxmQ6pewoupXXIYRK2ze9BRNQlf939AfTfqb891V38Y8NflM32I3Qy89CW%2Fx1SVGoHYA%3D%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}",
            "NEL",
            "{\"success_fraction\":0.01,\"report_to\":\"cf-nel\",\"max_age\":604800}",
            "Set-Cookie",
            "__cfruid=277bffe91ac2b11f3054b3bc3139ea22416b53fd-1696785482; path=/; domain=.nodejsapi.zendesk.com; HttpOnly; Secure; SameSite=None",
            "Server",
            "cloudflare",
            "CF-RAY",
            "81300a722cc5ec54-SEA"
        ],
        "responseIsBinary": false
    },
    {
        "scope": "https://nodejsapi.zendesk.com:443",
        "method": "GET",
        "path": "/api/v2/organizations.json?page%5Bafter%5D=eyJvIjoiaWQiLCJ2IjoiYVpTclRoa1BFZ0FBIn0%3D&page%5Bsize%5D=1",
        "body": "",
        "status": 200,
        "response": [
            "1f8b0800000000000003a5926f6bc23010c6bfca08b8576aff485d2dc8c089a00cc6866ccc31caadbdd6689b9424954de977dfd539a9af36f45dee2ecf3dbfdc65c7a44a41f02d182e8566c1db8e952a63015b1a53e8c0b2848c71a5a1e0dd2d8a18f5ba1bc9dca2d8dab8d689d87206bed7b73dbf37f0fa7dbfbbd252b036e3310b4e2b6d262047f298a336570f8d1e570e09f41214c6a1e1d11a0d212590693ca6c93d47d1c8e3a74125200b6b235166599b450ac1d05d3064e2da6eafe3d81ddb9f3b3781e307b6bd2097b288ffbc13cb1cb8086bda7a34ef9441033cd3bf46421a3c06a99265d1a030901e54cd318509c72ca6c2aeaaa89453433ab325e830978aa6625449af82845e1546a5d25211207ecd36d395e4f0f2c8efef666e7d7e7d9ecd23e74982339a2cecc9682aec21417f60427dce90566d9671b1aed158a17073d627d86ffdb680145bdee807a5e58d87ff8468f5c6d707ade6dbbdb2fe1182767c39cd7ea497c254d5371846034e33030000"
        ],
        "rawHeaders": [
            "Date",
            "Sun, 08 Oct 2023 17:18:03 GMT",
            "Content-Type",
            "application/json; charset=utf-8",
            "Transfer-Encoding",
            "chunked",
            "Connection",
            "close",
            "x-zendesk-api-version",
            "v2",
            "x-zendesk-application-version",
            "v18586",
            "x-frame-options",
            "SAMEORIGIN",
            "etag",
            "W/\"3ef61973eef6763686d16c1bc24b7b4e\"",
            "cache-control",
            "max-age=30, private",
            "x-rate-limit",
            "700",
            "rate-limit",
            "700",
            "x-rate-limit-remaining",
            "679",
            "rate-limit-remaining",
            "679",
            "rate-limit-reset",
            "57",
            "strict-transport-security",
            "max-age=31536000; includeSubDomains",
            "set-cookie",
            "_zendesk_cookie=BAhJIhl7ImRldmljZV90b2tlbnMiOnt9fQY6BkVU--0bf2100788cb010d0183feca16aaf88ccaf719ca; path=/; expires=Tue, 08 Oct 2024 16:13:51 GMT; secure; HttpOnly; SameSite=None",
            "x-zendesk-origin-server",
            "classic-app-server-5d6b8cb99d-ldv9f",
            "x-request-id",
            "81300a73bab4c654-SEA",
            "X-Request-ID",
            "81300a73bab4c654-SEA",
            "x-runtime",
            "0.085616",
            "X-Zendesk-Zorg",
            "yes",
            "Content-Encoding",
            "gzip",
            "CF-Cache-Status",
            "DYNAMIC",
            "Report-To",
            "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=xyHbmeA4fPnCCHdWGNcNN9AcUjkP0nGI9M5tHaJyYw4cOwR%2FGwelKb3nzziPCRSWgvBU9sAyn5HcsAyEC0ZOu7YsLueEplEGBXfbJuOArI2IpFKXk%2F9FIw1LrnMSFQ6AgpzWx8BTOw%3D%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}",
            "NEL",
            "{\"success_fraction\":0.01,\"report_to\":\"cf-nel\",\"max_age\":604800}",
            "Set-Cookie",
            "__cfruid=271cf648afb4be4245eac228e93bbadf0b25ac8e-1696785483; path=/; domain=.nodejsapi.zendesk.com; HttpOnly; Secure; SameSite=None",
            "Server",
            "cloudflare",
            "CF-RAY",
            "81300a73bab4c654-SEA"
        ],
        "responseIsBinary": false
    },
    {
        "scope": "https://nodejsapi.zendesk.com:443",
        "method": "GET",
        "path": "/api/v2/organizations.json?page%5Bafter%5D=eyJvIjoiaWQiLCJ2IjoiYVJTc1Roa1BFZ0FBIn0%3D&page%5Bsize%5D=1",
        "body": "",
        "status": 200,
        "response": [
            "1f8b0800000000000003a5926d6bc23010c7bf8a04dcab6a1fa43e1464e0445006634336e618e5d65e6bb44d4a92caa6f4bbefea9ce8ab0d7d97dcddfffebfbb64c7a44a41f02d182e8566c1db8e952a63015b1a53e8c0b6858c71a5a1e0ed2d8a18f5ba1dc9dca6bbbdf1ec33b1ed0efa7ed7f1fb9d81df1b74db2b2d05b3188f59709eb198801cc9638eda341e4e7a347c12e825288c43c3a3351a424a20d3780c937b8ee2248e9f0695802cac8d449965168b1482a15a3064e2395ea7e53a2da73f777b81db0f1c67412e6511ff5913cb1cb8086bda7a35ef1441033cd3bf46421a3c5e5225cbe284c2407a509dae294c38663125765545a99c1ad2992d4187b954b415a34a9a0a129a2a8c4aa5a52240fc9a6da62bc9e1e591dfdfcdbcfafcfa5ccc23f749823b9a2c9cc9682a9c21417f60427d2e905616cbb858d768ac50b8b9e813ec5ffdb680149bfee807a5e98f87ff846876c63707ade6dbbdd2a59104bdf1f534fb955e0b5355df4c4f9a1c33030000"
        ],
        "rawHeaders": [
            "Date",
            "Sun, 08 Oct 2023 17:18:03 GMT",
            "Content-Type",
            "application/json; charset=utf-8",
            "Transfer-Encoding",
            "chunked",
            "Connection",
            "close",
            "x-zendesk-api-version",
            "v2",
            "x-zendesk-application-version",
            "v18586",
            "x-frame-options",
            "SAMEORIGIN",
            "etag",
            "W/\"7876f8664e5c5b00c6faaa027aeb9242\"",
            "cache-control",
            "max-age=30, private",
            "x-rate-limit",
            "700",
            "rate-limit",
            "700",
            "x-rate-limit-remaining",
            "677",
            "rate-limit-remaining",
            "677",
            "rate-limit-reset",
            "57",
            "strict-transport-security",
            "max-age=31536000; includeSubDomains",
            "set-cookie",
            "_zendesk_cookie=BAhJIhl7ImRldmljZV90b2tlbnMiOnt9fQY6BkVU--0bf2100788cb010d0183feca16aaf88ccaf719ca; path=/; expires=Tue, 08 Oct 2024 17:13:58 GMT; secure; HttpOnly; SameSite=None",
            "x-zendesk-origin-server",
            "classic-app-server-5d6b8cb99d-7lt6s",
            "x-request-id",
            "81300a75fd93ec1b-SEA",
            "X-Request-ID",
            "81300a75fd93ec1b-SEA",
            "x-runtime",
            "0.089384",
            "X-Zendesk-Zorg",
            "yes",
            "Content-Encoding",
            "gzip",
            "CF-Cache-Status",
            "DYNAMIC",
            "Report-To",
            "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=9qmhClXAZR8d6l1EPhShS7xnjcX2wiqAI%2BZC6vz63MECW7bRCpBl%2BlSu0jRX55Hvo9j4rlRXFPd%2FhWql2yhpzQQ5tZLZW4ELsy2Rw%2BNkr%2BktOP2qljPuw5%2BEI59%2BLf24eiHG%2F6gD6w%3D%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}",
            "NEL",
            "{\"success_fraction\":0.01,\"report_to\":\"cf-nel\",\"max_age\":604800}",
            "Set-Cookie",
            "__cfruid=271cf648afb4be4245eac228e93bbadf0b25ac8e-1696785483; path=/; domain=.nodejsapi.zendesk.com; HttpOnly; Secure; SameSite=None",
            "Server",
            "cloudflare",
            "CF-RAY",
            "81300a75fd93ec1b-SEA"
        ],
        "responseIsBinary": false
    },
    {
        "scope": "https://nodejsapi.zendesk.com:443",
        "method": "GET",
        "path": "/api/v2/organizations.json?page%5Bafter%5D=eyJvIjoiaWQiLCJ2IjoiYVpTc1Roa1BFZ0FBIn0%3D&page%5Bsize%5D=1",
        "body": "",
        "status": 200,
        "response": [
            "1f8b0800000000000003a5926f6bc23010c6bfca08b8576affb86eb52003278232181bb231c728b7f65aa36d52925436a5df7d57e7a4bedad077c9dd3df7fcee922d932a05c13760b8149a056f5b56aa8c056c614ca103cb1232c6a5868277372862d4ab6e24738beed6dab58ec496d3f7bd6bdbf37b7dafef5e75975a0ad6663c66c171a6cd04e4481e33d4e6e2a1d1e3c2f149a117a0300e0d8f56688829814ce3214cf6398a461c3f0d2a0159583b8932cbda2c5208866ac1908b6bbbbd8e63776c7fe6dc048e1fd8f69c5cca22feb32696397011d6b8f56ede29820678a67f8d843478b8a44a964583c240ba5735f714261cb39812dbaaa2544e0de9cc16a0c35c2a5a8b51254d05094d1546a5d25211207e4dd793a5e4f0f2c8efefa66e7d7e7d9ecee2f1930467389edbe3e144d80382fec084fa9c20adda2ce36255a3b142e1faa45fb07bf6db02526c79c31f9496371afc13a2d51b5deeb59a6f764a874612f4c6e7d3ec567a2e4c557d03a44ac4e434030000"
        ],
        "rawHeaders": [
            "Date",
            "Sun, 08 Oct 2023 17:18:04 GMT",
            "Content-Type",
            "application/json; charset=utf-8",
            "Transfer-Encoding",
            "chunked",
            "Connection",
            "close",
            "x-zendesk-api-version",
            "v2",
            "x-zendesk-application-version",
            "v18586",
            "x-frame-options",
            "SAMEORIGIN",
            "etag",
            "W/\"74392482c24fa3e0fcde90c83fc865b9\"",
            "cache-control",
            "max-age=30, private",
            "x-rate-limit",
            "700",
            "rate-limit",
            "700",
            "x-rate-limit-remaining",
            "676",
            "rate-limit-remaining",
            "676",
            "rate-limit-reset",
            "56",
            "strict-transport-security",
            "max-age=31536000; includeSubDomains",
            "set-cookie",
            "_zendesk_cookie=BAhJIhl7ImRldmljZV90b2tlbnMiOnt9fQY6BkVU--0bf2100788cb010d0183feca16aaf88ccaf719ca; path=/; expires=Sun, 06 Oct 2024 20:34:17 GMT; secure; HttpOnly; SameSite=None",
            "x-zendesk-origin-server",
            "classic-app-server-5d6b8cb99d-g6kk5",
            "x-request-id",
            "81300a7a5e06c772-SEA",
            "X-Request-ID",
            "81300a7a5e06c772-SEA",
            "x-runtime",
            "0.076286",
            "X-Zendesk-Zorg",
            "yes",
            "Content-Encoding",
            "gzip",
            "CF-Cache-Status",
            "DYNAMIC",
            "Report-To",
            "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=Qp2tnvNJ%2BkWGZ%2FzQ%2F3pRrOERWB5%2F%2B7EDqF%2BBhASKHP86SKxUmxnC71rzEZmbI6JespqBW6sY09rRIoXtuh7fMdGUmq0AOa6ghaW6TGeyiORcsWoKen9H31tXYc7RyDymi8cnrLiCKA%3D%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}",
            "NEL",
            "{\"success_fraction\":0.01,\"report_to\":\"cf-nel\",\"max_age\":604800}",
            "Set-Cookie",
            "__cfruid=64cf91cb832c03ae9b55e94b168d5133ce651380-1696785484; path=/; domain=.nodejsapi.zendesk.com; HttpOnly; Secure; SameSite=None",
            "Server",
            "cloudflare",
            "CF-RAY",
            "81300a7a5e06c772-SEA"
        ],
        "responseIsBinary": false
    },
    {
        "scope": "https://nodejsapi.zendesk.com:443",
        "method": "GET",
        "path": "/api/v2/organizations.json?page%5Bafter%5D=eyJvIjoiaWQiLCJ2IjoiYVJTdFRoa1BFZ0FBIn0%3D&page%5Bsize%5D=1",
        "body": "",
        "status": 200,
        "response": [
            "1f8b0800000000000003a5926f6bc23010c6bf8a04dcab6aff885b2dc8c089a00cc6866ccc31caadbdd6689b9424954de977dfd539a9af36f44d48eef2dcf3bb4b764caa1404df82e1526816bced58a93216b0a531850e6c5bc818571a0adedda28851afbb91cc6d3adb1bcf3e11dbeec0ef5f3b7dbf37a0d5ebaeb414cc623c66c169c6620272248f396ad37a68d468b90352e825288c43c3a3351a624a20d3780c937d8ea211c74f834a4016d64ea2cc328b450ac1d05d30e4e2395eafe33a1dc79fbb3781eb078eb32097b288ffbc13cb1cb8086bdc7a36ef1441033cd3bf46421a3c1e5225cba24161203da89a730a138e594c895d55512aa782b4674bd0612e158dc5a892ba8284ba0aa35269a90810bf669be94a727879e4f77733afdebf3e17f378f224c11d4d16ce643415ce90a03f30a13a67482b8b655cac6b345628dc9cf50bf6cf7e5b408aedfee807a5dd1f0fff09d1ee8daf0e5acdb77ba54b2d097ae3cb69f623bd14a6aabe01cc8f7e4d34030000"
        ],
        "rawHeaders": [
            "Date",
            "Sun, 08 Oct 2023 17:18:04 GMT",
            "Content-Type",
            "application/json; charset=utf-8",
            "Transfer-Encoding",
            "chunked",
            "Connection",
            "close",
            "x-zendesk-api-version",
            "v2",
            "x-zendesk-application-version",
            "v18586",
            "x-frame-options",
            "SAMEORIGIN",
            "etag",
            "W/\"47f89d95ef5752ac037b794bfc3f7eb2\"",
            "cache-control",
            "max-age=30, private",
            "x-rate-limit",
            "700",
            "rate-limit",
            "700",
            "x-rate-limit-remaining",
            "674",
            "rate-limit-remaining",
            "674",
            "rate-limit-reset",
            "56",
            "strict-transport-security",
            "max-age=31536000; includeSubDomains",
            "set-cookie",
            "_zendesk_cookie=BAhJIhl7ImRldmljZV90b2tlbnMiOnt9fQY6BkVU--0bf2100788cb010d0183feca16aaf88ccaf719ca; path=/; expires=Sun, 06 Oct 2024 20:31:04 GMT; secure; HttpOnly; SameSite=None",
            "x-zendesk-origin-server",
            "classic-app-server-5d6b8cb99d-2vklm",
            "x-request-id",
            "81300a7bf9ac681a-SEA",
            "X-Request-ID",
            "81300a7bf9ac681a-SEA",
            "x-runtime",
            "0.081080",
            "X-Zendesk-Zorg",
            "yes",
            "Content-Encoding",
            "gzip",
            "CF-Cache-Status",
            "DYNAMIC",
            "Report-To",
            "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=de6cXhRFSJ5PlRO%2Fts17UF1p0CRp8yoxrKJn%2FvSxZgNM9RU9tzn%2Bo2gK%2BfkJKdu%2BhXIDERjFNzkF5Xa3DdjlJumoakBsO1V3Z4xv8DmxtbesOXmeS%2FnIbzXVW7sWh1MZXQmhz9d1jQ%3D%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}",
            "NEL",
            "{\"success_fraction\":0.01,\"report_to\":\"cf-nel\",\"max_age\":604800}",
            "Set-Cookie",
            "__cfruid=64cf91cb832c03ae9b55e94b168d5133ce651380-1696785484; path=/; domain=.nodejsapi.zendesk.com; HttpOnly; Secure; SameSite=None",
            "Server",
            "cloudflare",
            "CF-RAY",
            "81300a7bf9ac681a-SEA"
        ],
        "responseIsBinary": false
    },
    {
        "scope": "https://nodejsapi.zendesk.com:443",
        "method": "GET",
        "path": "/api/v2/organizations.json?page%5Bafter%5D=eyJvIjoiaWQiLCJ2IjoiYVpTdFRoa1BFZ0FBIn0%3D&page%5Bsize%5D=1",
        "body": "",
        "status": 200,
        "response": [
            "1f8b0800000000000003a592616bc2301086ff8a04dc27b56945570b3270222883b1218e3946b9d9b346dba424a96c4afffbaece49fdb4a1df92bb7bef7dee923d533a06297660859286056f7b96eb84056c656d6602c7912ac2b5814cb4762823349bd642a50edd9dade79c891db7e777babce3b77b5dd7e7adb5519235988858709e6930092992c7148dad3d567ad4da24302bd01885562c366809690989c15398dc539495387e5ad41292b03492799234d8422358aa054b261ef7da4d9737b93f756f03d70f389f934b9e457fd6442a0521c392b65ccd3b45d08248ccaf9154164f9758ab3cab5058888faaea9ac2a5c024a2c4be28289552433ab3159830559ab662754e53c192a60a17b9364a13207e4db6e3b512f0f2241eee275e797e9d4da6d1ec59813b18cdf9683096bc4fd01fb8a43e17488b064b84dc94682cd3b8bde8131c5efd2e8318eb9dc10f4abd33ecff13a2de1ede1cb546ec0e4a974692f4c6d7d31c567a2d4c517c03f1bcc20f33030000"
        ],
        "rawHeaders": [
            "Date",
            "Sun, 08 Oct 2023 17:18:04 GMT",
            "Content-Type",
            "application/json; charset=utf-8",
            "Transfer-Encoding",
            "chunked",
            "Connection",
            "close",
            "x-zendesk-api-version",
            "v2",
            "x-zendesk-application-version",
            "v18586",
            "x-frame-options",
            "SAMEORIGIN",
            "etag",
            "W/\"972a81542824539a9072333551eadf34\"",
            "cache-control",
            "max-age=30, private",
            "x-rate-limit",
            "700",
            "rate-limit",
            "700",
            "x-rate-limit-remaining",
            "673",
            "rate-limit-remaining",
            "673",
            "rate-limit-reset",
            "56",
            "strict-transport-security",
            "max-age=31536000; includeSubDomains",
            "set-cookie",
            "_zendesk_cookie=BAhJIhl7ImRldmljZV90b2tlbnMiOnt9fQY6BkVU--0bf2100788cb010d0183feca16aaf88ccaf719ca; path=/; expires=Tue, 08 Oct 2024 16:13:51 GMT; secure; HttpOnly; SameSite=None",
            "x-zendesk-origin-server",
            "classic-app-server-5d6b8cb99d-ldv9f",
            "x-request-id",
            "81300a7d9a8930ec-SEA",
            "X-Request-ID",
            "81300a7d9a8930ec-SEA",
            "x-runtime",
            "0.080439",
            "X-Zendesk-Zorg",
            "yes",
            "Content-Encoding",
            "gzip",
            "CF-Cache-Status",
            "DYNAMIC",
            "Report-To",
            "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=76wKsiWLGTlTlfT5UU1sNoTjtWRtujfBQMB3B%2FyxCe%2FG4J1c2UmbWD%2FA5CpnIc%2BmfLdOeFu7HAmGLepCPF6RuvArUlWrZPaq71cVTbXbD19X2HKcpYf1VQOi0d2h2MJblb3HHpNeqg%3D%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}",
            "NEL",
            "{\"success_fraction\":0.01,\"report_to\":\"cf-nel\",\"max_age\":604800}",
            "Set-Cookie",
            "__cfruid=64cf91cb832c03ae9b55e94b168d5133ce651380-1696785484; path=/; domain=.nodejsapi.zendesk.com; HttpOnly; Secure; SameSite=None",
            "Server",
            "cloudflare",
            "CF-RAY",
            "81300a7d9a8930ec-SEA"
        ],
        "responseIsBinary": false
    },
    {
        "scope": "https://nodejsapi.zendesk.com:443",
        "method": "GET",
        "path": "/api/v2/organizations.json?page%5Bafter%5D=eyJvIjoiaWQiLCJ2IjoiYVJTdVRoa1BFZ0FBIn0%3D&page%5Bsize%5D=1",
        "body": "",
        "status": 200,
        "response": [
            "1f8b0800000000000003a592616bc2301086ff8a04dc27b5a945570b3270222883b1218e3946b9d96b8db6494952d994fef75d9d13fdb4a1df92bb7bef7dee921d533a0129b660859286056f3b56e894056c696d6e02c7912ac295815cb4b6282334ebd642650edd9d4ddb39133b6ecfef7479c7f77a5d8ffbad95519235988858709e6930091992c7148dad3d9ef4a8b91e29cc123446a1158b355a628a2135780c937d86f2248e9f16b58434ac9c6491a60db6d008966ac1924b9bb7bda6cb9bdc9fbab781eb079ccfc9a5c8a33f6b2295819061855bede69d226841a4e6d7482a8bc74ba255919f5058480eaad33d85b1c034a2c4ae2c299551433ab3259830539ad662754153414c53858b421ba50910bf269bf14a097879120ff79376757e9de5d368f6acc01d8ce67c34184bde27e80f8ca9cf05d2b2c15221d7151acb356e2efa05fb67bfcb21c17a67f08352ef0cfbff84a87bc39b83d688ed5ee9d24892def87a9afd4aaf8529cb6fef8cc65634030000"
        ],
        "rawHeaders": [
            "Date",
            "Sun, 08 Oct 2023 17:18:04 GMT",
            "Content-Type",
            "application/json; charset=utf-8",
            "Transfer-Encoding",
            "chunked",
            "Connection",
            "close",
            "x-zendesk-api-version",
            "v2",
            "x-zendesk-application-version",
            "v18586",
            "x-frame-options",
            "SAMEORIGIN",
            "etag",
            "W/\"a52f8915eba6fa092170cb2fb16a2883\"",
            "cache-control",
            "max-age=30, private",
            "x-rate-limit",
            "700",
            "rate-limit",
            "700",
            "x-rate-limit-remaining",
            "672",
            "rate-limit-remaining",
            "672",
            "rate-limit-reset",
            "56",
            "strict-transport-security",
            "max-age=31536000; includeSubDomains",
            "set-cookie",
            "_zendesk_cookie=BAhJIhl7ImRldmljZV90b2tlbnMiOnt9fQY6BkVU--0bf2100788cb010d0183feca16aaf88ccaf719ca; path=/; expires=Mon, 07 Oct 2024 06:13:48 GMT; secure; HttpOnly; SameSite=None",
            "x-zendesk-origin-server",
            "classic-app-server-5d6b8cb99d-f7nds",
            "x-request-id",
            "81300a7f3d12c749-SEA",
            "X-Request-ID",
            "81300a7f3d12c749-SEA",
            "x-runtime",
            "0.088538",
            "X-Zendesk-Zorg",
            "yes",
            "Content-Encoding",
            "gzip",
            "CF-Cache-Status",
            "DYNAMIC",
            "Report-To",
            "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=0y2DLjQPQUoho3rGI2rOoCkcJO86LmgGdBIy2IcNcxFS5Mt9kbk0ZDlpDlU4TcPJHtYAfeGaigA7OuH1EvPOESlTmbN7tk5zmGcoVzjzeGcla9veB1J6w6iRv4triKSArsIX6thsRA%3D%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}",
            "NEL",
            "{\"success_fraction\":0.01,\"report_to\":\"cf-nel\",\"max_age\":604800}",
            "Set-Cookie",
            "__cfruid=64cf91cb832c03ae9b55e94b168d5133ce651380-1696785484; path=/; domain=.nodejsapi.zendesk.com; HttpOnly; Secure; SameSite=None",
            "Server",
            "cloudflare",
            "CF-RAY",
            "81300a7f3d12c749-SEA"
        ],
        "responseIsBinary": false
    },
    {
        "scope": "https://nodejsapi.zendesk.com:443",
        "method": "GET",
        "path": "/api/v2/organizations.json?page%5Bafter%5D=eyJvIjoiaWQiLCJ2IjoiYVpTdVRoa1BFZ0FBIn0%3D&page%5Bsize%5D=1",
        "body": "",
        "status": 200,
        "response": [
            "1f8b0800000000000003a592616bc2301086ff8a04dca76a5b3b5d2dc8c089a00cc6866ccc31cacd9e1a4d9392a4b229fdefbb3a27f5d3867e4beeeebdf7b94b764ce90548be05cb95342c7adbb15c0b16b1a5b599895c57aa04570632dedca24cd0ac9b3395ba7477372df744ecfaddb0ddf1da61d0ed5c079de6ca28c91cc613169d661c262145f298a0b1b5874a8f5a4802b3048d496cf96c8d9690e6200c1ec3e49ea2acc4f1d3a29620e2d248e642386ca6112cd582259396d70a1abed7f0c2897f13f961e4795372c9b3e4cf9a44a5c0655cd296ab79a7085ae0c2fc1a4965f17859689567150a0b8b83aabaa678ce512494d81505a5526a4867b60413a74ad356acce692a98d354f12cd7466902c4aff166b4521c5e1ef9fdddb8559e5f9fc793443c29f0fbc3a937ec8fa4d723e80f9c539f33a485c30497eb128d651a37677d82fdabdf66b0c07abbff83526f0f7aff84a80783ab83d6f0ed5ee9d34892def8729afd4a2f85298a6ffa9568c133030000"
        ],
        "rawHeaders": [
            "Date",
            "Sun, 08 Oct 2023 17:18:05 GMT",
            "Content-Type",
            "application/json; charset=utf-8",
            "Transfer-Encoding",
            "chunked",
            "Connection",
            "close",
            "x-zendesk-api-version",
            "v2",
            "x-zendesk-application-version",
            "v18586",
            "x-frame-options",
            "SAMEORIGIN",
            "etag",
            "W/\"8b6e06deee950228339b6f6948f1dcec\"",
            "cache-control",
            "max-age=30, private",
            "x-rate-limit",
            "700",
            "rate-limit",
            "700",
            "x-rate-limit-remaining",
            "671",
            "rate-limit-remaining",
            "671",
            "rate-limit-reset",
            "55",
            "strict-transport-security",
            "max-age=31536000; includeSubDomains",
            "set-cookie",
            "_zendesk_cookie=BAhJIhl7ImRldmljZV90b2tlbnMiOnt9fQY6BkVU--0bf2100788cb010d0183feca16aaf88ccaf719ca; path=/; expires=Mon, 07 Oct 2024 06:13:50 GMT; secure; HttpOnly; SameSite=None",
            "x-zendesk-origin-server",
            "classic-app-server-5d6b8cb99d-nqg87",
            "x-request-id",
            "81300a81182fc373-SEA",
            "X-Request-ID",
            "81300a81182fc373-SEA",
            "x-runtime",
            "0.098818",
            "X-Zendesk-Zorg",
            "yes",
            "Content-Encoding",
            "gzip",
            "CF-Cache-Status",
            "DYNAMIC",
            "Report-To",
            "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=L6Y5Btt0A36FRDJl5snmCZ5wVPg%2Fm%2BnUiHpQQDLgR583hPLYqiJ7Fms%2FFExPdVE7wpZ1h6yD%2FsarTH5vLjSYF%2BWEyoB1l%2BkVxHKliD0rQdFpw0KjU4%2BF0m7xHI%2F5431zdZtaDJSgDQ%3D%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}",
            "NEL",
            "{\"success_fraction\":0.01,\"report_to\":\"cf-nel\",\"max_age\":604800}",
            "Set-Cookie",
            "__cfruid=9067f7e82c307500e0436bea39061ec19a4ee874-1696785485; path=/; domain=.nodejsapi.zendesk.com; HttpOnly; Secure; SameSite=None",
            "Server",
            "cloudflare",
            "CF-RAY",
            "81300a81182fc373-SEA"
        ],
        "responseIsBinary": false
    },
    {
        "scope": "https://nodejsapi.zendesk.com:443",
        "method": "GET",
        "path": "/api/v2/organizations.json?page%5Bafter%5D=eyJvIjoiaWQiLCJ2IjoiYVJTdlRoa1BFZ0FBIn0%3D&page%5Bsize%5D=1",
        "body": "",
        "status": 200,
        "response": [
            "1f8b0800000000000003a5926f6bc23010c6bf8a04dcab6affb8ba5a90811341198c0dd99863949b3d359a2625496553fadd77754ef4d586be4beeeeb9e777976c99d273907c03962b6958fcb66585162c660b6b7313bbae54292e0de4bcb94199a25935a72a73e9eeae03f744ecfa9d286c7b61d4eab4c3f675736994640ee3298b4f330e939021798cd1d8dac3518f9a1f92c22c40639a583e5da125a61908838730d967288fe2f869514b1049e5240b211c36d508966ac1924be005ad86ef35bc68ecdfc47e147bde845c8a3cfdb3265519709954b8d56ede298216b830bf4652593c5ce65a15f9118585f95e75bca764c651a494d89625a5326a4867b60093644ad35aac2e682a98d154c9b4d0466902c4afd17ab8541c5e1ef9fddd28a8ceafcff938154f0afcde60e20d7a43e97509fa0367d4e70c69e930c1e5aa4263b9c6f559bf60f7ecb739ccb11ef67e50ea61bffb4f887aab7fb5d71abed9297d1a49d21b5f4eb35be9a53065f90d2d0cf4bd34030000"
        ],
        "rawHeaders": [
            "Date",
            "Sun, 08 Oct 2023 17:18:05 GMT",
            "Content-Type",
            "application/json; charset=utf-8",
            "Transfer-Encoding",
            "chunked",
            "Connection",
            "close",
            "x-zendesk-api-version",
            "v2",
            "x-zendesk-application-version",
            "v18586",
            "x-frame-options",
            "SAMEORIGIN",
            "etag",
            "W/\"0e663b790597d1cf86b546ee300e588c\"",
            "cache-control",
            "max-age=30, private",
            "x-rate-limit",
            "700",
            "rate-limit",
            "700",
            "x-rate-limit-remaining",
            "669",
            "rate-limit-remaining",
            "669",
            "rate-limit-reset",
            "55",
            "strict-transport-security",
            "max-age=31536000; includeSubDomains",
            "set-cookie",
            "_zendesk_cookie=BAhJIhl7ImRldmljZV90b2tlbnMiOnt9fQY6BkVU--0bf2100788cb010d0183feca16aaf88ccaf719ca; path=/; expires=Sun, 06 Oct 2024 20:34:04 GMT; secure; HttpOnly; SameSite=None",
            "x-zendesk-origin-server",
            "classic-app-server-5d6b8cb99d-qr7d6",
            "x-request-id",
            "81300a83affdeb77-SEA",
            "X-Request-ID",
            "81300a83affdeb77-SEA",
            "x-runtime",
            "0.080828",
            "X-Zendesk-Zorg",
            "yes",
            "Content-Encoding",
            "gzip",
            "CF-Cache-Status",
            "DYNAMIC",
            "Report-To",
            "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=KyY0x72SM5h3Q5mLxd5f6VKUABhh%2BiXiBJRYhs7%2BR7iQYL8SLWKcoBBUGQlHLtqWM5k%2Fi4%2FASq71KpU%2BJG%2F%2BSZSKHRYGDO0qGK%2BroUSw%2BRSiq1wiuX5t8oaoONDFl5mjl6FuzShfpA%3D%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}",
            "NEL",
            "{\"success_fraction\":0.01,\"report_to\":\"cf-nel\",\"max_age\":604800}",
            "Set-Cookie",
            "__cfruid=9067f7e82c307500e0436bea39061ec19a4ee874-1696785485; path=/; domain=.nodejsapi.zendesk.com; HttpOnly; Secure; SameSite=None",
            "Server",
            "cloudflare",
            "CF-RAY",
            "81300a83affdeb77-SEA"
        ],
        "responseIsBinary": false
    },
    {
        "scope": "https://nodejsapi.zendesk.com:443",
        "method": "GET",
        "path": "/api/v2/organizations.json?page%5Bafter%5D=eyJvIjoiaWQiLCJ2IjoiYVpTdlRoa1BFZ0FBIn0%3D&page%5Bsize%5D=1",
        "body": "",
        "status": 200,
        "response": [
            "1f8b0800000000000003a5926f6bc23010c6bfca08b8576aff885d2dc8c089a00cc6866ccc31cacd5c6bb44d4a92caa6f4bbefea9ce8ab0d7d97dcdd73cfef2ed932a55390620356286958f4b665a5ce58c416d61626721ca9382e0d14a2bd41c9d1acda73953b7477d6be732276bc5ed80ddc6ed8e90541cf6f2f8d92acc90467d169a6c924e4481e5334f6eae1a8c7554002b3008d3cb662be424b480964060f6172cf511ec5f1d3a29690c5b5912cb3acc9e61ac1522d5832f15dbfd3f2dc961b4ebd9bc80b23d79d914b59f03f6bb8ca41c8b8a6ad57f34e11b42032f36b2495c5c325d5aa2c8e282ca47bd5f19ae24460c629b1ad2a4ae5d490ce6c0126ce95a6ad585dd25490d054f1bcd4466902c4afc97abc54025e1ec5fdddc4afcfafcf9329f79e147883d1cc1d0dc6d2ed13f40726d4e70c69d5649990ab1a8d151ad7677d82ddabdf169062a33bf841697487fd7f42343ac3ebbdd688cd4ee9d14892def8729add4a2f85a9aa6feda5721c33030000"
        ],
        "rawHeaders": [
            "Date",
            "Sun, 08 Oct 2023 17:18:05 GMT",
            "Content-Type",
            "application/json; charset=utf-8",
            "Transfer-Encoding",
            "chunked",
            "Connection",
            "close",
            "x-zendesk-api-version",
            "v2",
            "x-zendesk-application-version",
            "v18586",
            "x-frame-options",
            "SAMEORIGIN",
            "etag",
            "W/\"6b7adb9d3ee9bf0928a812f0313b3d88\"",
            "cache-control",
            "max-age=30, private",
            "x-rate-limit",
            "700",
            "rate-limit",
            "700",
            "x-rate-limit-remaining",
            "667",
            "rate-limit-remaining",
            "667",
            "rate-limit-reset",
            "55",
            "strict-transport-security",
            "max-age=31536000; includeSubDomains",
            "set-cookie",
            "_zendesk_cookie=BAhJIhl7ImRldmljZV90b2tlbnMiOnt9fQY6BkVU--0bf2100788cb010d0183feca16aaf88ccaf719ca; path=/; expires=Sun, 06 Oct 2024 20:31:56 GMT; secure; HttpOnly; SameSite=None",
            "x-zendesk-origin-server",
            "classic-app-server-5d6b8cb99d-xhx7m",
            "x-request-id",
            "81300a857f0a0871-SEA",
            "X-Request-ID",
            "81300a857f0a0871-SEA",
            "x-runtime",
            "0.084564",
            "X-Zendesk-Zorg",
            "yes",
            "Content-Encoding",
            "gzip",
            "CF-Cache-Status",
            "DYNAMIC",
            "Report-To",
            "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=sDjBIXaKqsL3AYbdDm6sHOxQsOgQrYSCHfLVLianRzZpIZUEMTOAPg7C7kQN31afoeYjX8LSCVPeKZxVGSBX4Rxiqbj%2BaGdrPkmzci8uXOtX56VLTlhNvw%2FuR2sHXOVfmX0xxk2gfg%3D%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}",
            "NEL",
            "{\"success_fraction\":0.01,\"report_to\":\"cf-nel\",\"max_age\":604800}",
            "Set-Cookie",
            "__cfruid=9067f7e82c307500e0436bea39061ec19a4ee874-1696785485; path=/; domain=.nodejsapi.zendesk.com; HttpOnly; Secure; SameSite=None",
            "Server",
            "cloudflare",
            "CF-RAY",
            "81300a857f0a0871-SEA"
        ],
        "responseIsBinary": false
    },
    {
        "scope": "https://nodejsapi.zendesk.com:443",
        "method": "GET",
        "path": "/api/v2/organizations.json?page%5Bafter%5D=eyJvIjoiaWQiLCJ2IjoiYVJTd1Roa1BFZ0FBIn0%3D&page%5Bsize%5D=1",
        "body": "",
        "status": 200,
        "response": [
            "1f8b0800000000000003a592616bc2301086ff8a04dc27b56945ad0519381194c1d8908d3946b9d96b8db6494952d994fef75d9d13fdb4a1df92bb7bef7dee921d533a0129b660859286056f3b56e894056c696d6e02c7912ac295815cb4b6282334ebd642650edd9d8de79c891db7ef77babce3b7fb5ddfe3ad95519235988858709e6930091992c70c8dad3d9cf4a8f5486096a0310aad58acd112520ca9c16398dc33942771fcb4a825a46165248b346db08546b0540b964c3ceeb59b2e6f727fe6f602d70f389f934b91477fd6442a0321c38ab65acd3b45d08248cdaf9154168f9744ab223fa1b0901c54a76b0a63816944895d59522aa38674664b3061a6346dc5ea82a68298a60a1785364a13207e4d37939512f0f228eeefa65e757e7dce6791fba4c01d8ee77c3c9c483e20e80f8ca9cf05d2b2c15221d7151acb356e2efa04fb57bfcd21c17a67f88352ef8c06ff84a8b7473707ad11dbbdd2a59124bdf1f534fb955e0b5396df5f264e3b33030000"
        ],
        "rawHeaders": [
            "Date",
            "Sun, 08 Oct 2023 17:18:06 GMT",
            "Content-Type",
            "application/json; charset=utf-8",
            "Transfer-Encoding",
            "chunked",
            "Connection",
            "close",
            "x-zendesk-api-version",
            "v2",
            "x-zendesk-application-version",
            "v18586",
            "x-frame-options",
            "SAMEORIGIN",
            "etag",
            "W/\"f2164ca22cb94ad9c9df3fd575938905\"",
            "cache-control",
            "max-age=30, private",
            "x-rate-limit",
            "700",
            "rate-limit",
            "700",
            "x-rate-limit-remaining",
            "665",
            "rate-limit-remaining",
            "665",
            "rate-limit-reset",
            "54",
            "strict-transport-security",
            "max-age=31536000; includeSubDomains",
            "set-cookie",
            "_zendesk_cookie=BAhJIhl7ImRldmljZV90b2tlbnMiOnt9fQY6BkVU--0bf2100788cb010d0183feca16aaf88ccaf719ca; path=/; expires=Sun, 06 Oct 2024 23:39:29 GMT; secure; HttpOnly; SameSite=None",
            "x-zendesk-origin-server",
            "classic-app-server-5d6b8cb99d-lcp4k",
            "x-request-id",
            "81300a8729d0c392-SEA",
            "X-Request-ID",
            "81300a8729d0c392-SEA",
            "x-runtime",
            "0.084201",
            "X-Zendesk-Zorg",
            "yes",
            "Content-Encoding",
            "gzip",
            "CF-Cache-Status",
            "DYNAMIC",
            "Report-To",
            "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=KthiwKi%2Bc52JzgvuY6G8q5KTWnX8z7JBLUVC%2FGDx5orZhhR%2FvYbZUcRE0VbtnF0aO2ozRlyg34T%2B8b1QZdH7AXl7qZ7cK5Lrc%2F1WEFFBD3CBrKTIHeq1DjrZoaDMGCE2Wbv0J3YnmA%3D%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}",
            "NEL",
            "{\"success_fraction\":0.01,\"report_to\":\"cf-nel\",\"max_age\":604800}",
            "Set-Cookie",
            "__cfruid=7d9d63b4b2f36262ba2ee7c291177ddc9fc9076e-1696785486; path=/; domain=.nodejsapi.zendesk.com; HttpOnly; Secure; SameSite=None",
            "Server",
            "cloudflare",
            "CF-RAY",
            "81300a8729d0c392-SEA"
        ],
        "responseIsBinary": false
    },
    {
        "scope": "https://nodejsapi.zendesk.com:443",
        "method": "GET",
        "path": "/api/v2/organizations.json?page%5Bafter%5D=eyJvIjoiaWQiLCJ2IjoiYVpTd1Roa1BFZ0FBIn0%3D&page%5Bsize%5D=1",
        "body": "",
        "status": 200,
        "response": [
            "1f8b0800000000000003a592616bc2301086ff8a04dc27b5a94e570b3270222883b1211b738c726baf1a6d9392a4b229fdefbb3a27f5d3867e4beeeebdf7b94b764ce90548b1052b9434cc7fdbb15c27cc674b6b33e33b8e5411ae0c64a2b54519a159b742953a7477366de744ecb87dafdbe35dafd3eff5afbdd6ca28c91a4c44cc3fcd34988414c96386c6d61e2a3d6a2e27855982c628b0225ca325a6181283c730d9a7282b71fcb4a8252441e924f32469b0502358aa054b2e6ddeee345ddee4deccbdf15dcfe77c4e2e7916fd5913a914840c4adc7237ef14410b2231bf4652593c5e165ae55985c2c2e2a0aaee298805261125764541a9941ad2992dc104a9d2b416ab739a0a629a2a08736d942640fc9a6e262b25e0e551dcdf4ddbe5f9f5793ac3f1930277389ef3f17022f980a03f30a63e67488b064b845c97682cd3b839eb17ec9ffd368305d6bbc31f947a7734f82744bd33ba3a688dd8ee952e8d24e98d2fa7d9aff45298a2f806601a34b034030000"
        ],
        "rawHeaders": [
            "Date",
            "Sun, 08 Oct 2023 17:18:06 GMT",
            "Content-Type",
            "application/json; charset=utf-8",
            "Transfer-Encoding",
            "chunked",
            "Connection",
            "close",
            "x-zendesk-api-version",
            "v2",
            "x-zendesk-application-version",
            "v18586",
            "x-frame-options",
            "SAMEORIGIN",
            "etag",
            "W/\"233347f96714af856d972c10a41043c4\"",
            "cache-control",
            "max-age=30, private",
            "x-rate-limit",
            "700",
            "rate-limit",
            "700",
            "x-rate-limit-remaining",
            "664",
            "rate-limit-remaining",
            "664",
            "rate-limit-reset",
            "54",
            "strict-transport-security",
            "max-age=31536000; includeSubDomains",
            "set-cookie",
            "_zendesk_cookie=BAhJIhl7ImRldmljZV90b2tlbnMiOnt9fQY6BkVU--0bf2100788cb010d0183feca16aaf88ccaf719ca; path=/; expires=Mon, 07 Oct 2024 16:03:48 GMT; secure; HttpOnly; SameSite=None",
            "x-zendesk-origin-server",
            "classic-app-server-5d6b8cb99d-vr6vg",
            "x-request-id",
            "81300a8aed47c3e4-SEA",
            "X-Request-ID",
            "81300a8aed47c3e4-SEA",
            "x-runtime",
            "0.128846",
            "X-Zendesk-Zorg",
            "yes",
            "Content-Encoding",
            "gzip",
            "CF-Cache-Status",
            "DYNAMIC",
            "Report-To",
            "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=dxpKdbU%2FBfBjsHxvQ42Kx%2Bn7q6QggEGwRl75WRdNk7VDq2HNlA9r1BgdT9xTkfyesZFQaJx4zEBZv94%2BgeprqOvNMg28TCvnTuPFIPMBm2A0S39NoXOE%2FIj4TxVeD1E1TDS9e3bP2g%3D%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}",
            "NEL",
            "{\"success_fraction\":0.01,\"report_to\":\"cf-nel\",\"max_age\":604800}",
            "Set-Cookie",
            "__cfruid=7d9d63b4b2f36262ba2ee7c291177ddc9fc9076e-1696785486; path=/; domain=.nodejsapi.zendesk.com; HttpOnly; Secure; SameSite=None",
            "Server",
            "cloudflare",
            "CF-RAY",
            "81300a8aed47c3e4-SEA"
        ],
        "responseIsBinary": false
    },
    {
        "scope": "https://nodejsapi.zendesk.com:443",
        "method": "GET",
        "path": "/api/v2/organizations.json?page%5Bafter%5D=eyJvIjoiaWQiLCJ2IjoiYVJTeFRoa1BFZ0FBIn0%3D&page%5Bsize%5D=1",
        "body": "",
        "status": 200,
        "response": [
            "1f8b0800000000000003a592616bc2301086ffca08b84f6ad33a672dc8c089a00cc68638e618e5d69e1a6d9392a4b229fdefbb3a27f5d3867e4beeeebdf7b94b764ce90548b1052b94342c78dbb15c272c604b6b3313388e5431ae0c64a2b94519a3593723953a7477369e732276dcaedfbee56dbfd5ed78fca6b9324ab23a13310b4e3375262145f298a0b1578f951e575e8b1466091ae3d08a688d9698e690183c86c93e455989e3a7452d21094b279927499d451ac1522d5872f1b8d76ab8bcc1fd89db095c3fe07c462e7916ff5913ab14840c4bdc7237ef14410b2231bf4652593c5e165ae55985c2c2e2a0aaee299c0b4c624aec8a82522935a4335b820953a5692d56e73415cc69aa30cab5519a00f16bbc19ad94809727f1703ff6caf3eb743cc1e9b302b73f9cf1617f24798fa03f704e7dce9016759608b92ed158a67173d62fd83ffb5d060bacb5fb3f28b5f6a0f74f885a6b707dd01ab1dd2b5d1a49d21b5f4eb35fe9a53045f10db36ce9b934030000"
        ],
        "rawHeaders": [
            "Date",
            "Sun, 08 Oct 2023 17:18:07 GMT",
            "Content-Type",
            "application/json; charset=utf-8",
            "Transfer-Encoding",
            "chunked",
            "Connection",
            "close",
            "x-zendesk-api-version",
            "v2",
            "x-zendesk-application-version",
            "v18586",
            "x-frame-options",
            "SAMEORIGIN",
            "etag",
            "W/\"a0edaaaa334060fb590918b220a81da1\"",
            "cache-control",
            "max-age=30, private",
            "x-rate-limit",
            "700",
            "rate-limit",
            "700",
            "x-rate-limit-remaining",
            "663",
            "rate-limit-remaining",
            "663",
            "rate-limit-reset",
            "53",
            "strict-transport-security",
            "max-age=31536000; includeSubDomains",
            "set-cookie",
            "_zendesk_cookie=BAhJIhl7ImRldmljZV90b2tlbnMiOnt9fQY6BkVU--0bf2100788cb010d0183feca16aaf88ccaf719ca; path=/; expires=Tue, 08 Oct 2024 16:42:17 GMT; secure; HttpOnly; SameSite=None",
            "x-zendesk-origin-server",
            "classic-app-server-5d6b8cb99d-7bvsw",
            "x-request-id",
            "81300a8e1ba8c375-SEA",
            "X-Request-ID",
            "81300a8e1ba8c375-SEA",
            "x-runtime",
            "0.088480",
            "X-Zendesk-Zorg",
            "yes",
            "Content-Encoding",
            "gzip",
            "CF-Cache-Status",
            "DYNAMIC",
            "Report-To",
            "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=y%2FPfSizVn0gluDPVG7rRPDF%2F1nqS%2BwZ0%2F3GxNU6vlFl2eN1%2BlURFDgQ7dF0J4JF5xFmEBn7FeDScMj8i%2FBliF3Xk0JXRcuuxK%2F3efOEaCxA27U0%2FSGkSiLSgQWXg4ZcmF6taS7Btlw%3D%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}",
            "NEL",
            "{\"success_fraction\":0.01,\"report_to\":\"cf-nel\",\"max_age\":604800}",
            "Set-Cookie",
            "__cfruid=5f265e77549f206c01e88ac6a6cb31fe009a28c4-1696785487; path=/; domain=.nodejsapi.zendesk.com; HttpOnly; Secure; SameSite=None",
            "Server",
            "cloudflare",
            "CF-RAY",
            "81300a8e1ba8c375-SEA"
        ],
        "responseIsBinary": false
    },
    {
        "scope": "https://nodejsapi.zendesk.com:443",
        "method": "GET",
        "path": "/api/v2/organizations.json?page%5Bafter%5D=eyJvIjoiaWQiLCJ2IjoiYVJTeVRoa1BFZ0FBIn0%3D&page%5Bsize%5D=1",
        "body": "",
        "status": 200,
        "response": [
            "1f8b080000000000000355cc410a80300c05d1bbfc754fd0ab884894548b3595a48a28de5d055db81d1e73206b4f12772a318bc157b5c3c485e00f0c64cd9495e1032563070a85b5e916b5acf0b2a4e4d072b8c92f9e0e29ca68cf63565e3f2abc95579c17fb66cf0679000000"
        ],
        "rawHeaders": [
            "Date",
            "Sun, 08 Oct 2023 17:18:07 GMT",
            "Content-Type",
            "application/json; charset=utf-8",
            "Transfer-Encoding",
            "chunked",
            "Connection",
            "close",
            "x-zendesk-api-version",
            "v2",
            "x-zendesk-application-version",
            "v18586",
            "x-frame-options",
            "SAMEORIGIN",
            "etag",
            "W/\"da39a3ee5e6b4b0d3255bfef95601890\"",
            "cache-control",
            "max-age=30, private",
            "x-rate-limit",
            "700",
            "rate-limit",
            "700",
            "x-rate-limit-remaining",
            "662",
            "rate-limit-remaining",
            "662",
            "rate-limit-reset",
            "53",
            "strict-transport-security",
            "max-age=31536000; includeSubDomains",
            "set-cookie",
            "_zendesk_cookie=BAhJIhl7ImRldmljZV90b2tlbnMiOnt9fQY6BkVU--0bf2100788cb010d0183feca16aaf88ccaf719ca; path=/; expires=Mon, 07 Oct 2024 09:01:47 GMT; secure; HttpOnly; SameSite=None",
            "x-zendesk-origin-server",
            "classic-app-server-5d6b8cb99d-5kzlb",
            "x-request-id",
            "81300a918fa330ad-SEA",
            "X-Request-ID",
            "81300a918fa330ad-SEA",
            "x-runtime",
            "0.065466",
            "X-Zendesk-Zorg",
            "yes",
            "Content-Encoding",
            "gzip",
            "CF-Cache-Status",
            "DYNAMIC",
            "Report-To",
            "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=IOKpZ76ze9Mjt1%2BOKc7lFJEUbh28R7ndh7lsBbx%2BIClJaGXi81SXeCh6tJLwMj%2FACHiIJwTIJgTUwT%2BeqdNVXquActQKMZXmBZJ%2FR04BNdjhwsIllnGVyS6M1n8bmVLA%2B6oBPjYgZQ%3D%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}",
            "NEL",
            "{\"success_fraction\":0.01,\"report_to\":\"cf-nel\",\"max_age\":604800}",
            "Set-Cookie",
            "__cfruid=5f265e77549f206c01e88ac6a6cb31fe009a28c4-1696785487; path=/; domain=.nodejsapi.zendesk.com; HttpOnly; Secure; SameSite=None",
            "Server",
            "cloudflare",
            "CF-RAY",
            "81300a918fa330ad-SEA"
        ],
        "responseIsBinary": false
    }
]
</file>

<file path="test/fixtures/pagination_test_setup.json">
[
    {
        "scope": "https://nodejsapi.zendesk.com:443",
        "method": "POST",
        "path": "/api/v2/organizations.json",
        "body": {
            "organization": {
                "name": "Test Organization The Quick Brown Foxx1"
            }
        },
        "status": 201,
        "response": {
            "organization": {
                "url": "https://nodejsapi.zendesk.com/api/v2/organizations/19856049018004.json",
                "id": 19856049018004,
                "name": "Test Organization The Quick Brown Foxx1",
                "shared_tickets": false,
                "shared_comments": false,
                "external_id": null,
                "created_at": "2023-10-08T17:17:58Z",
                "updated_at": "2023-10-08T17:17:58Z",
                "domain_names": [],
                "details": null,
                "notes": null,
                "group_id": null,
                "tags": [],
                "organization_fields": {}
            }
        },
        "rawHeaders": [
            "Date",
            "Sun, 08 Oct 2023 17:17:58 GMT",
            "Content-Type",
            "application/json; charset=utf-8",
            "Content-Length",
            "401",
            "Connection",
            "close",
            "x-zendesk-api-version",
            "v2",
            "x-zendesk-application-version",
            "v18586",
            "x-frame-options",
            "SAMEORIGIN",
            "location",
            "https://nodejsapi.zendesk.com/api/v2/organizations/19856049018004.json",
            "x-rate-limit",
            "700",
            "rate-limit",
            "700",
            "x-rate-limit-remaining",
            "699",
            "rate-limit-remaining",
            "699",
            "rate-limit-reset",
            "2",
            "strict-transport-security",
            "max-age=31536000; includeSubDomains",
            "etag",
            "W/\"97b9d48f7127249dc394dccd37eab836\"",
            "cache-control",
            "max-age=0, private, must-revalidate",
            "set-cookie",
            "_zendesk_cookie=BAhJIhl7ImRldmljZV90b2tlbnMiOnt9fQY6BkVU--0bf2100788cb010d0183feca16aaf88ccaf719ca; path=/; expires=Tue, 08 Oct 2024 17:17:15 GMT; secure; HttpOnly; SameSite=None",
            "x-zendesk-origin-server",
            "classic-app-server-5d6b8cb99d-jrw7t",
            "x-request-id",
            "81300a599f1c093f-SEA",
            "X-Request-ID",
            "81300a599f1c093f-SEA",
            "x-runtime",
            "0.151433",
            "X-Zendesk-Zorg",
            "yes",
            "CF-Cache-Status",
            "DYNAMIC",
            "Report-To",
            "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=bsdrighsIpIJpymvOWRAj9i4oAHxp%2B9owJVqv1gxYX9olt3C3vEa8qn7Dcnsy0MFT5DGt2OMnYEUU3y%2BDRfFkBOC29meu5xEnQg8ko6LXe2ufDmaLFONumjgQsdEc9dW1biTRzjEdg%3D%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}",
            "NEL",
            "{\"success_fraction\":0.01,\"report_to\":\"cf-nel\",\"max_age\":604800}",
            "Set-Cookie",
            "__cfruid=7e9bc12ad644767174224d4ac585fc86c1c748d4-1696785478; path=/; domain=.nodejsapi.zendesk.com; HttpOnly; Secure; SameSite=None",
            "Server",
            "cloudflare",
            "CF-RAY",
            "81300a599f1c093f-SEA"
        ],
        "responseIsBinary": false
    },
    {
        "scope": "https://nodejsapi.zendesk.com:443",
        "method": "POST",
        "path": "/api/v2/organizations.json",
        "body": {
            "organization": {
                "name": "Test Organization The Quick Brown Foxx2"
            }
        },
        "status": 201,
        "response": {
            "organization": {
                "url": "https://nodejsapi.zendesk.com/api/v2/organizations/19856027378324.json",
                "id": 19856027378324,
                "name": "Test Organization The Quick Brown Foxx2",
                "shared_tickets": false,
                "shared_comments": false,
                "external_id": null,
                "created_at": "2023-10-08T17:17:58Z",
                "updated_at": "2023-10-08T17:17:58Z",
                "domain_names": [],
                "details": null,
                "notes": null,
                "group_id": null,
                "tags": [],
                "organization_fields": {}
            }
        },
        "rawHeaders": [
            "Date",
            "Sun, 08 Oct 2023 17:17:58 GMT",
            "Content-Type",
            "application/json; charset=utf-8",
            "Content-Length",
            "401",
            "Connection",
            "close",
            "x-zendesk-api-version",
            "v2",
            "x-zendesk-application-version",
            "v18586",
            "x-frame-options",
            "SAMEORIGIN",
            "location",
            "https://nodejsapi.zendesk.com/api/v2/organizations/19856027378324.json",
            "x-rate-limit",
            "700",
            "rate-limit",
            "700",
            "x-rate-limit-remaining",
            "697",
            "rate-limit-remaining",
            "697",
            "rate-limit-reset",
            "2",
            "strict-transport-security",
            "max-age=31536000; includeSubDomains",
            "etag",
            "W/\"21e567a3ca7bf38f6dd4418157b08476\"",
            "cache-control",
            "max-age=0, private, must-revalidate",
            "set-cookie",
            "_zendesk_cookie=BAhJIhl7ImRldmljZV90b2tlbnMiOnt9fQY6BkVU--0bf2100788cb010d0183feca16aaf88ccaf719ca; path=/; expires=Mon, 07 Oct 2024 20:43:48 GMT; secure; HttpOnly; SameSite=None",
            "x-zendesk-origin-server",
            "classic-app-server-5d6b8cb99d-zvbpc",
            "x-request-id",
            "81300a59cca9094c-SEA",
            "X-Request-ID",
            "81300a59cca9094c-SEA",
            "x-runtime",
            "0.123958",
            "X-Zendesk-Zorg",
            "yes",
            "CF-Cache-Status",
            "DYNAMIC",
            "Report-To",
            "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=dqdETypG4vIdVeJ0UrDTQW%2B71S5pyk0enFGuSc%2FHtdD1okZ4a0CCjACrsvIIeJay7rf%2F%2FFDfVxy9O%2Fyes%2BaBXe1nXODyeE4YrIpjZDUSIkrZft8lhZzXeRawCkUqDw7OiCtaCMRX6A%3D%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}",
            "NEL",
            "{\"success_fraction\":0.01,\"report_to\":\"cf-nel\",\"max_age\":604800}",
            "Set-Cookie",
            "__cfruid=7e9bc12ad644767174224d4ac585fc86c1c748d4-1696785478; path=/; domain=.nodejsapi.zendesk.com; HttpOnly; Secure; SameSite=None",
            "Server",
            "cloudflare",
            "CF-RAY",
            "81300a59cca9094c-SEA"
        ],
        "responseIsBinary": false
    }
]
</file>

<file path="test/fixtures/webhooks_endpoint.json">
[
  {
    "scope": "https://nodejsapi.zendesk.com:443",
    "method": "POST",
    "path": "/api/v2/webhooks",
    "status": 201,
    "response": {
      "id": 19442893058196
    },
    "responseIsBinary": false
  }
]
</file>

<file path="test/authentication.test.js">
dotenv.config();
⋮----
describe('Zendesk Client Authentication', () => {
beforeAll(async () => {
nockBack.setMode('record');
nockBack.fixtures = path.join(__dirname, '/fixtures');
⋮----
/**
   * Verifies the authenticated user's name.
   * @param {import('../src/index.js').ZendeskClient} client - The Zendesk client.
   * @param {string} expectedName - The expected name of the authenticated user.
   * @returns {Promise<void>}
   */
const verifyUser = async (client, expectedName) => {
const {result: user} = await client.users.me();
expect(user.name).toBe(expectedName);
⋮----
it('should authenticate an anonymous user without any credentials(fail condition)', async () => {
const {nockDone} = await nockBack('authentication_test_no_creds.json');
const client = setupClient({});
await verifyUser(client, 'Anonymous user');
nockDone();
⋮----
it('should fail authentication with an incorrect username and token combination', async () => {
const {nockDone} = await nockBack(
⋮----
const client = setupClient({token: 'incorrectToken'});
⋮----
it('should fail authentication with an incorrect username and password combination', async () => {
const {nockDone} = await nockBack('authentication_test_incorrect_u_p.json');
const client = setupClient({password: 'incorrectPassword'});
⋮----
it('should throw an error for an invalid subdomain', async () => {
⋮----
const client = initializeClient({
⋮----
await expect(() => client.users.me()).rejects.toThrowError(
⋮----
it('should authenticate a user using a provided username and token', async () => {
⋮----
const client = setupClient({token});
await verifyUser(client, TEST_USER);
⋮----
it('should authenticate a user using a provided username and password', async () => {
const {nockDone} = await nockBack('authentication_test_user_pass.json');
const client = setupClient({password});
⋮----
it('should throw an error when trying OAuth authentication without a token', async () => {
⋮----
const client = setupClient({useOAuth: true});
⋮----
it('should authenticate a user using OAuth with a valid token', async () => {
⋮----
const client = setupClient({
⋮----
it('should authenticate a user with a valid endpoint', async () => {
const {nockDone} = await nockBack('authentication_test_endpoint_uri.json');
const client = setupClient({endpointUri, token, subdomain: undefined});
</file>

<file path="test/endpoint-checker.test.js">
describe('Zendesk Client Endpoint Checker', () => {
const checker = new EndpointChecker();
⋮----
it('should recognize a URL pattern with a locale placeholder', () => {
⋮----
const isSupported = checker.supportsCursorPagination(endpoint);
⋮----
expect(isSupported).toBe(true);
⋮----
it('should recognize a URL pattern containing the wildcard `.*`', () => {
⋮----
checker.supportsCursorPagination(endpointWithCursor);
⋮----
expect(isSupportedWithCursor).toBe(true);
⋮----
it('should not recognize a URL pattern missing the wildcard segment', () => {
⋮----
const isSupportedWithoutCursor = checker.supportsCursorPagination(
⋮----
expect(isSupportedWithoutCursor).toBe(false);
⋮----
it('should recognize a complex endpoint pattern containing multiple placeholders', () => {
⋮----
checker.supportsCursorPagination(complexEndpoint);
⋮----
expect(isSupportedForComplex).toBe(true);
</file>

<file path="test/exceptionshandling.test.js">
dotenv.config();
⋮----
describe('Zendesk Exceptions Handling', () => {
it('should throw an error for an invalid subdomain', async () => {
const error = new Error('My Custom Error');
⋮----
const client = initializeClient({
⋮----
transportFn() {
⋮----
await expect(() => client.users.me()).rejects.toThrowError(error);
</file>

<file path="test/job-runner.js">
class JobInitiator {
async initiate(initiateFunction) {
const {result} = await initiateFunction();
⋮----
class JobStatusVerifier {
verifyInitialStatus(result) {
expect(result.job_status).toHaveProperty('id');
expect(result.job_status.status).toBe('queued');
⋮----
verifyFinalStatus(finalJobResults) {
expect(finalJobResults.status).toBe('completed');
⋮----
class JobWatcher {
⋮----
async watch(jobStatusId) {
return this.client.jobstatuses.watch(jobStatusId, 1000, 30);
⋮----
export class JobRunner {
⋮----
this.initiator = new JobInitiator();
this.verifier = new JobStatusVerifier();
this.watcher = new JobWatcher(client);
⋮----
async run(initiateFunction, validateJobDetails) {
const result = await this.initiator.initiate(initiateFunction);
⋮----
this.verifier.verifyInitialStatus(result);
⋮----
const finalJobResults = await this.watcher.watch(result.job_status.id);
⋮----
this.verifier.verifyFinalStatus(finalJobResults);
⋮----
await validateJobDetails(finalJobResults);
</file>

<file path="test/node-zendesk-tests.js">
const client = zd.createClient({
⋮----
/**
 *
 */
async function performZendeskOperations() {
/** Job Statuses Methods */
// await client.jobstatuses.show(123);
// await client.jobstatuses.watch(123, 2, 3);
⋮----
/** Macros Methods */
// await client.macros.applyTicket(123, 123);
⋮----
/** Organizations Methods */
// await client.organizations.list();
// await client.organizations.show(123);
// await client.organizations.create({organization: {name: 'food'}});
await client.organizations.createMany({
⋮----
// Await client.organizations.update(123, {organization: {notes: 'foo'}});
//   Await client.organizations.updateMany({
//     organizations: [
//       {id: 123, notes: 'foo'},
//       {id: 456, notes: 'bar'},
//     ],
//   });
// await client.organizations.delete(123);
//   await client.organizations.search({external_id: 123});
//   await client.organizations.autocomplete({name: 'foo'});
⋮----
/** Requests Methods */
//   await client.requests.list();
//   await client.requests.listOpen();
//   await client.requests.listSolved();
//   await client.requests.listCCD(123);
// Await client.requests.listByUser(123);
// await client.requests.listByOrganization(123);
//   await client.requests.getRequest(123);
// Await client.requests.create({request: {subject: 'foo', comment: {}}});
// await client.requests.update(123, {request: {}});
// await client.requests.listComments(123);
// await client.requests.getComment(123, 123);
⋮----
/** Attachments Methods */
⋮----
//   const {
//     r2: {
//       upload: {token},
//     },
//   } = await (async () => {
//     const r1 = await client.attachments.show(1);
//     const r2 = await client.attachments.upload('/path/to/file', {
//       filename: 'filename',
//     });
//     const r3 = await client.attachments.upload(
//       require('node:buffer').Buffer.alloc(8),
//       {
//         filename: 'filename',
//       },
//     );
//     const r4 = await client.attachments.upload(
//       require('node:buffer').Buffer.from('Test'),
⋮----
//         binary: true,
⋮----
//     return {r1, r2, r3, r4};
//   })();
⋮----
//   await client.attachments.upload(path.resolve('./examples/busey.gif'), {
//     filename: 'busey.gif',
⋮----
/** Tickets Methods */
//   await client.tickets.list();
//  Await client.tickets.create({ticket: {comment: {uploads: [token]}}});
//   await client.tickets.createMany({tickets: [{comment: {}}]});
//   await client.tickets.update(123, {ticket: {}});
//   await client.tickets.updateMany({tickets: [{}]});
//   await client.tickets.delete(123);
//   await client.tickets.deleteMany([123, 234]);
//   await client.tickets.merge(123, {ids: [234, 345]});
//   await client.tickets.export(1_332_034_771);
//   await client.tickets.exportSample(1_332_034_771, {});
//   await client.tickets.incremental(1_332_034_771);
//   await client.tickets.incrementalInclude(1_332_034_771, {});
//   await client.tickets.incrementalSample(1_332_034_771);
//   await client.tickets.getComments(123);
//   await client.tickets.exportAudit(123);
//   await client.tickets.addTags(123, ['foo', 'bar']);
⋮----
/** Ticket Fields */
//   await client.ticketfields.create({
//     type: 'subject',
//     title: 'Subject',
//     description: 'This is the agent only description for the subject field',
//     position: 0,
//     active: true,
//     key: 'subject',
⋮----
/** Groups Methods */
//   await client.groups.list();
//   await client.groups.assignable();
//   await client.groups.show(123);
//   Await client.groups.create({
//     group: {name: 'foo', default: false, description: 'bar'},
⋮----
//   await client.groups
//     .create({group: {name: 'foo', default: false, description: 'bar'}})
//     .then();
//   await client.groups.update(123, {group: {name: 'foo'}});
//   await client.groups.delete(123);
⋮----
/** Users Methods */
//   await client.users.auth();
//   await client.users.list();
//   Await client.users.listByGroup(123);
//   await client.users.listByOrganization(123);
//   await client.users.show(123);
//   await client.users.showMany([123, 234]);
//   await client.users.create({user: {name: 'foo'}});
//   await client.users.createMany({users: [{name: 'foo'}]});
//   await client.users.createOrUpdate({user: {name: 'foo'}});
//   await client.users.createOrUpdateMany({users: [{name: 'foo'}]});
//   await client.users.createOrUpdateMany({users: [{name: 'foo'}]}).then();
//   await client.users.update(123, {user: {}});
//   await client.users.updateMany([123, 234], {users: [{}, {}]});
//   await client.users.suspend(123);
//   await client.users.unsuspend(123);
//   await client.users.delete(123);
//   await client.users.search({});
//   await client.users.me();
//   await client.users.merge(123, 234);
//   await client.users.password(123, 'foo', 'bar');
//   await client.users.incrementalInclude(1_332_034_771, {});
//   await client.users.incremental(1_332_034_771);
//   await client.users.incrementalSample(1_332_034_771);
⋮----
/** User Identities Methods */
//   await client.useridentities.list(123);
//   await client.useridentities.show(123, 234);
//   await client.useridentities.create(123, {
//     identity: {type: 'email', value: 'foo@example.com'},
⋮----
//   await client.useridentities
//     .create(123, {identity: {type: 'email', value: 'foo@example.com'}})
⋮----
//   await client.useridentities.update(123, 234, {identity: {}});
//   await client.useridentities.makePrimary(123, 234);
//   await client.useridentities.verify(123, 234);
//   await client.useridentities.requestVerification(123, 234);
//   await client.useridentities.delete(123, 234);
⋮----
/** User Fields */
//   await client.userfields.create({
//     title: 'Support description (type text is default)',
//     description: 'This field describes the support plan this user has',
⋮----
//     key: 'support_description',
⋮----
//     type: 'textarea',
//     title: 'Support description',
⋮----
//     type: 'tagger',
⋮----
//     custom_field_options: [
⋮----
//         id: 1,
//         name: 'Custom Fielld Option',
//         value: 5,
⋮----
performZendeskOperations().catch((error) => {
console.error('Error during Zendesk operations:', error);
</file>

<file path="test/organizations.many.test.js">
/* eslint-disable no-await-in-loop */
⋮----
dotenv.config();
⋮----
describe('Zendesk Client Organizations(many/bulk)', () => {
⋮----
const client = setupClient();
const jobs = new JobRunner(client);
⋮----
beforeAll(async () => {
nockBack.setMode('record');
nockBack.fixtures = path.join(__dirname, '/fixtures');
⋮----
it(
⋮----
const {nockDone} = await nockBack(
⋮----
await jobs.run(
⋮----
organizationsToCreate = generateMultipleOrganizations(30);
return client.organizations.createMany({
⋮----
const createdOrgIDs = finalJobResults.results.map((org) => org.id);
const orgDetails = await client.organizations.showMany(createdOrgIDs);
⋮----
expect(orgDetails.length).toBe(
⋮----
const orgDetail = orgDetails.find(
⋮----
expect(orgDetail).toBeTruthy(
⋮----
testOrganizations.push(orgDetail);
⋮----
nockDone();
⋮----
const ids = testOrganizations.map((org) => org.id);
return client.organizations.updateMany({
⋮----
const updatedOrgIDs = finalUpdateJobResults.results.map(
⋮----
await client.organizations.showMany(updatedOrgIDs);
⋮----
const updatedNotes = updatedOrgDetails.map((org) => org.notes);
expect(updatedNotes).toContain(
⋮----
return client.organizations.bulkDelete(ids);
⋮----
const deletedOrgIDs = finalDeleteJobResults.results.map(
⋮----
const orgDetail = await client.organizations.show(orgId);
expect(orgDetail).toBeNull(
⋮----
expect(error.message).toContain(
</file>

<file path="test/organizations.test.js">
import {/* afterAll, */ describe, expect, it, beforeAll} from 'vitest';
⋮----
dotenv.config();
⋮----
describe('Zendesk Client Organizations', () => {
⋮----
const client = setupClient();
⋮----
beforeAll(async () => {
nockBack.setMode('record');
nockBack.fixtures = path.join(__dirname, '/fixtures');
⋮----
it('should successfully create a new organization with the expected name', async () => {
const {nockDone} = await nockBack('organizations_test_create.json');
const {result: organization} = await client.organizations.create({
⋮----
expect(organization.name).toBe(organizationName);
nockDone();
⋮----
it('should include the new organization in the list of all organizations', async () => {
const {nockDone} = await nockBack('organizations_test_list_all.json');
const result = await client.organizations.list();
const organizations = result.map((organization) => organization.name);
expect(organizations).toContain(organizationName);
⋮----
it('should retrieve the details of the created organization using its ID', async () => {
const {nockDone} = await nockBack('organizations_test_show_single.json');
const {result: organization} = await client.organizations.show(
⋮----
it('should successfully update the notes and external ID of the organization', async () => {
const {nockDone} = await nockBack(
⋮----
const {result: organization} = await client.organizations.update(
⋮----
expect(organization.notes).toBe('foo');
expect(organization.external_id).toBe(randomExternalID.toString());
⋮----
it('should find the organization when searching by the updated external ID', async () => {
⋮----
const result = await client.organizations.search(randomExternalID);
⋮----
nockDone(); // #TODO_FARRIN Help 400 bad request here.
⋮----
// Autocomplete seems to not be instant, maybe for caching reasons?
it('should return potential matches when autocompleting the organization name', async () => {
⋮----
const result = await client.organizations.autocomplete({
name: organizationName.slice(0, 4),
⋮----
expect(Array.isArray(organizations)).toBe(true);
⋮----
// Delete technically returns an error, but it's a 204 No Content error and ths not thrown
it('should successfully delete the created organization', async () => {
⋮----
const {result} = await client.organizations.delete(testOrganization.id);
expect(result.message).toBe('No Content'); // #TODO_FARRIN help, Please see if 204 statusText Null is correct in main library
⋮----
it('should throw an error when trying to delete an already deleted or non-existent organization', async () => {
⋮----
await expect(() =>
client.organizations.delete(69_420 * 69_420),
).rejects.toThrowError('Item not found');
</file>

<file path="test/pagination.test.js">
dotenv.config();
⋮----
describe('Zendesk Client Pagination', () => {
⋮----
const uniqueOrgName = (iteration) =>
`Test Organization ${('The Quick Brown Foxx' + iteration).toString('hex')}`;
⋮----
const defaultClient = setupClient();
⋮----
/**
   * Creates a test organization based on the given iteration.
   * @param {number} iteration - The iteration number used to generate a unique organization name.
   */
async function createTestOrganization(iteration) {
const {result: organization} = await defaultClient.organizations.create({
organization: {name: uniqueOrgName(iteration)},
⋮----
testOrganizations.push(organization);
⋮----
beforeAll(async () => {
nockBack.setMode('record');
nockBack.fixtures = path.join(__dirname, '/fixtures');
const {nockDone} = await nockBack('pagination_test_setup.json');
await Promise.all([createTestOrganization(1), createTestOrganization(2)]);
nockDone();
⋮----
it(
⋮----
const {nockDone} = await nockBack('pagination_test_execute.json');
const paginatedClient = setupClient({query: {page: {size: 1}}});
const organizations = await paginatedClient.organizations.list();
const orgNames = organizations.map((org) => org.name);
⋮----
expect(orgNames).toContain(testOrg.name);
⋮----
afterAll(async () => {
const {nockDone} = await nockBack('pagination_test_cleanup.json');
await Promise.all(
testOrganizations.map((org) =>
defaultClient.organizations.delete(org.id),
</file>

<file path="test/setup.js">
// Setup.js
⋮----
dotenv.config({
⋮----
export const generateOrganizationName = (id) => {
⋮----
export const generateMultipleOrganizations = (n) => {
⋮----
organizations.push({
name: generateOrganizationName(i),
⋮----
export const initializeClient = (config) => {
return createClient({
⋮----
/**
 *
 * @param {import('../src/clients/client').ClientOptions} config - The SetupClient config
 * @returns {import('../src/clients/client').ZendeskClient} - The Zendesk Client
 */
export const setupClient = (config = {}) =>
createClient({
</file>

<file path="test/webhooks.test.js">
dotenv.config();
⋮----
describe('Zendesk Client Webhooks', () => {
const client = setupClient();
⋮----
beforeAll(async () => {
nockBack.setMode('record');
nockBack.fixtures = path.join(__dirname, '/fixtures');
⋮----
it('should call endpoint without .json', async () => {
const {nockDone} = await nockBack('webhooks_endpoint.json');
const {result} = await client.webhooks.create({
⋮----
nockDone();
⋮----
expect(result.id).toBeDefined();
</file>

<file path=".env.test">
# .env

# Zendesk authentication details
ZENDESK_FULL_NAME="TEST USER"
ZENDESK_USERNAME=myUsername
ZENDESK_TOKEN=myToken
ZENDESK_PASSWORD=myPassword
ZENDESK_SUBDOMAIN=nodejsapi
ZENDESK_OAUTH_ACCESS_TOKEN=myOAuthAccessToken
ZENDESK_ENDPOINT_URI=https://nodejsapi.zendesk.com/api/v2
</file>

<file path=".gitignore">
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Dependency directories
node_modules/
jspm_packages/

# Optional npm cache directory
.npm

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Others
.DS_Store
*.iml
*.ipr
*.iws
/.idea
.vscode

# dotenv environment variable files
.env
.env.development.local
.env.test.local
.env.production.local
.env.local

# vitepress build/dev output
docs/.vitepress/dist
docs/.vitepress/cache
docs/.vitepress/.temp
docs/api/
docs/code/

# vitest
coverage/

dist/
</file>

<file path=".npmignore">
.DS_Store
npm-debug.log
node_modules
examples/
.github/
.vscode/
.travis.yml
coverage/
test/
docs/
doc/
CODE_OF_CONDUCT.md
CONTRIBUTING.md
deploy.docs.*
SECURITY.md
.env
.env.example
.xo-config.json
</file>

<file path=".travis.yml">
language: node_js
branches:
  only:
    - master
node_js:
  - 0.10
  
notifications:
  email:
    - blakmatrix@gmail.com
</file>

<file path=".xo-config.json">
{
    "plugin": ["jsdoc"],
    "prettier": true,
    "space": 2,
    "rules": {
      "jsdoc/check-access": 1,
      "jsdoc/check-alignment": 1,
      "jsdoc/check-param-names": 1,
      "jsdoc/check-property-names": 1,
      "jsdoc/check-tag-names": 1,
      "jsdoc/check-types": 1,
      "jsdoc/check-values": 1,
      "jsdoc/empty-tags": 1,
      "jsdoc/implements-on-classes": 1,
      "jsdoc/multiline-blocks": 1,
      "jsdoc/no-multi-asterisks": 1,
      "jsdoc/no-undefined-types": 1,
      "jsdoc/require-jsdoc": 1,
      "jsdoc/require-param": 1,
      "jsdoc/require-param-description": 1,
      "jsdoc/require-param-name": 1,
      "jsdoc/require-param-type": 1,
      "jsdoc/require-property": 1,
      "jsdoc/require-property-description": 1,
      "jsdoc/require-property-name": 1,
      "jsdoc/require-property-type": 1,
      "jsdoc/require-returns": 1,
      "jsdoc/require-returns-check": 1,
      "jsdoc/require-returns-description": 1,
      "jsdoc/require-returns-type": 1,
      "jsdoc/require-yields": 1,
      "jsdoc/require-yields-check": 1,
      "jsdoc/sort-tags": 1,
      "jsdoc/tag-lines": 1,
      "jsdoc/valid-types": 1,

      "unicorn/prefer-module": "off",
      "unicorn/prefer-top-level-await": "off",
      "import/extensions": "off",
      "no-multi-assign": "off",
      "camelcase": [
        "warn",
        {
          "allow": [
            "automation_ids",
            "label_names",
            "phone_number",
            "previous_password",
            "start_time",
            "ticket_ids",
            "trigger_ids",
            "host_mapping",
            "malware_access_override",
            "group_memberships",
            "available_locales",
            "organization_field_ids",
            "external_id",
            "sla_policy_ids",
            "job_status",
            "sharing_agreement",
            "prepend_clone_title",
            "ticket_form_ids",
            "user_field_ids",
            "view_order",
            "custom_role",
            "http_method",
            "request_format",
            "client_id",
            "organization_membership",
            "organization_memberships"
          ]
        }
      ]
    }
  }
</file>

<file path="CODE_OF_CONDUCT.md">
## Being Considerate as Contributors

We ask all contributors to this project to be mindful of others and make meaningful additions. Though there is no formal code, we trust that everyone will interact thoughtfully, with patience, good faith, and kindness. If you have any concerns, please contact the maintainers.
</file>

<file path="CONTRIBUTING.md">
# Contributing to `node-zendesk`

First and foremost, thank you! We appreciate that you want to contribute to `node-zendesk`. Your time is valuable, and your contributions mean a lot to us.

## Getting Started

- **Fork the repository** and clone it locally. Connect your local repository to the original `node-zendesk` repository by adding it as an upstream remote:
  
  ```
  git clone https://github.com/[your-username]/node-zendesk.git
  git remote add upstream https://github.com/blakmatrix/node-zendesk.git
  ```

- **Install the dependencies**:
  
  ```
  npm install
  ```

## How to Contribute

1. **Find an issue to work on**. Check out the open [issues](https://github.com/blakmatrix/node-zendesk/issues) or create a new one describing a feature, bug, or other project-related task. ( Check out the [API Coverage Document](https://github.com/blakmatrix/node-zendesk/blob/master/doc/api-coverage.md) for ideas)

2. **Work on your feature or bugfix**. Ensure your code is clean and well-documented. Adhere to the project's coding style.

3. **Write tests**. If you're adding a new feature, make sure you add relevant tests. If you're fixing a bug, try to write a test that would have caught the bug.

4. **Create a pull request**. Push to your fork and [submit a pull request](https://github.com/blakmatrix/node-zendesk/pulls) to the main `node-zendesk` repository. Describe your changes comprehensively.

5. **Wait for the review**. The maintainers will review your PR, suggest changes if necessary, and merge it once it's approved.

## Coding Style

- We use the `xo` package as our JavaScript/TypeScript linter. Please ensure your code conforms to the linter's rules. You can check your code with `xo` by running:
  
  ```
  npm run lint
  ```

- For those who prefer integrating the linter into their editors, [`xo` offers editor plugins](https://github.com/xojs/xo/tree/main#editor-plugins) for smoother development.
  
- Use clear and meaningful variable and function names.
- Include comments and keep your code as readable as possible.

## Documentation Reference

- Zendesk's documentation can be found [here](https://developer.zendesk.com/rest_api/docs/core/introduction).

## Communication

- If you have a question or need assistance, feel free to open an issue or email blakmatrix@gmail.com.
  
## Thanks Again!

Thank you for your contribution! By participating in this project, you agree to abide by its terms and the expectations set in the Code of Conduct.
</file>

<file path="LICENSE">
MIT License

Copyright (c) 2012-2023 Farrin Reid

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
</file>

<file path="package.json">
{
  "name": "node-zendesk",
  "version": "6.0.1",
  "type": "commonjs",
  "description": "A trusted Zendesk API client library for Node.js and the browser, lovingly maintained for over 10 years.",
  "keywords": [
    "zendesk",
    "API",
    "api-client",
    "api-wrapper",
    "browser-library",
    "buddha",
    "chat-api",
    "customer-service",
    "customer-support",
    "helpdesk",
    "knowledge-base",
    "node-library",
    "rest-api",
    "sdk",
    "support-api",
    "support-ticket",
    "supportdesk",
    "ticket-management",
    "ticketing",
    "zendesk-api",
    "zendesk-client",
    "zendesk-integration",
    "zendesk-platform",
    "zendesk-sdk"
  ],
  "homepage": "https://github.com/blakmatrix/node-zendesk",
  "repository": {
    "type": "git",
    "url": "git://github.com/blakmatrix/node-zendesk.git"
  },
  "main": "./dist/index.js",
  "types": "./dist/types/index.d.ts",
  "exports": {
    ".": {
      "import": {
        "types": "./dist/types/index.d.ts",
        "default": "./dist/index.js"
      },
      "require": {
        "types": "./dist/types/index.d.ts",
        "default": "./dist/index.js"
      }
    },
    "./clients/*": {
      "import": {
        "types": "./dist/types/clients/*.d.ts",
        "default": "./dist/clients/*.js"
      },
      "require": {
        "types": "./dist/types/clients/*.d.ts",
        "default": "./dist/clients/*.js"
      }
    },
    "./clients/*/*": {
      "import": {
        "types": "./dist/types/clients/*/*.d.ts",
        "default": "./dist/clients/*/*.js"
      },
      "require": {
        "types": "./dist/types/clients/*/*.d.ts",
        "default": "./dist/clients/*/*.js"
      }
    },
    "./clients/*/*/*": {
      "import": {
        "types": "./dist/types/clients/*/*/*.d.ts",
        "default": "./dist/clients/*/*/*.js"
      },
      "require": {
        "types": "./dist/types/clients/*/*/*.d.ts",
        "default": "./dist/clients/*/*/*.js"
      }
    }
  },
  "files": [
    "dist"
  ],
  "scripts": {
    "clean:dist": "npx rimraf ./dist",
    "esbuild": "npx esbuild ./src/index.js --bundle --outdir=dist --platform=node --target=node18 --minify --packages=external --format=cjs",
    "build:types": "npx -p typescript tsc ./src/**/**/*.js --declaration --allowJs --emitDeclarationOnly --outDir dist/types",
    "build": "npm run clean:dist && npm run build:types && npm run esbuild",
    "prepublishOnly": "npm run build",
    "postpublish": "npm run clean:dist",
    "test": "vitest run",
    "test:coverage": "vitest run --coverage",
    "lint": "xo",
    "lint:fix": "xo --fix",
    "docs:code": "npx typedoc --out ./docs/code --plugin typedoc-plugin-markdown 'dist/**/*.ts'",
    "docs:dev": "vitepress dev docs",
    "docs:build": "vitepress build docs",
    "docs:preview": "vitepress preview docs",
    "docs:deploy-github-pages": "npm run build && npm run docs:code && npm run docs:build",
    "release": "git push origin --follow-tags"
  },
  "author": "Farrin Reid <blakmatrix@gmail.com>",
  "contributors": [
    "Adil H <didil@noreply.users.github.com>",
    "Amal Khezami <khezamian@noreply.users.github.com>",
    "Anastasi Bakolias <spasiu@noreply.users.github.com>",
    "Azharuddin <gs-akhan@noreply.users.github.com>",
    "Bas <basdewachter@noreply.users.github.com>",
    "Blair Anderson <blairanderson@noreply.users.github.com>",
    "Brian Hartvigsen <tresni@noreply.users.github.com>",
    "Carl-Fredrik Herö <carlfredrikhero@noreply.users.github.com>",
    "Colin Loretz <colinloretz@noreply.users.github.com>",
    "David Kapell <dkapell@noreply.users.github.com>",
    "Eike Bernhardt <teefax@noreply.users.github.com>",
    "Eike Thienemann-Dehde <edehde@noreply.users.github.com>",
    "Eric Davis <iconecd@noreply.users.github.com>",
    "Eriks Reks <erikzrekz@noreply.users.github.com>",
    "Fred Souza <fmsouza@noreply.users.github.com>",
    "genius-fx <genius-fx@noreply.users.github.com>",
    "genius-fx <gitter-badger@noreply.users.github.com>",
    "Heriberto Madrigal <magic-madrigal@noreply.users.github.com>",
    "Iconecd <iconecd@noreply.users.github.com>",
    "Ignigena <Ignigena@noreply.users.github.com>",
    "James Greene <JamesMGreene@noreply.users.github.com>",
    "Jeff Zabel <jzabel@noreply.users.github.com>",
    "Marcelo Luiz Onhate <onhate@noreply.users.github.com>",
    "Mathias Anderssén <Okar@noreply.users.github.com>",
    "matthewschmidt <matthewschmidt.users.github.com>",
    "Nie Xiaochen <nnabuuu@noreply.users.github.com>",
    "Oleksandr Pidlisnyi <unreadableusername@noreply.users.github.com>",
    "oleksiy-turchanikov <oleksiy-turchanikov@noreply.users.github.com>",
    "Roman Onufryk <onufryk@noreply.users.github.com>",
    "Shuan Wang <swang@noreply.users.github.com>",
    "Stuart McGrigor <stueynz@noreply.users.github.com>",
    "Wade Grandoni <wadegrandoni@noreply.users.github.com>"
  ],
  "license": "MIT",
  "funding": [
    {
      "type": "individual",
      "url": "https://github.com/blakmatrix/node-zendesk?sponsor=1"
    }
  ],
  "bugs": {
    "url": "https://github.com/blakmatrix/node-zendesk/issues"
  },
  "engines": {
    "node": ">= 18"
  },
  "dependencies": {
    "cross-fetch": "^4.0.0"
  },
  "devDependencies": {
    "@vitest/coverage-v8": "^2.1.6",
    "dotenv": "^16.4.5",
    "eslint-plugin-jsdoc": "^50.6.0",
    "nock": "^13.5.6",
    "typedoc": "^0.26.11",
    "typedoc-plugin-markdown": "^4.2.10",
    "vitepress": "^1.5.0",
    "vitepress-sidebar": "^1.29.0",
    "vitest": "^2.1.6",
    "vue-github-button": "^3.1.3",
    "xo": "^0.59.3"
  }
}
</file>

<file path="ReadMe.md">
<div align="center">

[![node-zendesk logo](https://blakmatrix.github.io/node-zendesk/Node_Zendesk_logo.svg "When you realize nothing is lacking, the whole world belongs to you. -Lao Tzu")](https://blakmatrix.github.io/node-zendesk/)

[![npm][npm]][npm-url]

[![node][node]][node-url]
[![licenses][licenses]][licenses-url]
[![PR's welcome][prs]][prs-url]
[![XO code style][xo]][xo-url]


  <a href="https://docs.github.com/en/code-security/dependabot/dependabot-security-updates/about-dependabot-security-updates#about-compatibility-scores">
    <img src="https://api.dependabot.com/badges/compatibility_score?dependency-name=node-zendesk&package-manager=npm_and_yarn&previous-version=2.20&new-version=3.0.1">
  </a>
	<a href="https://npmcharts.com/compare/node-zendesk?minimal=true">
		<img src="https://img.shields.io/npm/dm/node-zendesk.svg">
	</a>
	<a href="https://packagephobia.com/result?p=node-zendesk">
		<img src="https://packagephobia.com/badge?p=node-zendesk" alt="install size">
	</a>
	<a href="https://opencollective.com/node-zendesk#backer">
		<img src="https://opencollective.com/node-zendesk/backers/badge.svg">
	</a>
	<a href="https://opencollective.com/node-zendesk#sponsors">
		<img src="https://opencollective.com/node-zendesk/sponsors/badge.svg">
	</a>
	<a href="https://github.com/blakmatrix/node-zendesk/graphs/contributors">
		<img src="https://img.shields.io/github/contributors/blakmatrix/node-zendesk.svg">
	</a>
	<a href="https://github.com/blakmatrix/node-zendesk/discussions">
		<img src="https://img.shields.io/github/discussions/blakmatrix/node-zendesk">
	</a>
  <h1>node-zendesk</h1>
  <p><i>A Zendesk API client library for use with node.js</i></p>
  <p>
    node-zendesk is a versatile gateway between Node.js and the Zendesk Customer Support Platform. Primarily designed for seamless integration with Node.js applications, it also excels in transforming, accessing, and packaging various Zendesk resources and assets. Beyond its core function, it stands ready to bridge the gap between development and Zendesk's powerful capabilities.
  </p>
</div>

**Read the full documentation at [blakmatrix.github.io/node-zendesk/](https://blakmatrix.github.io/node-zendesk/)**

## Install

To use the API, just do the standard

```shell
npm install --save node-zendesk
```


## Example

```js
var zendesk = require('node-zendesk');
// or `import {createClient} from 'node-zendesk'` if using typescript

var client = zendesk.createClient({
  username:  'username',
  token:     'token',
  subdomain: 'subdomain'
});

client.users.list().then(users => {
  console.log('Total Users:', users.length);
  console.log('User Names:', users.map(user => user.name));
}).catch(error => {
  console.error(`Failed to get list of users: ${error.message}`);
});
```

Take a look in the `examples` folder for more examples.

## Getting Started

If you're new to `node-zendesk`, we recommend checking out our [Getting Started Guide](https://blakmatrix.github.io/node-zendesk/guide) to help you set up and familiarize yourself with the library.

## Contributions

If you're looking to contribute, please refer to the [API Coverage Document](https://github.com/blakmatrix/node-zendesk/blob/master/doc/api-coverage.md), open an issue, or make a PR!

Tests and examples are also welcome.

Zendesk's documentation can be found [here](https://developer.zendesk.com/documentation/).

## 🌟 Support Our Project!

🎉 Join our community of supporters, backers, and sponsors to help fuel the growth and sustainability of our open-source project. Your contribution, no matter the size, makes a meaningful impact:

- **Supporters ($1/month):** Even a small contribution helps us continue our mission. Every dollar adds up!
- **Backers ($5/month):** Take your support up a notch and gain exclusive updates and features.
- **Sponsors ($100/month):** Champion the project's progress, get prominent recognition, and shape its future.

By becoming a supporter, backer, or sponsor, you're investing in the innovation and excellence of our project. Together, we can drive meaningful change and empower developers worldwide.

🚀 [Join Us](https://opencollective.com/node-zendesk) | [Learn More](https://opencollective.com/node-zendesk)


## License

MIT.


[npm]: https://img.shields.io/npm/v/node-zendesk.svg
[npm-url]: https://npmjs.com/package/node-zendesk
[node]: https://img.shields.io/node/v/node-zendesk.svg
[node-url]: https://nodejs.org
[prs]: https://img.shields.io/badge/PRs-welcome-brightgreen.svg
[prs-url]: https://github.com/blakmatrix/node-zendesk/blob/master/CONTRIBUTING.md
[licenses-url]: https://app.fossa.io/projects/git%2Bhttps%3A%2F%2Fgithub.com%2Fblakmatrix%2Fnode-zendesk?ref=badge_shield
[licenses]: https://app.fossa.io/api/projects/git%2Bhttps%3A%2F%2Fgithub.com%2Fblakmatrix%2Fnode-zendesk.svg?type=shield
[xo]: https://shields.io/badge/code_style-5ed9c7?logo=xo&labelColor=gray
[xo-url]: https://github.com/xojs/xo
</file>

<file path="SECURITY.md">
# Security Policy

## Supported Versions

Only the latest version of `node-zendesk` is currently being supported with security updates.

| Version   | Supported          |
| --------- | ------------------ |
| latest    | :white_check_mark: |
| < latest  | :x:                |

## Reporting a Vulnerability

If you believe you've found a security vulnerability in `node-zendesk`, please send an email to [blakmatrix@gmail.com](mailto:blakmatrix@gmail.com) detailing the suspected issue. Do **not** open a public GitHub issue if the bug is a security vulnerability.

### What to include in your report

To help us understand the scope and impact of the security issue, please include as much detail as possible. This might include:

- Steps to reproduce the issue, ideally a minimized test case.
- Your expected result.
- Your observed result.

### What to expect

After you've submitted a vulnerability report:

- We will acknowledge receipt of your vulnerability report.
- We'll do our best to validate the reported vulnerability.
- If valid, please understand that `node-zendesk` is a labor of love and maintained without any sponsorship(yet). While we always aim to address vulnerabilities as quickly as possible, it might take some time depending on the availability of maintainers.
- Once resolved, we will provide an update on the report and possible mention in release notes (if you agree).

Thank you for helping to improve `node-zendesk` and for your patience.
</file>

</files>
